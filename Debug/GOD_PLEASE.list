
GOD_PLEASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005794  08005794  00006794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005900  08005900  00006900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800590c  0800590c  0000690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005910  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000068  08005978  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005978  000073b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113ad  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002475  00000000  00000000  00018445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0001a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b40  00000000  00000000  0001b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbf2  00000000  00000000  0001c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d4c  00000000  00000000  0003bea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f5e  00000000  00000000  0004cbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113b4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  00113b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00118064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800577c 	.word	0x0800577c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800577c 	.word	0x0800577c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fd02 	bl	8000ffa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8ef 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */




  TxHeader.Identifier = 0x123;
 80005fa:	4b68      	ldr	r3, [pc, #416]	@ (800079c <main+0x1b0>)
 80005fc:	f240 1223 	movw	r2, #291	@ 0x123
 8000600:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000602:	4b66      	ldr	r3, [pc, #408]	@ (800079c <main+0x1b0>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000608:	4b64      	ldr	r3, [pc, #400]	@ (800079c <main+0x1b0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 800060e:	4b63      	ldr	r3, [pc, #396]	@ (800079c <main+0x1b0>)
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000614:	4b61      	ldr	r3, [pc, #388]	@ (800079c <main+0x1b0>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800061a:	4b60      	ldr	r3, [pc, #384]	@ (800079c <main+0x1b0>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000620:	4b5e      	ldr	r3, [pc, #376]	@ (800079c <main+0x1b0>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000626:	4b5d      	ldr	r3, [pc, #372]	@ (800079c <main+0x1b0>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800062c:	4b5b      	ldr	r3, [pc, #364]	@ (800079c <main+0x1b0>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f9f3 	bl	8000a1c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000636:	f000 f91b 	bl	8000870 <MX_FDCAN1_Init>

  //MX_WWDG_Init();
  MX_SPI1_Init();
 800063a:	f000 f95f 	bl	80008fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f99b 	bl	8000978 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 8000642:	4857      	ldr	r0, [pc, #348]	@ (80007a0 <main+0x1b4>)
 8000644:	f000 ffd6 	bl	80015f4 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2101      	movs	r1, #1
 800064c:	4854      	ldr	r0, [pc, #336]	@ (80007a0 <main+0x1b4>)
 800064e:	f001 f945 	bl	80018dc <HAL_FDCAN_ActivateNotification>
  lastCANMessageTick = HAL_GetTick();
 8000652:	f000 fd37 	bl	80010c4 <HAL_GetTick>
 8000656:	4603      	mov	r3, r0
 8000658:	4a52      	ldr	r2, [pc, #328]	@ (80007a4 <main+0x1b8>)
 800065a:	6013      	str	r3, [r2, #0]
  printf("USART2 printf redirect working!\r\n");
 800065c:	4852      	ldr	r0, [pc, #328]	@ (80007a8 <main+0x1bc>)
 800065e:	f004 fa2b 	bl	8004ab8 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, dummyData);
	  if (HAL_GetTick() - lastSend > 100) { // every 100 ms
 8000662:	f000 fd2f 	bl	80010c4 <HAL_GetTick>
 8000666:	4602      	mov	r2, r0
 8000668:	4b50      	ldr	r3, [pc, #320]	@ (80007ac <main+0x1c0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	2b64      	cmp	r3, #100	@ 0x64
 8000670:	d917      	bls.n	80006a2 <main+0xb6>
		  txResult = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, dummyData);
 8000672:	4a4f      	ldr	r2, [pc, #316]	@ (80007b0 <main+0x1c4>)
 8000674:	4949      	ldr	r1, [pc, #292]	@ (800079c <main+0x1b0>)
 8000676:	484a      	ldr	r0, [pc, #296]	@ (80007a0 <main+0x1b4>)
 8000678:	f000 ffe4 	bl	8001644 <HAL_FDCAN_AddMessageToTxFifoQ>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b4c      	ldr	r3, [pc, #304]	@ (80007b4 <main+0x1c8>)
 8000682:	701a      	strb	r2, [r3, #0]
	      if (txResult == HAL_OK) {
 8000684:	4b4b      	ldr	r3, [pc, #300]	@ (80007b4 <main+0x1c8>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d005      	beq.n	8000698 <main+0xac>
	          //printf("TX success\r\n");
	      }
	      else{
	    	  printf("TX failed with code %d\r\n", txResult);
 800068c:	4b49      	ldr	r3, [pc, #292]	@ (80007b4 <main+0x1c8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4849      	ldr	r0, [pc, #292]	@ (80007b8 <main+0x1cc>)
 8000694:	f004 f9a8 	bl	80049e8 <iprintf>
	      }
	      lastSend = HAL_GetTick();
 8000698:	f000 fd14 	bl	80010c4 <HAL_GetTick>
 800069c:	4603      	mov	r3, r0
 800069e:	4a43      	ldr	r2, [pc, #268]	@ (80007ac <main+0x1c0>)
 80006a0:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_RESET);
	  HAL_Delay(500);
	  */
	  uint32_t currentTick = HAL_GetTick();
 80006a2:	f000 fd0f 	bl	80010c4 <HAL_GetTick>
 80006a6:	60f8      	str	r0, [r7, #12]
	  uint32_t psr = hfdcan1.Instance->PSR;
 80006a8:	4b3d      	ldr	r3, [pc, #244]	@ (80007a0 <main+0x1b4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ae:	60bb      	str	r3, [r7, #8]
	  uint8_t lec = psr & 0x7;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	71fb      	strb	r3, [r7, #7]
	  //printf("LEC: 0x%02X\r\n", lec);
	  if ((currentTick - lastCANMessageTick) > CAN_TIMEOUT_MS){
 80006ba:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <main+0x1b8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d909      	bls.n	80006de <main+0xf2>
	          //printf("CAN timeout occurred!\n");
	          HAL_GPIO_WritePin(GPIOA,PIN3_Pin,GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f001 fde4 	bl	80022a0 <HAL_GPIO_WritePin>
	          sendSPIMessage(FAULT_CAN_TIMEOUT);
 80006d8:	20a4      	movs	r0, #164	@ 0xa4
 80006da:	f000 f9d1 	bl	8000a80 <sendSPIMessage>
	          // Optional: Reset system
	          ///NVIC_SystemReset();
	  }
	  if ((hfdcan1.Instance->PSR & FDCAN_PSR_BO) != 0){
 80006de:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <main+0x1b4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00c      	beq.n	8000706 <main+0x11a>
	  	    // Bus Off = severe fault (e.g., shorted lines)
	  	    HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET); // Indicate fault
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f001 fdd3 	bl	80022a0 <HAL_GPIO_WritePin>
	  	    sendSPIMessage(FAULT_BUS_OFF);
 80006fa:	20a5      	movs	r0, #165	@ 0xa5
 80006fc:	f000 f9c0 	bl	8000a80 <sendSPIMessage>
	  	    printf("short!!!");
 8000700:	482e      	ldr	r0, [pc, #184]	@ (80007bc <main+0x1d0>)
 8000702:	f004 f971 	bl	80049e8 <iprintf>
	  }
	  if ((currentTick - lastRateCheckTick) > RATE_CHECK_WINDOW_MS) {
 8000706:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <main+0x1d4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000712:	4293      	cmp	r3, r2
 8000714:	d918      	bls.n	8000748 <main+0x15c>
	      if (canMessageCount > MAX_EXPECTED_MSGS) {
 8000716:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <main+0x1d8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800071e:	4293      	cmp	r3, r2
 8000720:	d90c      	bls.n	800073c <main+0x150>
	          printf("Blabbering idiot fault detected!\n");
 8000722:	4829      	ldr	r0, [pc, #164]	@ (80007c8 <main+0x1dc>)
 8000724:	f004 f9c8 	bl	8004ab8 <puts>
	          HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000732:	f001 fdb5 	bl	80022a0 <HAL_GPIO_WritePin>
	          sendSPIMessage(FAULT_ACK_ERROR);
 8000736:	20a1      	movs	r0, #161	@ 0xa1
 8000738:	f000 f9a2 	bl	8000a80 <sendSPIMessage>
	      }
	      canMessageCount = 0;
 800073c:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <main+0x1d8>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
	      lastRateCheckTick = currentTick;
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <main+0x1d4>)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	6013      	str	r3, [r2, #0]
	  }
	  switch(lec){
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d014      	beq.n	8000778 <main+0x18c>
 800074e:	2b03      	cmp	r3, #3
 8000750:	dc20      	bgt.n	8000794 <main+0x1a8>
 8000752:	2b01      	cmp	r3, #1
 8000754:	d002      	beq.n	800075c <main+0x170>
 8000756:	2b02      	cmp	r3, #2
 8000758:	d007      	beq.n	800076a <main+0x17e>
 800075a:	e01b      	b.n	8000794 <main+0x1a8>
	  	  case 0x1:
	  		  printf("Stuff error\n");
 800075c:	481b      	ldr	r0, [pc, #108]	@ (80007cc <main+0x1e0>)
 800075e:	f004 f9ab 	bl	8004ab8 <puts>
	  		  //HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
	  		  sendSPIMessage(FAULT_STUFF_ERROR);
 8000762:	20a2      	movs	r0, #162	@ 0xa2
 8000764:	f000 f98c 	bl	8000a80 <sendSPIMessage>
	  		  break;
 8000768:	e014      	b.n	8000794 <main+0x1a8>
	  	  case 0x2:
	  		  printf("Form error\n");
 800076a:	4819      	ldr	r0, [pc, #100]	@ (80007d0 <main+0x1e4>)
 800076c:	f004 f9a4 	bl	8004ab8 <puts>
	  		 // HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
	  		  sendSPIMessage(FAULT_FORM_ERROR);
 8000770:	20a3      	movs	r0, #163	@ 0xa3
 8000772:	f000 f985 	bl	8000a80 <sendSPIMessage>
	  		  break;
 8000776:	e00d      	b.n	8000794 <main+0x1a8>
	  	  case 0x3:
	  		  printf("ACK error (likely no other node)\n");
 8000778:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <main+0x1e8>)
 800077a:	f004 f99d 	bl	8004ab8 <puts>
	  		  HAL_GPIO_WritePin(GPIOA, PIN8_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000788:	f001 fd8a 	bl	80022a0 <HAL_GPIO_WritePin>
	  		  sendSPIMessage(FAULT_ACK_ERROR);
 800078c:	20a1      	movs	r0, #161	@ 0xa1
 800078e:	f000 f977 	bl	8000a80 <sendSPIMessage>
	  		  break;
 8000792:	bf00      	nop
	  }
	  HAL_Delay(5);
 8000794:	2005      	movs	r0, #5
 8000796:	f000 fca1 	bl	80010dc <HAL_Delay>
  {
 800079a:	e762      	b.n	8000662 <main+0x76>
 800079c:	20000204 	.word	0x20000204
 80007a0:	20000084 	.word	0x20000084
 80007a4:	200001f4 	.word	0x200001f4
 80007a8:	08005794 	.word	0x08005794
 80007ac:	20000200 	.word	0x20000200
 80007b0:	20000228 	.word	0x20000228
 80007b4:	20000229 	.word	0x20000229
 80007b8:	080057b8 	.word	0x080057b8
 80007bc:	080057d4 	.word	0x080057d4
 80007c0:	200001fc 	.word	0x200001fc
 80007c4:	200001f8 	.word	0x200001f8
 80007c8:	080057e0 	.word	0x080057e0
 80007cc:	08005804 	.word	0x08005804
 80007d0:	08005810 	.word	0x08005810
 80007d4:	0800581c 	.word	0x0800581c

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	@ 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	2238      	movs	r2, #56	@ 0x38
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f004 fa46 	bl	8004c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007fe:	f001 fd67 	bl	80022d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080c:	2340      	movs	r3, #64	@ 0x40
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000818:	2301      	movs	r3, #1
 800081a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800081c:	230a      	movs	r3, #10
 800081e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000824:	2304      	movs	r3, #4
 8000826:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	f107 0318 	add.w	r3, r7, #24
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fe01 	bl	8002438 <HAL_RCC_OscConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800083c:	f000 f982 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000840:	230f      	movs	r3, #15
 8000842:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000844:	2301      	movs	r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f002 f8ff 	bl	8002a5c <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000864:	f000 f96e 	bl	8000b44 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	@ 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 8000876:	4a20      	ldr	r2, [pc, #128]	@ (80008f8 <MX_FDCAN1_Init+0x88>)
 8000878:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000886:	4b1b      	ldr	r3, [pc, #108]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 800088e:	2200      	movs	r2, #0
 8000890:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 8000894:	2200      	movs	r2, #0
 8000896:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 800089a:	2200      	movs	r2, #0
 800089c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008a0:	220a      	movs	r2, #10
 80008a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80008aa:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008ac:	220d      	movs	r2, #13
 80008ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80008b0:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008be:	2201      	movs	r2, #1
 80008c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008dc:	2200      	movs	r2, #0
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e0:	4804      	ldr	r0, [pc, #16]	@ (80008f4 <MX_FDCAN1_Init+0x84>)
 80008e2:	f000 fd2d 	bl	8001340 <HAL_FDCAN_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008ec:	f000 f92a 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000084 	.word	0x20000084
 80008f8:	40006400 	.word	0x40006400

080008fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000902:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <MX_SPI1_Init+0x78>)
 8000904:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000906:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000908:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800090c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800090e:	4b18      	ldr	r3, [pc, #96]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000914:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000916:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800091a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_SPI1_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_SPI1_Init+0x74>)
 800092a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800092e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_SPI1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_SPI1_Init+0x74>)
 800094a:	2207      	movs	r2, #7
 800094c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_SPI1_Init+0x74>)
 8000956:	2208      	movs	r2, #8
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_SPI1_Init+0x74>)
 800095c:	f002 fcd6 	bl	800330c <HAL_SPI_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000966:	f000 f8ed 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000e8 	.word	0x200000e8
 8000974:	40013000 	.word	0x40013000

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
printf("Hello from STM32!\r\n");
 800097c:	4824      	ldr	r0, [pc, #144]	@ (8000a10 <MX_USART2_UART_Init+0x98>)
 800097e:	f004 f89b 	bl	8004ab8 <puts>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000982:	4b24      	ldr	r3, [pc, #144]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 8000984:	4a24      	ldr	r2, [pc, #144]	@ (8000a18 <MX_USART2_UART_Init+0xa0>)
 8000986:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 800098a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000990:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009a4:	220c      	movs	r2, #12
 80009a6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009c8:	f003 f826 	bl	8003a18 <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80009d2:	f000 f8b7 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009da:	f003 fe4f 	bl	800467c <HAL_UARTEx_SetTxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 80009e4:	f000 f8ae 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009ec:	f003 fe84 	bl	80046f8 <HAL_UARTEx_SetRxFifoThreshold>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80009f6:	f000 f8a5 	bl	8000b44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_USART2_UART_Init+0x9c>)
 80009fc:	f003 fe05 	bl	800460a <HAL_UARTEx_DisableFifoMode>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 8000a06:	f000 f89d 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08005840 	.word	0x08005840
 8000a14:	2000014c 	.word	0x2000014c
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_GPIO_Init+0x60>)
 8000a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a34:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <MX_GPIO_Init+0x60>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_GPIO_Init+0x60>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN7_Pin|PIN8_Pin|PIN3_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a52:	f001 fc25 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN7_Pin PIN8_Pin PIN3_Pin */
  GPIO_InitStruct.Pin = PIN7_Pin|PIN8_Pin|PIN3_Pin;
 8000a56:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a64:	2301      	movs	r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a70:	f001 fa94 	bl	8001f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000

08000a80 <sendSPIMessage>:

/* USER CODE BEGIN 4 */
void sendSPIMessage(uint8_t code) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &code, 1, HAL_MAX_DELAY);
 8000a8a:	1df9      	adds	r1, r7, #7
 8000a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a90:	2201      	movs	r2, #1
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <sendSPIMessage+0x20>)
 8000a94:	f002 fce5 	bl	8003462 <HAL_SPI_Transmit>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000e8 	.word	0x200000e8

08000aa4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d023      	beq.n	8000b00 <HAL_FDCAN_RxFifo0Callback+0x5c>
	        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000abc:	2140      	movs	r1, #64	@ 0x40
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fe04 	bl	80016cc <HAL_FDCAN_GetRxMessage>
	        lastCANMessageTick = HAL_GetTick();  // optional
 8000ac4:	f000 fafe 	bl	80010c4 <HAL_GetTick>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a11      	ldr	r2, [pc, #68]	@ (8000b10 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000acc:	6013      	str	r3, [r2, #0]

	        printf("CAN RX: ID=0x%03lX, DLC=%lu, Data=", RxHeader.Identifier, (RxHeader.DataLength >> 16));
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	0c1b      	lsrs	r3, r3, #16
 8000ad8:	461a      	mov	r2, r3
 8000ada:	480e      	ldr	r0, [pc, #56]	@ (8000b14 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000adc:	f003 ff84 	bl	80049e8 <iprintf>
	        for (int i = 0; i < (RxHeader.DataLength >> 16); i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	bf00      	nop
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	0c1a      	lsrs	r2, r3, #16
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	429a      	cmp	r2, r3
	            //printf("%02X ", RxData[i]);
	        	break;
	        }
	        printf("\r\n");
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <HAL_FDCAN_RxFifo0Callback+0x74>)
 8000af2:	f003 ffe1 	bl	8004ab8 <puts>

	        canMessageCount++; // optional
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_FDCAN_RxFifo0Callback+0x78>)
 8000afe:	6013      	str	r3, [r2, #0]
	    }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000254 	.word	0x20000254
 8000b0c:	2000022c 	.word	0x2000022c
 8000b10:	200001f4 	.word	0x200001f4
 8000b14:	08005854 	.word	0x08005854
 8000b18:	08005878 	.word	0x08005878
 8000b1c:	200001f8 	.word	0x200001f8

08000b20 <__io_putchar>:

int __io_putchar(int ch) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b28:	1d39      	adds	r1, r7, #4
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <__io_putchar+0x20>)
 8000b32:	f002 ffc1 	bl	8003ab8 <HAL_UART_Transmit>
    return ch;
 8000b36:	687b      	ldr	r3, [r7, #4]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	2000014c 	.word	0x2000014c

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <HAL_MspInit+0x44>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b72:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b86:	f001 fc47 	bl	8002418 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09e      	sub	sp, #120	@ 0x78
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2250      	movs	r2, #80	@ 0x50
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 f85d 	bl	8004c78 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <HAL_FDCAN_MspInit+0xe0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d153      	bne.n	8000c70 <HAL_FDCAN_MspInit+0xd8>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bcc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000bce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 f95b 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000be4:	f7ff ffae 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <HAL_FDCAN_MspInit+0xe4>)
 8000bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bec:	4a23      	ldr	r2, [pc, #140]	@ (8000c7c <HAL_FDCAN_MspInit+0xe4>)
 8000bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <HAL_FDCAN_MspInit+0xe4>)
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <HAL_FDCAN_MspInit+0xe4>)
 8000c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c04:	4a1d      	ldr	r2, [pc, #116]	@ (8000c7c <HAL_FDCAN_MspInit+0xe4>)
 8000c06:	f043 0301 	orr.w	r3, r3, #1
 8000c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <HAL_FDCAN_MspInit+0xe4>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c1c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c22:	2302      	movs	r3, #2
 8000c24:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c2a:	2309      	movs	r3, #9
 8000c2c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c38:	f001 f9b0 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c40:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c4e:	2309      	movs	r3, #9
 8000c50:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5c:	f001 f99e 	bl	8001f9c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2015      	movs	r0, #21
 8000c66:	f000 fb36 	bl	80012d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c6a:	2015      	movs	r0, #21
 8000c6c:	f000 fb4d 	bl	800130a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000c70:	bf00      	nop
 8000c72:	3778      	adds	r7, #120	@ 0x78
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40006400 	.word	0x40006400
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	@ (8000cfc <HAL_SPI_MspInit+0x7c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d128      	bne.n	8000cf4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca2:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_SPI_MspInit+0x80>)
 8000ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca6:	4a16      	ldr	r2, [pc, #88]	@ (8000d00 <HAL_SPI_MspInit+0x80>)
 8000ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_SPI_MspInit+0x80>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000cd2:	23a0      	movs	r3, #160	@ 0xa0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf0:	f001 f954 	bl	8001f9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	@ 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b09e      	sub	sp, #120	@ 0x78
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2250      	movs	r2, #80	@ 0x50
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 ffa7 	bl	8004c78 <memset>
  if(huart->Instance==USART2)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dac <HAL_UART_MspInit+0xa8>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d136      	bne.n	8000da2 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 f8a7 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d4c:	f7ff fefa 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <HAL_UART_MspInit+0xac>)
 8000d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d54:	4a16      	ldr	r2, [pc, #88]	@ (8000db0 <HAL_UART_MspInit+0xac>)
 8000d56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <HAL_UART_MspInit+0xac>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <HAL_UART_MspInit+0xac>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	4a10      	ldr	r2, [pc, #64]	@ (8000db0 <HAL_UART_MspInit+0xac>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_UART_MspInit+0xac>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d80:	230c      	movs	r3, #12
 8000d82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d90:	2307      	movs	r3, #7
 8000d92:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9e:	f001 f8fd 	bl	8001f9c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000da2:	bf00      	nop
 8000da4:	3778      	adds	r7, #120	@ 0x78
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40021000 	.word	0x40021000

08000db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <NMI_Handler+0x4>

08000dbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e0a:	f000 f949 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8000e18:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <WWDG_IRQHandler+0x10>)
 8000e1a:	f003 fcf9 	bl	8004810 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001e0 	.word	0x200001e0

08000e28 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e2e:	f000 fe3b 	bl	8001aa8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000084 	.word	0x20000084

08000e3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e00a      	b.n	8000e64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e4e:	f3af 8000 	nop.w
 8000e52:	4601      	mov	r1, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1c5a      	adds	r2, r3, #1
 8000e58:	60ba      	str	r2, [r7, #8]
 8000e5a:	b2ca      	uxtb	r2, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf0      	blt.n	8000e4e <_read+0x12>
  }

  return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	e009      	b.n	8000e9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	60ba      	str	r2, [r7, #8]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe45 	bl	8000b20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf1      	blt.n	8000e88 <_write+0x12>
  }
  return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_close>:

int _close(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_isatty>:

int _isatty(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f20:	4a14      	ldr	r2, [pc, #80]	@ (8000f74 <_sbrk+0x5c>)
 8000f22:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <_sbrk+0x60>)
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <_sbrk+0x64>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d102      	bne.n	8000f3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f34:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <_sbrk+0x64>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <_sbrk+0x68>)
 8000f38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d207      	bcs.n	8000f58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f48:	f003 fee4 	bl	8004d14 <__errno>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	220c      	movs	r2, #12
 8000f50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e009      	b.n	8000f6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <_sbrk+0x64>)
 8000f68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2001c000 	.word	0x2001c000
 8000f78:	00000400 	.word	0x00000400
 8000f7c:	2000025c 	.word	0x2000025c
 8000f80:	200003b0 	.word	0x200003b0

08000f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <SystemInit+0x20>)
 8000f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8e:	4a05      	ldr	r2, [pc, #20]	@ (8000fa4 <SystemInit+0x20>)
 8000f90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fac:	f7ff ffea 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	@ (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd6:	f003 fea3 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fda:	f7ff fb07 	bl	80005ec <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fec:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8000ff0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ff4:	200003b0 	.word	0x200003b0

08000ff8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_2_IRQHandler>

08000ffa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f95b 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f80e 	bl	800102c <HAL_InitTick>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	e001      	b.n	8001020 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800101c:	f7ff fd98 	bl	8000b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001020:	79fb      	ldrb	r3, [r7, #7]

}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_InitTick+0x68>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d022      	beq.n	8001086 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001040:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_InitTick+0x6c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <HAL_InitTick+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800104c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f966 	bl	8001326 <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	f000 f932 	bl	80012d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000008 	.word	0x20000008
 8001098:	20000000 	.word	0x20000000
 800109c:	20000004 	.word	0x20000004

080010a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x1c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <HAL_IncTick+0x20>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a03      	ldr	r2, [pc, #12]	@ (80010bc <HAL_IncTick+0x1c>)
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000260 	.word	0x20000260
 80010c0:	20000008 	.word	0x20000008

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000260 	.word	0x20000260

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d004      	beq.n	8001100 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_Delay+0x40>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001100:	bf00      	nop
 8001102:	f7ff ffdf 	bl	80010c4 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	429a      	cmp	r2, r3
 8001110:	d8f7      	bhi.n	8001102 <HAL_Delay+0x26>
  {
  }
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000008 	.word	0x20000008

08001120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800113c:	4013      	ands	r3, r2
 800113e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001148:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800114c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001150:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001152:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <__NVIC_SetPriorityGrouping+0x44>)
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	60d3      	str	r3, [r2, #12]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <__NVIC_GetPriorityGrouping+0x18>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	0a1b      	lsrs	r3, r3, #8
 8001172:	f003 0307 	and.w	r3, r3, #7
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	2b00      	cmp	r3, #0
 8001194:	db0b      	blt.n	80011ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 021f 	and.w	r2, r3, #31
 800119c:	4907      	ldr	r1, [pc, #28]	@ (80011bc <__NVIC_EnableIRQ+0x38>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	2001      	movs	r0, #1
 80011a6:	fa00 f202 	lsl.w	r2, r0, r2
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	@ (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	@ 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff29 	bl	8001120 <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff40 	bl	8001168 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff90 	bl	8001214 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5f 	bl	80011c0 <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff33 	bl	8001184 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa4 	bl	800127c <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e147      	b.n	80015e2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fc16 	bl	8000b98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0210 	bic.w	r2, r2, #16
 800137a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800137c:	f7ff fea2 	bl	80010c4 <HAL_GetTick>
 8001380:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001382:	e012      	b.n	80013aa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001384:	f7ff fe9e 	bl	80010c4 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d90b      	bls.n	80013aa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e11b      	b.n	80015e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d0e5      	beq.n	8001384 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699a      	ldr	r2, [r3, #24]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fe7c 	bl	80010c4 <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013ce:	e012      	b.n	80013f6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80013d0:	f7ff fe78 	bl	80010c4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b0a      	cmp	r3, #10
 80013dc:	d90b      	bls.n	80013f6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e2:	f043 0201 	orr.w	r2, r3, #1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0f5      	b.n	80015e2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0e5      	beq.n	80013d0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	699a      	ldr	r2, [r3, #24]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0202 	orr.w	r2, r2, #2
 8001412:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a74      	ldr	r2, [pc, #464]	@ (80015ec <HAL_FDCAN_Init+0x2ac>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d103      	bne.n	8001426 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800141e:	4a74      	ldr	r2, [pc, #464]	@ (80015f0 <HAL_FDCAN_Init+0x2b0>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7c1b      	ldrb	r3, [r3, #16]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d108      	bne.n	8001440 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800143c:	619a      	str	r2, [r3, #24]
 800143e:	e007      	b.n	8001450 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800144e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7c5b      	ldrb	r3, [r3, #17]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	e007      	b.n	800147a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699a      	ldr	r2, [r3, #24]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001478:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7c9b      	ldrb	r3, [r3, #18]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e007      	b.n	80014a4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699a      	ldr	r2, [r3, #24]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80014a2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80014c8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0210 	bic.w	r2, r2, #16
 80014d8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	699a      	ldr	r2, [r3, #24]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 0204 	orr.w	r2, r2, #4
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	e02c      	b.n	800154e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d028      	beq.n	800154e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d01c      	beq.n	800153e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699a      	ldr	r2, [r3, #24]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001512:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0210 	orr.w	r2, r2, #16
 8001522:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d110      	bne.n	800154e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699a      	ldr	r2, [r3, #24]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0220 	orr.w	r2, r2, #32
 800153a:	619a      	str	r2, [r3, #24]
 800153c:	e007      	b.n	800154e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699a      	ldr	r2, [r3, #24]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0220 	orr.w	r2, r2, #32
 800154c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	3b01      	subs	r3, #1
 8001554:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	3b01      	subs	r3, #1
 800155c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800155e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001566:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	3b01      	subs	r3, #1
 8001570:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001576:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001578:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001582:	d115      	bne.n	80015b0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158e:	3b01      	subs	r3, #1
 8001590:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001592:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	3b01      	subs	r3, #1
 800159a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800159c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a4:	3b01      	subs	r3, #1
 80015a6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80015ac:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80015ae:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fc0a 	bl	8001de0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40006400 	.word	0x40006400
 80015f0:	40006500 	.word	0x40006500

080015f4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b01      	cmp	r3, #1
 8001606:	d110      	bne.n	800162a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	e006      	b.n	8001638 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d12c      	bne.n	80016b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001670:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e023      	b.n	80016c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001684:	0c1b      	lsrs	r3, r3, #16
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fc06 	bl	8001ea4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80016a8:	2201      	movs	r2, #1
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	409a      	lsls	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e006      	b.n	80016c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ba:	f043 0208 	orr.w	r2, r3, #8
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b08b      	sub	sp, #44	@ 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016e4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80016e6:	7efb      	ldrb	r3, [r7, #27]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	f040 80e8 	bne.w	80018be <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b40      	cmp	r3, #64	@ 0x40
 80016f2:	d137      	bne.n	8001764 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001708:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0db      	b.n	80018cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001724:	d10a      	bne.n	800173c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800172e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001736:	d101      	bne.n	800173c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	4613      	mov	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
 8001762:	e036      	b.n	80017d2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	2b00      	cmp	r3, #0
 8001772:	d107      	bne.n	8001784 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001778:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0a3      	b.n	80018cc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800178c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001794:	d10a      	bne.n	80017ac <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800179e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017a6:	d101      	bne.n	80017ac <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	0c9b      	lsrs	r3, r3, #18
 80017ec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e005      	b.n	8001802 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	3304      	adds	r3, #4
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	f003 020f 	and.w	r2, r3, #15
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	0e1b      	lsrs	r3, r3, #24
 8001856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0fda      	lsrs	r2, r3, #31
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	3304      	adds	r3, #4
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800186e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001870:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
 8001876:	e00a      	b.n	800188e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	441a      	add	r2, r3
 800187e:	6839      	ldr	r1, [r7, #0]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	440b      	add	r3, r1
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	3301      	adds	r3, #1
 800188c:	623b      	str	r3, [r7, #32]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	4a11      	ldr	r2, [pc, #68]	@ (80018d8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001894:	5cd3      	ldrb	r3, [r2, r3]
 8001896:	461a      	mov	r2, r3
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	4293      	cmp	r3, r2
 800189c:	d3ec      	bcc.n	8001878 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b40      	cmp	r3, #64	@ 0x40
 80018a2:	d105      	bne.n	80018b0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80018ae:	e004      	b.n	80018ba <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e006      	b.n	80018cc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c2:	f043 0208 	orr.w	r2, r3, #8
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	372c      	adds	r7, #44	@ 0x2c
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	08005894 	.word	0x08005894

080018dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80018ee:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d003      	beq.n	80018fe <HAL_FDCAN_ActivateNotification+0x22>
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	f040 80c8 	bne.w	8001a8e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d03b      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d031      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d027      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01d      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f003 0310 	and.w	r3, r3, #16
 8001966:	2b00      	cmp	r3, #0
 8001968:	d013      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	2b00      	cmp	r3, #0
 800197c:	d009      	beq.n	8001992 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00c      	beq.n	80019a2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d13b      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d131      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d004      	beq.n	80019de <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d127      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d11d      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d004      	beq.n	8001a06 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d113      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00c      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d007      	beq.n	8001a3e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0202 	orr.w	r2, r2, #2
 8001a3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d009      	beq.n	8001a7a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e006      	b.n	8001a9c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a92:	f043 0202 	orr.w	r2, r3, #2
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ab6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001adc:	4013      	ands	r3, r2
 8001ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001af4:	4013      	ands	r3, r2
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001afe:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001b02:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	6a3a      	ldr	r2, [r7, #32]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b16:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b1a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b36:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00c      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	099b      	lsrs	r3, r3, #6
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2240      	movs	r2, #64	@ 0x40
 8001b56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f922 	bl	8001da2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01a      	beq.n	8001ba0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d014      	beq.n	8001ba0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b7e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001b98:	6939      	ldr	r1, [r7, #16]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8e2 	bl	8001d64 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bac:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f8ac 	bl	8001d0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bc2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7fe ff6c 	bl	8000aa4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001bda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8a1 	bl	8001d24 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	0a5b      	lsrs	r3, r3, #9
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00d      	beq.n	8001c0a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	0a5b      	lsrs	r3, r3, #9
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c02:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f898 	bl	8001d3a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	09db      	lsrs	r3, r3, #7
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d019      	beq.n	8001c4a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	09db      	lsrs	r3, r3, #7
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d013      	beq.n	8001c4a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c2a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2280      	movs	r2, #128	@ 0x80
 8001c40:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f882 	bl	8001d4e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	0b5b      	lsrs	r3, r3, #13
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00d      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	0b5b      	lsrs	r3, r3, #13
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d007      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c6a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f884 	bl	8001d7a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	0bdb      	lsrs	r3, r3, #15
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00d      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	0bdb      	lsrs	r3, r3, #15
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f87a 	bl	8001d8e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	0b9b      	lsrs	r3, r3, #14
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	0b9b      	lsrs	r3, r3, #14
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00a      	beq.n	8001cc8 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001cd6:	69f9      	ldr	r1, [r7, #28]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f876 	bl	8001dca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a3a      	ldr	r2, [r7, #32]
 8001cea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f858 	bl	8001db6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3730      	adds	r7, #48	@ 0x30
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001dea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d103      	bne.n	8001dfe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001dfc:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e0c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e14:	041a      	lsls	r2, r3, #16
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e32:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3a:	061a      	lsls	r2, r3, #24
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e005      	b.n	8001e80 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d3f3      	bcc.n	8001e74 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	4000a400 	.word	0x4000a400
 8001ea0:	40006800 	.word	0x40006800

08001ea4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	@ 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001ec2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e00a      	b.n	8001ee6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001ed8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001ede:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ee0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ee4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001ef0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001ef6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001efc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3304      	adds	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e020      	b.n	8001f7a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	3302      	adds	r3, #2
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	440b      	add	r3, r1
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f50:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	3301      	adds	r3, #1
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	440b      	add	r3, r1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001f5e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	440a      	add	r2, r1
 8001f66:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001f68:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	3304      	adds	r3, #4
 8001f72:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3304      	adds	r3, #4
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4a06      	ldr	r2, [pc, #24]	@ (8001f98 <FDCAN_CopyMessageToRAM+0xf4>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	461a      	mov	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d3d6      	bcc.n	8001f38 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	3724      	adds	r7, #36	@ 0x24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	08005894 	.word	0x08005894

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001faa:	e15a      	b.n	8002262 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 814c 	beq.w	800225c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d005      	beq.n	8001fdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d130      	bne.n	800203e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002012:	2201      	movs	r2, #1
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	f003 0201 	and.w	r2, r3, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b03      	cmp	r3, #3
 8002048:	d017      	beq.n	800207a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d123      	bne.n	80020ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	6939      	ldr	r1, [r7, #16]
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	4b5b      	ldr	r3, [pc, #364]	@ (8002280 <HAL_GPIO_Init+0x2e4>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002114:	4a5a      	ldr	r2, [pc, #360]	@ (8002280 <HAL_GPIO_Init+0x2e4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6613      	str	r3, [r2, #96]	@ 0x60
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_GPIO_Init+0x2e4>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002128:	4a56      	ldr	r2, [pc, #344]	@ (8002284 <HAL_GPIO_Init+0x2e8>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002152:	d01f      	beq.n	8002194 <HAL_GPIO_Init+0x1f8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a4c      	ldr	r2, [pc, #304]	@ (8002288 <HAL_GPIO_Init+0x2ec>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d019      	beq.n	8002190 <HAL_GPIO_Init+0x1f4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a4b      	ldr	r2, [pc, #300]	@ (800228c <HAL_GPIO_Init+0x2f0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_GPIO_Init+0x1f0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a4a      	ldr	r2, [pc, #296]	@ (8002290 <HAL_GPIO_Init+0x2f4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00d      	beq.n	8002188 <HAL_GPIO_Init+0x1ec>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a49      	ldr	r2, [pc, #292]	@ (8002294 <HAL_GPIO_Init+0x2f8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0x1e8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a48      	ldr	r2, [pc, #288]	@ (8002298 <HAL_GPIO_Init+0x2fc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_GPIO_Init+0x1e4>
 800217c:	2305      	movs	r3, #5
 800217e:	e00a      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002180:	2306      	movs	r3, #6
 8002182:	e008      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002184:	2304      	movs	r3, #4
 8002186:	e006      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002188:	2303      	movs	r3, #3
 800218a:	e004      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 800218c:	2302      	movs	r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002194:	2300      	movs	r3, #0
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4093      	lsls	r3, r2
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a6:	4937      	ldr	r1, [pc, #220]	@ (8002284 <HAL_GPIO_Init+0x2e8>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b4:	4b39      	ldr	r3, [pc, #228]	@ (800229c <HAL_GPIO_Init+0x300>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021d8:	4a30      	ldr	r2, [pc, #192]	@ (800229c <HAL_GPIO_Init+0x300>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021de:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_GPIO_Init+0x300>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002202:	4a26      	ldr	r2, [pc, #152]	@ (800229c <HAL_GPIO_Init+0x300>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002208:	4b24      	ldr	r3, [pc, #144]	@ (800229c <HAL_GPIO_Init+0x300>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800222c:	4a1b      	ldr	r2, [pc, #108]	@ (800229c <HAL_GPIO_Init+0x300>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002232:	4b1a      	ldr	r3, [pc, #104]	@ (800229c <HAL_GPIO_Init+0x300>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002256:	4a11      	ldr	r2, [pc, #68]	@ (800229c <HAL_GPIO_Init+0x300>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f ae9d 	bne.w	8001fac <HAL_GPIO_Init+0x10>
  }
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	48000400 	.word	0x48000400
 800228c:	48000800 	.word	0x48000800
 8002290:	48000c00 	.word	0x48000c00
 8002294:	48001000 	.word	0x48001000
 8002298:	48001400 	.word	0x48001400
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d141      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022de:	4b4b      	ldr	r3, [pc, #300]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ea:	d131      	bne.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022ec:	4b47      	ldr	r3, [pc, #284]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022f2:	4a46      	ldr	r2, [pc, #280]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fc:	4b43      	ldr	r3, [pc, #268]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002304:	4a41      	ldr	r2, [pc, #260]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800230a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800230c:	4b40      	ldr	r3, [pc, #256]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2232      	movs	r2, #50	@ 0x32
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	4a3f      	ldr	r2, [pc, #252]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	0c9b      	lsrs	r3, r3, #18
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002322:	e002      	b.n	800232a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3b01      	subs	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232a:	4b38      	ldr	r3, [pc, #224]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002336:	d102      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f2      	bne.n	8002324 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800233e:	4b33      	ldr	r3, [pc, #204]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234a:	d158      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e057      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002350:	4b2e      	ldr	r3, [pc, #184]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002356:	4a2d      	ldr	r2, [pc, #180]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800235c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002360:	e04d      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002368:	d141      	bne.n	80023ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800236a:	4b28      	ldr	r3, [pc, #160]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002376:	d131      	bne.n	80023dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800237e:	4a23      	ldr	r2, [pc, #140]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002384:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002388:	4b20      	ldr	r3, [pc, #128]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002390:	4a1e      	ldr	r2, [pc, #120]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002398:	4b1d      	ldr	r3, [pc, #116]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2232      	movs	r2, #50	@ 0x32
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ae:	e002      	b.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023c2:	d102      	bne.n	80023ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f2      	bne.n	80023b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ca:	4b10      	ldr	r3, [pc, #64]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d6:	d112      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e011      	b.n	8002400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023e2:	4a0a      	ldr	r2, [pc, #40]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023ec:	e007      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023f6:	4a05      	ldr	r2, [pc, #20]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	40007000 	.word	0x40007000
 8002410:	20000000 	.word	0x20000000
 8002414:	431bde83 	.word	0x431bde83

08002418 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800241c:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002426:	6093      	str	r3, [r2, #8]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40007000 	.word	0x40007000

08002438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e2fe      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b97      	ldr	r3, [pc, #604]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002460:	4b94      	ldr	r3, [pc, #592]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d102      	bne.n	8002476 <HAL_RCC_OscConfig+0x3e>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d002      	beq.n	800247c <HAL_RCC_OscConfig+0x44>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b8d      	ldr	r3, [pc, #564]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05b      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d157      	bne.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e2d9      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x74>
 800249e:	4b85      	ldr	r3, [pc, #532]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a84      	ldr	r2, [pc, #528]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x98>
 80024b6:	4b7f      	ldr	r3, [pc, #508]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7e      	ldr	r2, [pc, #504]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b7c      	ldr	r3, [pc, #496]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7b      	ldr	r2, [pc, #492]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024d0:	4b78      	ldr	r3, [pc, #480]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a77      	ldr	r2, [pc, #476]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b75      	ldr	r3, [pc, #468]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a74      	ldr	r2, [pc, #464]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe fde8 	bl	80010c4 <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fde4 	bl	80010c4 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	@ 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e29e      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250a:	4b6a      	ldr	r3, [pc, #424]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fdd4 	bl	80010c4 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fdd0 	bl	80010c4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	@ 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e28a      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002532:	4b60      	ldr	r3, [pc, #384]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d075      	beq.n	800263a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254e:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002558:	4b56      	ldr	r3, [pc, #344]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d102      	bne.n	800256e <HAL_RCC_OscConfig+0x136>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d002      	beq.n	8002574 <HAL_RCC_OscConfig+0x13c>
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11f      	bne.n	80025b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002574:	4b4f      	ldr	r3, [pc, #316]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_OscConfig+0x154>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e25d      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b49      	ldr	r3, [pc, #292]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	4946      	ldr	r1, [pc, #280]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025a0:	4b45      	ldr	r3, [pc, #276]	@ (80026b8 <HAL_RCC_OscConfig+0x280>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fd41 	bl	800102c <HAL_InitTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d043      	beq.n	8002638 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e249      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025bc:	4b3d      	ldr	r3, [pc, #244]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a3c      	ldr	r2, [pc, #240]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fd7c 	bl	80010c4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d0:	f7fe fd78 	bl	80010c4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e232      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e2:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ee:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	492d      	ldr	r1, [pc, #180]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
 8002602:	e01a      	b.n	800263a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2a      	ldr	r2, [pc, #168]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800260a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800260e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fd58 	bl	80010c4 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002618:	f7fe fd54 	bl	80010c4 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e20e      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262a:	4b22      	ldr	r3, [pc, #136]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x1e0>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d041      	beq.n	80026ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d01c      	beq.n	8002688 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002650:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7fe fd31 	bl	80010c4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fd2d 	bl	80010c4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1e7      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800267a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ef      	beq.n	8002666 <HAL_RCC_OscConfig+0x22e>
 8002686:	e020      	b.n	80026ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800268a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800268e:	4a09      	ldr	r2, [pc, #36]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fd14 	bl	80010c4 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800269e:	e00d      	b.n	80026bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe fd10 	bl	80010c4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d906      	bls.n	80026bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1ca      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026bc:	4b8c      	ldr	r3, [pc, #560]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1ea      	bne.n	80026a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80a6 	beq.w	8002824 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026dc:	4b84      	ldr	r3, [pc, #528]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_OscConfig+0x2b4>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x2b6>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00d      	beq.n	800270e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	4b7f      	ldr	r3, [pc, #508]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	4a7e      	ldr	r2, [pc, #504]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fe:	4b7c      	ldr	r3, [pc, #496]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800270a:	2301      	movs	r3, #1
 800270c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270e:	4b79      	ldr	r3, [pc, #484]	@ (80028f4 <HAL_RCC_OscConfig+0x4bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d118      	bne.n	800274c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271a:	4b76      	ldr	r3, [pc, #472]	@ (80028f4 <HAL_RCC_OscConfig+0x4bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a75      	ldr	r2, [pc, #468]	@ (80028f4 <HAL_RCC_OscConfig+0x4bc>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002726:	f7fe fccd 	bl	80010c4 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272e:	f7fe fcc9 	bl	80010c4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e183      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002740:	4b6c      	ldr	r3, [pc, #432]	@ (80028f4 <HAL_RCC_OscConfig+0x4bc>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d108      	bne.n	8002766 <HAL_RCC_OscConfig+0x32e>
 8002754:	4b66      	ldr	r3, [pc, #408]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a65      	ldr	r2, [pc, #404]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002764:	e024      	b.n	80027b0 <HAL_RCC_OscConfig+0x378>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b05      	cmp	r3, #5
 800276c:	d110      	bne.n	8002790 <HAL_RCC_OscConfig+0x358>
 800276e:	4b60      	ldr	r3, [pc, #384]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002774:	4a5e      	ldr	r2, [pc, #376]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800277e:	4b5c      	ldr	r3, [pc, #368]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002784:	4a5a      	ldr	r2, [pc, #360]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800278e:	e00f      	b.n	80027b0 <HAL_RCC_OscConfig+0x378>
 8002790:	4b57      	ldr	r3, [pc, #348]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	4a56      	ldr	r2, [pc, #344]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a0:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a52      	ldr	r2, [pc, #328]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d016      	beq.n	80027e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7fe fc84 	bl	80010c4 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7fe fc80 	bl	80010c4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e138      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d6:	4b46      	ldr	r3, [pc, #280]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ed      	beq.n	80027c0 <HAL_RCC_OscConfig+0x388>
 80027e4:	e015      	b.n	8002812 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fc6d 	bl	80010c4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fc69 	bl	80010c4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e121      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002804:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ed      	bne.n	80027ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002812:	7ffb      	ldrb	r3, [r7, #31]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b35      	ldr	r3, [pc, #212]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	4a34      	ldr	r2, [pc, #208]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002822:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b00      	cmp	r3, #0
 800282e:	d03c      	beq.n	80028aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002838:	4b2d      	ldr	r3, [pc, #180]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 800283a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800283e:	4a2c      	ldr	r2, [pc, #176]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002848:	f7fe fc3c 	bl	80010c4 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002850:	f7fe fc38 	bl	80010c4 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e0f2      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002862:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ef      	beq.n	8002850 <HAL_RCC_OscConfig+0x418>
 8002870:	e01b      	b.n	80028aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002872:	4b1f      	ldr	r3, [pc, #124]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 8002874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002878:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f023 0301 	bic.w	r3, r3, #1
 800287e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe fc1f 	bl	80010c4 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800288a:	f7fe fc1b 	bl	80010c4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0d5      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 800289e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ef      	bne.n	800288a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80c9 	beq.w	8002a46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028b4:	4b0e      	ldr	r3, [pc, #56]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b0c      	cmp	r3, #12
 80028be:	f000 8083 	beq.w	80029c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d15e      	bne.n	8002988 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <HAL_RCC_OscConfig+0x4b8>)
 80028d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe fbf5 	bl	80010c4 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	e00c      	b.n	80028f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7fe fbf1 	bl	80010c4 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d905      	bls.n	80028f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0ab      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b55      	ldr	r3, [pc, #340]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ec      	bne.n	80028de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002904:	4b52      	ldr	r3, [pc, #328]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	4b52      	ldr	r3, [pc, #328]	@ (8002a54 <HAL_RCC_OscConfig+0x61c>)
 800290a:	4013      	ands	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6a11      	ldr	r1, [r2, #32]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002914:	3a01      	subs	r2, #1
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800291e:	0212      	lsls	r2, r2, #8
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002926:	0852      	lsrs	r2, r2, #1
 8002928:	3a01      	subs	r2, #1
 800292a:	0552      	lsls	r2, r2, #21
 800292c:	4311      	orrs	r1, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002932:	0852      	lsrs	r2, r2, #1
 8002934:	3a01      	subs	r2, #1
 8002936:	0652      	lsls	r2, r2, #25
 8002938:	4311      	orrs	r1, r2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800293e:	06d2      	lsls	r2, r2, #27
 8002940:	430a      	orrs	r2, r1
 8002942:	4943      	ldr	r1, [pc, #268]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 8002944:	4313      	orrs	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002948:	4b41      	ldr	r3, [pc, #260]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a40      	ldr	r2, [pc, #256]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002954:	4b3e      	ldr	r3, [pc, #248]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a3d      	ldr	r2, [pc, #244]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fbb0 	bl	80010c4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fbac 	bl	80010c4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e066      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	4b35      	ldr	r3, [pc, #212]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x530>
 8002986:	e05e      	b.n	8002a46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a30      	ldr	r2, [pc, #192]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 800298e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7fe fb96 	bl	80010c4 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fb92 	bl	80010c4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04c      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ae:	4b28      	ldr	r3, [pc, #160]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029ba:	4b25      	ldr	r3, [pc, #148]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	4924      	ldr	r1, [pc, #144]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 80029c0:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_RCC_OscConfig+0x620>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
 80029c6:	e03e      	b.n	8002a46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e039      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80029d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a50 <HAL_RCC_OscConfig+0x618>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0203 	and.w	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d12c      	bne.n	8002a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	3b01      	subs	r3, #1
 80029f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d123      	bne.n	8002a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d11b      	bne.n	8002a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d113      	bne.n	8002a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	3b01      	subs	r3, #1
 8002a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	019f800c 	.word	0x019f800c
 8002a58:	feeefffc 	.word	0xfeeefffc

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e11e      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a74:	4b91      	ldr	r3, [pc, #580]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d910      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b8e      	ldr	r3, [pc, #568]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 020f 	bic.w	r2, r3, #15
 8002a8a:	498c      	ldr	r1, [pc, #560]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b8a      	ldr	r3, [pc, #552]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e106      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d073      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d129      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab8:	4b81      	ldr	r3, [pc, #516]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0f4      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002ac8:	f000 f99e 	bl	8002e08 <RCC_GetSysClockFreqFromPLLSource>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4a7c      	ldr	r2, [pc, #496]	@ (8002cc4 <HAL_RCC_ClockConfig+0x268>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d93f      	bls.n	8002b56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d033      	beq.n	8002b56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d12f      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002af6:	4b72      	ldr	r3, [pc, #456]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002afe:	4a70      	ldr	r2, [pc, #448]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e024      	b.n	8002b56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b14:	4b6a      	ldr	r3, [pc, #424]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0c6      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b24:	4b66      	ldr	r3, [pc, #408]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0be      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b34:	f000 f8ce 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a61      	ldr	r2, [pc, #388]	@ (8002cc4 <HAL_RCC_ClockConfig+0x268>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d909      	bls.n	8002b56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b42:	4b5f      	ldr	r3, [pc, #380]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b4a:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4957      	ldr	r1, [pc, #348]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe faac 	bl	80010c4 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7fe faa8 	bl	80010c4 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e095      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b4e      	ldr	r3, [pc, #312]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d023      	beq.n	8002bec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb0:	4b43      	ldr	r3, [pc, #268]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a42      	ldr	r2, [pc, #264]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002bd0:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b39      	ldr	r3, [pc, #228]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4936      	ldr	r1, [pc, #216]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b80      	cmp	r3, #128	@ 0x80
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002bf2:	4b33      	ldr	r3, [pc, #204]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4a32      	ldr	r2, [pc, #200]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002bf8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d21d      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f023 020f 	bic.w	r2, r3, #15
 8002c14:	4929      	ldr	r1, [pc, #164]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fa52 	bl	80010c4 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe fa4e 	bl	80010c4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e03b      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	4b20      	ldr	r3, [pc, #128]	@ (8002cbc <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d1ed      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4917      	ldr	r1, [pc, #92]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c72:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490f      	ldr	r1, [pc, #60]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c86:	f000 f825 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <HAL_RCC_ClockConfig+0x264>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490c      	ldr	r1, [pc, #48]	@ (8002cc8 <HAL_RCC_ClockConfig+0x26c>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <HAL_RCC_ClockConfig+0x270>)
 8002ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x274>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe f9be 	bl	800102c <HAL_InitTick>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	04c4b400 	.word	0x04c4b400
 8002cc8:	0800587c 	.word	0x0800587c
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cda:	4b2c      	ldr	r3, [pc, #176]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	e047      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002cec:	4b27      	ldr	r3, [pc, #156]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf8:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e03e      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002cfe:	4b23      	ldr	r3, [pc, #140]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b0c      	cmp	r3, #12
 8002d08:	d136      	bne.n	8002d78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d28:	4a1a      	ldr	r2, [pc, #104]	@ (8002d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	4a16      	ldr	r2, [pc, #88]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	68d2      	ldr	r2, [r2, #12]
 8002d34:	0a12      	lsrs	r2, r2, #8
 8002d36:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]
      break;
 8002d40:	e00c      	b.n	8002d5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d42:	4a13      	ldr	r2, [pc, #76]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	4a10      	ldr	r2, [pc, #64]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4c:	68d2      	ldr	r2, [r2, #12]
 8002d4e:	0a12      	lsrs	r2, r2, #8
 8002d50:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]
      break;
 8002d5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0e5b      	lsrs	r3, r3, #25
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	3301      	adds	r3, #1
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	e001      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d7c:	693b      	ldr	r3, [r7, #16]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	00f42400 	.word	0x00f42400
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	@ (8002dac <HAL_RCC_GetHCLKFreq+0x14>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002db4:	f7ff fff0 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4904      	ldr	r1, [pc, #16]	@ (8002dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dc6:	5ccb      	ldrb	r3, [r1, r3]
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800588c 	.word	0x0800588c

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002de0:	f7ff ffda 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4904      	ldr	r1, [pc, #16]	@ (8002e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	f003 031f 	and.w	r3, r3, #31
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40021000 	.word	0x40021000
 8002e04:	0800588c 	.word	0x0800588c

08002e08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d10c      	bne.n	8002e46 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e2c:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e36:	68d2      	ldr	r2, [r2, #12]
 8002e38:	0a12      	lsrs	r2, r2, #8
 8002e3a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	617b      	str	r3, [r7, #20]
    break;
 8002e44:	e00c      	b.n	8002e60 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e46:	4a12      	ldr	r2, [pc, #72]	@ (8002e90 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e50:	68d2      	ldr	r2, [r2, #12]
 8002e52:	0a12      	lsrs	r2, r2, #8
 8002e54:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    break;
 8002e5e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e60:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0e5b      	lsrs	r3, r3, #25
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002e7a:	687b      	ldr	r3, [r7, #4]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	007a1200 	.word	0x007a1200
 8002e90:	00f42400 	.word	0x00f42400

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8098 	beq.w	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b43      	ldr	r3, [pc, #268]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b40      	ldr	r3, [pc, #256]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ece:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ede:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a39      	ldr	r2, [pc, #228]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eea:	f7fe f8eb 	bl	80010c4 <HAL_GetTick>
 8002eee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ef0:	e009      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef2:	f7fe f8e7 	bl	80010c4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d902      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	74fb      	strb	r3, [r7, #19]
        break;
 8002f04:	e005      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f06:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ef      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d159      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f18:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01e      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d019      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f34:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f40:	4b20      	ldr	r3, [pc, #128]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f46:	4a1f      	ldr	r2, [pc, #124]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f50:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f56:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d016      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f72:	f7fe f8a7 	bl	80010c4 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f78:	e00b      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe f8a3 	bl	80010c4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d902      	bls.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	74fb      	strb	r3, [r7, #19]
            break;
 8002f90:	e006      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f92:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ec      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fa0:	7cfb      	ldrb	r3, [r7, #19]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa6:	4b07      	ldr	r3, [pc, #28]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	4903      	ldr	r1, [pc, #12]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	74bb      	strb	r3, [r7, #18]
 8002fc2:	e005      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fd0:	7c7b      	ldrb	r3, [r7, #17]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d105      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd6:	4ba7      	ldr	r3, [pc, #668]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fda:	4aa6      	ldr	r2, [pc, #664]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fee:	4ba1      	ldr	r3, [pc, #644]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff4:	f023 0203 	bic.w	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	499d      	ldr	r1, [pc, #628]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003010:	4b98      	ldr	r3, [pc, #608]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003016:	f023 020c 	bic.w	r2, r3, #12
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	4995      	ldr	r1, [pc, #596]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003032:	4b90      	ldr	r3, [pc, #576]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	498c      	ldr	r1, [pc, #560]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003054:	4b87      	ldr	r3, [pc, #540]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	4984      	ldr	r1, [pc, #528]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003076:	4b7f      	ldr	r3, [pc, #508]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	497b      	ldr	r1, [pc, #492]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003098:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	4973      	ldr	r1, [pc, #460]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	496a      	ldr	r1, [pc, #424]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030dc:	4b65      	ldr	r3, [pc, #404]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4962      	ldr	r1, [pc, #392]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	4959      	ldr	r1, [pc, #356]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003120:	4b54      	ldr	r3, [pc, #336]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	4951      	ldr	r1, [pc, #324]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d015      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003142:	4b4c      	ldr	r3, [pc, #304]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	4948      	ldr	r1, [pc, #288]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003160:	d105      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003162:	4b44      	ldr	r3, [pc, #272]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4a43      	ldr	r2, [pc, #268]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003168:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800316c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003176:	2b00      	cmp	r3, #0
 8003178:	d015      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003180:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003188:	493a      	ldr	r1, [pc, #232]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003198:	d105      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319a:	4b36      	ldr	r3, [pc, #216]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031a4:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d015      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031b2:	4b30      	ldr	r3, [pc, #192]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c0:	492c      	ldr	r1, [pc, #176]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031d0:	d105      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d2:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	4a27      	ldr	r2, [pc, #156]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031dc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d015      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031ea:	4b22      	ldr	r3, [pc, #136]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	491e      	ldr	r1, [pc, #120]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003208:	d105      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320a:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4a19      	ldr	r2, [pc, #100]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003210:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003214:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003222:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	4910      	ldr	r1, [pc, #64]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003240:	d105      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003242:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4a0b      	ldr	r2, [pc, #44]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003248:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800324c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	4902      	ldr	r1, [pc, #8]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003274:	40021000 	.word	0x40021000
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800327e:	d105      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003280:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	4a20      	ldr	r2, [pc, #128]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d015      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4918      	ldr	r1, [pc, #96]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032b8:	4b13      	ldr	r3, [pc, #76]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a12      	ldr	r2, [pc, #72]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d015      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032de:	490a      	ldr	r1, [pc, #40]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ee:	d105      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80032f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80032fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000

0800330c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e09d      	b.n	800345a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	2b00      	cmp	r3, #0
 8003324:	d108      	bne.n	8003338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800332e:	d009      	beq.n	8003344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
 8003336:	e005      	b.n	8003344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fd fc8e 	bl	8000c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800337a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003384:	d902      	bls.n	800338c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e002      	b.n	8003392 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800338c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003390:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800339a:	d007      	beq.n	80033ac <HAL_SPI_Init+0xa0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	ea42 0103 	orr.w	r1, r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	0c1b      	lsrs	r3, r3, #16
 8003408:	f003 0204 	and.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003448:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b088      	sub	sp, #32
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003472:	f7fd fe27 	bl	80010c4 <HAL_GetTick>
 8003476:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003488:	2302      	movs	r3, #2
 800348a:	e15c      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x36>
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e154      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_SPI_Transmit+0x48>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e14d      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003544:	d952      	bls.n	80035ec <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0xf2>
 800354e:	8b7b      	ldrh	r3, [r7, #26]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d145      	bne.n	80035e0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003578:	e032      	b.n	80035e0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b02      	cmp	r3, #2
 8003586:	d112      	bne.n	80035ae <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	881a      	ldrh	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035ac:	e018      	b.n	80035e0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035ae:	f7fd fd89 	bl	80010c4 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d803      	bhi.n	80035c6 <HAL_SPI_Transmit+0x164>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d102      	bne.n	80035cc <HAL_SPI_Transmit+0x16a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0b2      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1c7      	bne.n	800357a <HAL_SPI_Transmit+0x118>
 80035ea:	e083      	b.n	80036f4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_SPI_Transmit+0x198>
 80035f4:	8b7b      	ldrh	r3, [r7, #26]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d177      	bne.n	80036ea <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d912      	bls.n	800362a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b02      	subs	r3, #2
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003628:	e05f      	b.n	80036ea <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	7812      	ldrb	r2, [r2, #0]
 8003636:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003650:	e04b      	b.n	80036ea <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d12b      	bne.n	80036b8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b01      	cmp	r3, #1
 8003668:	d912      	bls.n	8003690 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	1c9a      	adds	r2, r3, #2
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b02      	subs	r3, #2
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800368e:	e02c      	b.n	80036ea <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	330c      	adds	r3, #12
 800369a:	7812      	ldrb	r2, [r2, #0]
 800369c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b6:	e018      	b.n	80036ea <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b8:	f7fd fd04 	bl	80010c4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d803      	bhi.n	80036d0 <HAL_SPI_Transmit+0x26e>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d102      	bne.n	80036d6 <HAL_SPI_Transmit+0x274>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e02d      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1ae      	bne.n	8003652 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f947 	bl	800398c <SPI_EndRxTxTransaction>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
  }
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003760:	f7fd fcb0 	bl	80010c4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	4413      	add	r3, r2
 800376e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003770:	f7fd fca8 	bl	80010c4 <HAL_GetTick>
 8003774:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003776:	4b39      	ldr	r3, [pc, #228]	@ (800385c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	015b      	lsls	r3, r3, #5
 800377c:	0d1b      	lsrs	r3, r3, #20
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	fb02 f303 	mul.w	r3, r2, r3
 8003784:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003786:	e054      	b.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d050      	beq.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003790:	f7fd fc98 	bl	80010c4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	429a      	cmp	r2, r3
 800379e:	d902      	bls.n	80037a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d13d      	bne.n	8003822 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037be:	d111      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c8:	d004      	beq.n	80037d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d2:	d107      	bne.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ec:	d10f      	bne.n	800380e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800380c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e017      	b.n	8003852 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	3b01      	subs	r3, #1
 8003830:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	bf0c      	ite	eq
 8003842:	2301      	moveq	r3, #1
 8003844:	2300      	movne	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	429a      	cmp	r2, r3
 800384e:	d19b      	bne.n	8003788 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000000 	.word	0x20000000

08003860 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003872:	f7fd fc27 	bl	80010c4 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	1a9b      	subs	r3, r3, r2
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	4413      	add	r3, r2
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003882:	f7fd fc1f 	bl	80010c4 <HAL_GetTick>
 8003886:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003890:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	0d1b      	lsrs	r3, r3, #20
 80038a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a2:	fb02 f303 	mul.w	r3, r2, r3
 80038a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038a8:	e060      	b.n	800396c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80038b0:	d107      	bne.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d050      	beq.n	800396c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ca:	f7fd fbfb 	bl	80010c4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d902      	bls.n	80038e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d13d      	bne.n	800395c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038f8:	d111      	bne.n	800391e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003902:	d004      	beq.n	800390e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390c:	d107      	bne.n	800391e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800391c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003926:	d10f      	bne.n	8003948 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003946:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e010      	b.n	800397e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	3b01      	subs	r3, #1
 800396a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	429a      	cmp	r2, r3
 800397a:	d196      	bne.n	80038aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3728      	adds	r7, #40	@ 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff ff5b 	bl	8003860 <SPI_WaitFifoStateUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e027      	b.n	8003a10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2180      	movs	r1, #128	@ 0x80
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff fec0 	bl	8003750 <SPI_WaitFlagStateUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e014      	b.n	8003a10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff ff34 	bl	8003860 <SPI_WaitFifoStateUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e000      	b.n	8003a10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e042      	b.n	8003ab0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7fd f961 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2224      	movs	r2, #36	@ 0x24
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fbb2 	bl	80041cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8b3 	bl	8003bd4 <UART_SetConfig>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e01b      	b.n	8003ab0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fc31 	bl	8004310 <UART_CheckIdleState>
 8003aae:	4603      	mov	r3, r0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	@ 0x28
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d17b      	bne.n	8003bca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_UART_Transmit+0x26>
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e074      	b.n	8003bcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2221      	movs	r2, #33	@ 0x21
 8003aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003af2:	f7fd fae7 	bl	80010c4 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b10:	d108      	bne.n	8003b24 <HAL_UART_Transmit+0x6c>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	e003      	b.n	8003b2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b2c:	e030      	b.n	8003b90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fc93 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e03d      	b.n	8003bcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10b      	bne.n	8003b6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3302      	adds	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	e007      	b.n	8003b7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1c8      	bne.n	8003b2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2140      	movs	r1, #64	@ 0x40
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fc5c 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b08c      	sub	sp, #48	@ 0x30
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4baa      	ldr	r3, [pc, #680]	@ (8003eac <UART_SetConfig+0x2d8>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb0 <UART_SetConfig+0x2dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5e:	f023 010f 	bic.w	r1, r3, #15
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a90      	ldr	r2, [pc, #576]	@ (8003eb4 <UART_SetConfig+0x2e0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d125      	bne.n	8003cc4 <UART_SetConfig+0xf0>
 8003c78:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb8 <UART_SetConfig+0x2e4>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d81a      	bhi.n	8003cbc <UART_SetConfig+0xe8>
 8003c86:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <UART_SetConfig+0xb8>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003ca5 	.word	0x08003ca5
 8003c98:	08003cb5 	.word	0x08003cb5
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e116      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e112      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cac:	2304      	movs	r3, #4
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb2:	e10e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cb4:	2308      	movs	r3, #8
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cba:	e10a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc2:	e106      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a7c      	ldr	r2, [pc, #496]	@ (8003ebc <UART_SetConfig+0x2e8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d138      	bne.n	8003d40 <UART_SetConfig+0x16c>
 8003cce:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb8 <UART_SetConfig+0x2e4>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d82d      	bhi.n	8003d38 <UART_SetConfig+0x164>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <UART_SetConfig+0x110>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d39 	.word	0x08003d39
 8003cec:	08003d39 	.word	0x08003d39
 8003cf0:	08003d39 	.word	0x08003d39
 8003cf4:	08003d29 	.word	0x08003d29
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d39 	.word	0x08003d39
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d21 	.word	0x08003d21
 8003d08:	08003d39 	.word	0x08003d39
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d39 	.word	0x08003d39
 8003d14:	08003d31 	.word	0x08003d31
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1e:	e0d8      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d20:	2302      	movs	r3, #2
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d26:	e0d4      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d2e:	e0d0      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d36:	e0cc      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d3e:	e0c8      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec0 <UART_SetConfig+0x2ec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d125      	bne.n	8003d96 <UART_SetConfig+0x1c2>
 8003d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb8 <UART_SetConfig+0x2e4>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d54:	2b30      	cmp	r3, #48	@ 0x30
 8003d56:	d016      	beq.n	8003d86 <UART_SetConfig+0x1b2>
 8003d58:	2b30      	cmp	r3, #48	@ 0x30
 8003d5a:	d818      	bhi.n	8003d8e <UART_SetConfig+0x1ba>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d00a      	beq.n	8003d76 <UART_SetConfig+0x1a2>
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d814      	bhi.n	8003d8e <UART_SetConfig+0x1ba>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <UART_SetConfig+0x19a>
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d008      	beq.n	8003d7e <UART_SetConfig+0x1aa>
 8003d6c:	e00f      	b.n	8003d8e <UART_SetConfig+0x1ba>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d74:	e0ad      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d76:	2302      	movs	r3, #2
 8003d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d7c:	e0a9      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d84:	e0a5      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d86:	2308      	movs	r3, #8
 8003d88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d8c:	e0a1      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d94:	e09d      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec4 <UART_SetConfig+0x2f0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d125      	bne.n	8003dec <UART_SetConfig+0x218>
 8003da0:	4b45      	ldr	r3, [pc, #276]	@ (8003eb8 <UART_SetConfig+0x2e4>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003daa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dac:	d016      	beq.n	8003ddc <UART_SetConfig+0x208>
 8003dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8003db0:	d818      	bhi.n	8003de4 <UART_SetConfig+0x210>
 8003db2:	2b80      	cmp	r3, #128	@ 0x80
 8003db4:	d00a      	beq.n	8003dcc <UART_SetConfig+0x1f8>
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d814      	bhi.n	8003de4 <UART_SetConfig+0x210>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <UART_SetConfig+0x1f0>
 8003dbe:	2b40      	cmp	r3, #64	@ 0x40
 8003dc0:	d008      	beq.n	8003dd4 <UART_SetConfig+0x200>
 8003dc2:	e00f      	b.n	8003de4 <UART_SetConfig+0x210>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dca:	e082      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dd2:	e07e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dda:	e07a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003ddc:	2308      	movs	r3, #8
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de2:	e076      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003de4:	2310      	movs	r3, #16
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dea:	e072      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a35      	ldr	r2, [pc, #212]	@ (8003ec8 <UART_SetConfig+0x2f4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d12a      	bne.n	8003e4c <UART_SetConfig+0x278>
 8003df6:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <UART_SetConfig+0x2e4>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e04:	d01a      	beq.n	8003e3c <UART_SetConfig+0x268>
 8003e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e0a:	d81b      	bhi.n	8003e44 <UART_SetConfig+0x270>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e10:	d00c      	beq.n	8003e2c <UART_SetConfig+0x258>
 8003e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e16:	d815      	bhi.n	8003e44 <UART_SetConfig+0x270>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <UART_SetConfig+0x250>
 8003e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e20:	d008      	beq.n	8003e34 <UART_SetConfig+0x260>
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x270>
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e2a:	e052      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e32:	e04e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3a:	e04a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e42:	e046      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4a:	e042      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <UART_SetConfig+0x2dc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d13a      	bne.n	8003ecc <UART_SetConfig+0x2f8>
 8003e56:	4b18      	ldr	r3, [pc, #96]	@ (8003eb8 <UART_SetConfig+0x2e4>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e64:	d01a      	beq.n	8003e9c <UART_SetConfig+0x2c8>
 8003e66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e6a:	d81b      	bhi.n	8003ea4 <UART_SetConfig+0x2d0>
 8003e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e70:	d00c      	beq.n	8003e8c <UART_SetConfig+0x2b8>
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e76:	d815      	bhi.n	8003ea4 <UART_SetConfig+0x2d0>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <UART_SetConfig+0x2b0>
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e80:	d008      	beq.n	8003e94 <UART_SetConfig+0x2c0>
 8003e82:	e00f      	b.n	8003ea4 <UART_SetConfig+0x2d0>
 8003e84:	2300      	movs	r3, #0
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e8a:	e022      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e92:	e01e      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e94:	2304      	movs	r3, #4
 8003e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e9a:	e01a      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ea2:	e016      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eaa:	e012      	b.n	8003ed2 <UART_SetConfig+0x2fe>
 8003eac:	cfff69f3 	.word	0xcfff69f3
 8003eb0:	40008000 	.word	0x40008000
 8003eb4:	40013800 	.word	0x40013800
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40004400 	.word	0x40004400
 8003ec0:	40004800 	.word	0x40004800
 8003ec4:	40004c00 	.word	0x40004c00
 8003ec8:	40005000 	.word	0x40005000
 8003ecc:	2310      	movs	r3, #16
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4aae      	ldr	r2, [pc, #696]	@ (8004190 <UART_SetConfig+0x5bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	f040 8097 	bne.w	800400c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ede:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d823      	bhi.n	8003f2e <UART_SetConfig+0x35a>
 8003ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <UART_SetConfig+0x318>)
 8003ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f2f 	.word	0x08003f2f
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f1f 	.word	0x08003f1f
 8003f00:	08003f2f 	.word	0x08003f2f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fe ff4e 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f16:	e010      	b.n	8003f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b9e      	ldr	r3, [pc, #632]	@ (8004194 <UART_SetConfig+0x5c0>)
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f1c:	e00d      	b.n	8003f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7fe fed9 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8003f22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f24:	e009      	b.n	8003f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f2c:	e005      	b.n	8003f3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8130 	beq.w	80041a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	4a94      	ldr	r2, [pc, #592]	@ (8004198 <UART_SetConfig+0x5c4>)
 8003f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d305      	bcc.n	8003f72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d903      	bls.n	8003f7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f78:	e113      	b.n	80041a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	60fa      	str	r2, [r7, #12]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	4a84      	ldr	r2, [pc, #528]	@ (8004198 <UART_SetConfig+0x5c4>)
 8003f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2200      	movs	r2, #0
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f9c:	f7fc f990 	bl	80002c0 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	020b      	lsls	r3, r1, #8
 8003fb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fb6:	0202      	lsls	r2, r0, #8
 8003fb8:	6979      	ldr	r1, [r7, #20]
 8003fba:	6849      	ldr	r1, [r1, #4]
 8003fbc:	0849      	lsrs	r1, r1, #1
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	4605      	mov	r5, r0
 8003fc4:	eb12 0804 	adds.w	r8, r2, r4
 8003fc8:	eb43 0905 	adc.w	r9, r3, r5
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	4693      	mov	fp, r2
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	465b      	mov	r3, fp
 8003fda:	4640      	mov	r0, r8
 8003fdc:	4649      	mov	r1, r9
 8003fde:	f7fc f96f 	bl	80002c0 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff0:	d308      	bcc.n	8004004 <UART_SetConfig+0x430>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff8:	d204      	bcs.n	8004004 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a3a      	ldr	r2, [r7, #32]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e0ce      	b.n	80041a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800400a:	e0ca      	b.n	80041a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004014:	d166      	bne.n	80040e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004016:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800401a:	2b08      	cmp	r3, #8
 800401c:	d827      	bhi.n	800406e <UART_SetConfig+0x49a>
 800401e:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <UART_SetConfig+0x450>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004049 	.word	0x08004049
 8004028:	08004051 	.word	0x08004051
 800402c:	08004059 	.word	0x08004059
 8004030:	0800406f 	.word	0x0800406f
 8004034:	0800405f 	.word	0x0800405f
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800406f 	.word	0x0800406f
 8004040:	0800406f 	.word	0x0800406f
 8004044:	08004067 	.word	0x08004067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe feb2 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 800404c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800404e:	e014      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fec4 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8004054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004056:	e010      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004058:	4b4e      	ldr	r3, [pc, #312]	@ (8004194 <UART_SetConfig+0x5c0>)
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800405c:	e00d      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405e:	f7fe fe39 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8004062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004064:	e009      	b.n	800407a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800406a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800406c:	e005      	b.n	800407a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8090 	beq.w	80041a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	4a44      	ldr	r2, [pc, #272]	@ (8004198 <UART_SetConfig+0x5c4>)
 8004088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800408c:	461a      	mov	r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	fbb3 f3f2 	udiv	r3, r3, r2
 8004094:	005a      	lsls	r2, r3, #1
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	441a      	add	r2, r3
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	d916      	bls.n	80040dc <UART_SetConfig+0x508>
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b4:	d212      	bcs.n	80040dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f023 030f 	bic.w	r3, r3, #15
 80040be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	8bfb      	ldrh	r3, [r7, #30]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	8bfa      	ldrh	r2, [r7, #30]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	e062      	b.n	80041a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040e2:	e05e      	b.n	80041a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d828      	bhi.n	800413e <UART_SetConfig+0x56a>
 80040ec:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <UART_SetConfig+0x520>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004129 	.word	0x08004129
 8004100:	0800413f 	.word	0x0800413f
 8004104:	0800412f 	.word	0x0800412f
 8004108:	0800413f 	.word	0x0800413f
 800410c:	0800413f 	.word	0x0800413f
 8004110:	0800413f 	.word	0x0800413f
 8004114:	08004137 	.word	0x08004137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fe fe4a 	bl	8002db0 <HAL_RCC_GetPCLK1Freq>
 800411c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800411e:	e014      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004120:	f7fe fe5c 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8004124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004126:	e010      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004128:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <UART_SetConfig+0x5c0>)
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800412c:	e00d      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800412e:	f7fe fdd1 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8004132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004134:	e009      	b.n	800414a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800413c:	e005      	b.n	800414a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004148:	bf00      	nop
    }

    if (pclk != 0U)
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	2b00      	cmp	r3, #0
 800414e:	d028      	beq.n	80041a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	4a10      	ldr	r2, [pc, #64]	@ (8004198 <UART_SetConfig+0x5c4>)
 8004156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800415a:	461a      	mov	r2, r3
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	441a      	add	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d910      	bls.n	800419c <UART_SetConfig+0x5c8>
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d20c      	bcs.n	800419c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	b29a      	uxth	r2, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	e009      	b.n	80041a2 <UART_SetConfig+0x5ce>
 800418e:	bf00      	nop
 8004190:	40008000 	.word	0x40008000
 8004194:	00f42400 	.word	0x00f42400
 8004198:	080058a4 	.word	0x080058a4
      }
      else
      {
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3730      	adds	r7, #48	@ 0x30
 80041c6:	46bd      	mov	sp, r7
 80041c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ca:	d10a      	bne.n	80042e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b098      	sub	sp, #96	@ 0x60
 8004314:	af02      	add	r7, sp, #8
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004320:	f7fc fed0 	bl	80010c4 <HAL_GetTick>
 8004324:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d12f      	bne.n	8004394 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f88e 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d022      	beq.n	8004394 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004362:	653b      	str	r3, [r7, #80]	@ 0x50
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
 800436e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e063      	b.n	800445c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d149      	bne.n	8004436 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043aa:	2200      	movs	r2, #0
 80043ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f857 	bl	8004464 <UART_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d03c      	beq.n	8004436 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	623b      	str	r3, [r7, #32]
   return(result);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043da:	633b      	str	r3, [r7, #48]	@ 0x30
 80043dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e6      	bne.n	80043bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800440e:	61fa      	str	r2, [r7, #28]
 8004410:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	69b9      	ldr	r1, [r7, #24]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	617b      	str	r3, [r7, #20]
   return(result);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e012      	b.n	800445c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3758      	adds	r7, #88	@ 0x58
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	e04f      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d04b      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fc fe21 	bl	80010c4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <UART_WaitOnFlagUntilTimeout+0x30>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e04e      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d037      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b80      	cmp	r3, #128	@ 0x80
 80044aa:	d034      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b40      	cmp	r3, #64	@ 0x40
 80044b0:	d031      	beq.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d110      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2208      	movs	r2, #8
 80044c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f838 	bl	800453e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2208      	movs	r2, #8
 80044d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e029      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f0:	d111      	bne.n	8004516 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f81e 	bl	800453e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e00f      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	429a      	cmp	r2, r3
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	429a      	cmp	r2, r3
 8004532:	d0a0      	beq.n	8004476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800453e:	b480      	push	{r7}
 8004540:	b095      	sub	sp, #84	@ 0x54
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800455a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004564:	643b      	str	r3, [r7, #64]	@ 0x40
 8004566:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800456a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e6      	bne.n	8004546 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	3308      	adds	r3, #8
 800457e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	61fb      	str	r3, [r7, #28]
   return(result);
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800459c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e3      	bne.n	8004578 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d118      	bne.n	80045ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6979      	ldr	r1, [r7, #20]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	613b      	str	r3, [r7, #16]
   return(result);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e6      	bne.n	80045b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	@ 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_UARTEx_DisableFifoMode+0x16>
 800461c:	2302      	movs	r3, #2
 800461e:	e027      	b.n	8004670 <HAL_UARTEx_DisableFifoMode+0x66>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	@ 0x24
 800462c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800464e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004690:	2302      	movs	r3, #2
 8004692:	e02d      	b.n	80046f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2224      	movs	r2, #36	@ 0x24
 80046a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f84f 	bl	8004774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800470c:	2302      	movs	r3, #2
 800470e:	e02d      	b.n	800476c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2224      	movs	r2, #36	@ 0x24
 800471c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f811 	bl	8004774 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004794:	e031      	b.n	80047fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004796:	2308      	movs	r3, #8
 8004798:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800479a:	2308      	movs	r3, #8
 800479c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	0e5b      	lsrs	r3, r3, #25
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0f5b      	lsrs	r3, r3, #29
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047be:	7bbb      	ldrb	r3, [r7, #14]
 80047c0:	7b3a      	ldrb	r2, [r7, #12]
 80047c2:	4911      	ldr	r1, [pc, #68]	@ (8004808 <UARTEx_SetNbDataToProcess+0x94>)
 80047c4:	5c8a      	ldrb	r2, [r1, r2]
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047ca:	7b3a      	ldrb	r2, [r7, #12]
 80047cc:	490f      	ldr	r1, [pc, #60]	@ (800480c <UARTEx_SetNbDataToProcess+0x98>)
 80047ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	7b7a      	ldrb	r2, [r7, #13]
 80047e0:	4909      	ldr	r1, [pc, #36]	@ (8004808 <UARTEx_SetNbDataToProcess+0x94>)
 80047e2:	5c8a      	ldrb	r2, [r1, r2]
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047e8:	7b7a      	ldrb	r2, [r7, #13]
 80047ea:	4908      	ldr	r1, [pc, #32]	@ (800480c <UARTEx_SetNbDataToProcess+0x98>)
 80047ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	080058bc 	.word	0x080058bc
 800480c:	080058c4 	.word	0x080058c4

08004810 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004826:	d10e      	bne.n	8004846 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f06f 0201 	mvn.w	r2, #1
 800483e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f804 	bl	800484e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <std>:
 8004864:	2300      	movs	r3, #0
 8004866:	b510      	push	{r4, lr}
 8004868:	4604      	mov	r4, r0
 800486a:	e9c0 3300 	strd	r3, r3, [r0]
 800486e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004872:	6083      	str	r3, [r0, #8]
 8004874:	8181      	strh	r1, [r0, #12]
 8004876:	6643      	str	r3, [r0, #100]	@ 0x64
 8004878:	81c2      	strh	r2, [r0, #14]
 800487a:	6183      	str	r3, [r0, #24]
 800487c:	4619      	mov	r1, r3
 800487e:	2208      	movs	r2, #8
 8004880:	305c      	adds	r0, #92	@ 0x5c
 8004882:	f000 f9f9 	bl	8004c78 <memset>
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <std+0x58>)
 8004888:	6263      	str	r3, [r4, #36]	@ 0x24
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <std+0x5c>)
 800488c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <std+0x60>)
 8004890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004892:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <std+0x64>)
 8004894:	6323      	str	r3, [r4, #48]	@ 0x30
 8004896:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <std+0x68>)
 8004898:	6224      	str	r4, [r4, #32]
 800489a:	429c      	cmp	r4, r3
 800489c:	d006      	beq.n	80048ac <std+0x48>
 800489e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048a2:	4294      	cmp	r4, r2
 80048a4:	d002      	beq.n	80048ac <std+0x48>
 80048a6:	33d0      	adds	r3, #208	@ 0xd0
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d105      	bne.n	80048b8 <std+0x54>
 80048ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b4:	f000 ba58 	b.w	8004d68 <__retarget_lock_init_recursive>
 80048b8:	bd10      	pop	{r4, pc}
 80048ba:	bf00      	nop
 80048bc:	08004ac9 	.word	0x08004ac9
 80048c0:	08004aeb 	.word	0x08004aeb
 80048c4:	08004b23 	.word	0x08004b23
 80048c8:	08004b47 	.word	0x08004b47
 80048cc:	20000264 	.word	0x20000264

080048d0 <stdio_exit_handler>:
 80048d0:	4a02      	ldr	r2, [pc, #8]	@ (80048dc <stdio_exit_handler+0xc>)
 80048d2:	4903      	ldr	r1, [pc, #12]	@ (80048e0 <stdio_exit_handler+0x10>)
 80048d4:	4803      	ldr	r0, [pc, #12]	@ (80048e4 <stdio_exit_handler+0x14>)
 80048d6:	f000 b869 	b.w	80049ac <_fwalk_sglue>
 80048da:	bf00      	nop
 80048dc:	2000000c 	.word	0x2000000c
 80048e0:	08005605 	.word	0x08005605
 80048e4:	2000001c 	.word	0x2000001c

080048e8 <cleanup_stdio>:
 80048e8:	6841      	ldr	r1, [r0, #4]
 80048ea:	4b0c      	ldr	r3, [pc, #48]	@ (800491c <cleanup_stdio+0x34>)
 80048ec:	4299      	cmp	r1, r3
 80048ee:	b510      	push	{r4, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	d001      	beq.n	80048f8 <cleanup_stdio+0x10>
 80048f4:	f000 fe86 	bl	8005604 <_fflush_r>
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <cleanup_stdio+0x38>)
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d002      	beq.n	8004906 <cleanup_stdio+0x1e>
 8004900:	4620      	mov	r0, r4
 8004902:	f000 fe7f 	bl	8005604 <_fflush_r>
 8004906:	68e1      	ldr	r1, [r4, #12]
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <cleanup_stdio+0x3c>)
 800490a:	4299      	cmp	r1, r3
 800490c:	d004      	beq.n	8004918 <cleanup_stdio+0x30>
 800490e:	4620      	mov	r0, r4
 8004910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004914:	f000 be76 	b.w	8005604 <_fflush_r>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	bf00      	nop
 800491c:	20000264 	.word	0x20000264
 8004920:	200002cc 	.word	0x200002cc
 8004924:	20000334 	.word	0x20000334

08004928 <global_stdio_init.part.0>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <global_stdio_init.part.0+0x30>)
 800492c:	4c0b      	ldr	r4, [pc, #44]	@ (800495c <global_stdio_init.part.0+0x34>)
 800492e:	4a0c      	ldr	r2, [pc, #48]	@ (8004960 <global_stdio_init.part.0+0x38>)
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4620      	mov	r0, r4
 8004934:	2200      	movs	r2, #0
 8004936:	2104      	movs	r1, #4
 8004938:	f7ff ff94 	bl	8004864 <std>
 800493c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004940:	2201      	movs	r2, #1
 8004942:	2109      	movs	r1, #9
 8004944:	f7ff ff8e 	bl	8004864 <std>
 8004948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800494c:	2202      	movs	r2, #2
 800494e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004952:	2112      	movs	r1, #18
 8004954:	f7ff bf86 	b.w	8004864 <std>
 8004958:	2000039c 	.word	0x2000039c
 800495c:	20000264 	.word	0x20000264
 8004960:	080048d1 	.word	0x080048d1

08004964 <__sfp_lock_acquire>:
 8004964:	4801      	ldr	r0, [pc, #4]	@ (800496c <__sfp_lock_acquire+0x8>)
 8004966:	f000 ba00 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 800496a:	bf00      	nop
 800496c:	200003a5 	.word	0x200003a5

08004970 <__sfp_lock_release>:
 8004970:	4801      	ldr	r0, [pc, #4]	@ (8004978 <__sfp_lock_release+0x8>)
 8004972:	f000 b9fb 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004976:	bf00      	nop
 8004978:	200003a5 	.word	0x200003a5

0800497c <__sinit>:
 800497c:	b510      	push	{r4, lr}
 800497e:	4604      	mov	r4, r0
 8004980:	f7ff fff0 	bl	8004964 <__sfp_lock_acquire>
 8004984:	6a23      	ldr	r3, [r4, #32]
 8004986:	b11b      	cbz	r3, 8004990 <__sinit+0x14>
 8004988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498c:	f7ff bff0 	b.w	8004970 <__sfp_lock_release>
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__sinit+0x28>)
 8004992:	6223      	str	r3, [r4, #32]
 8004994:	4b04      	ldr	r3, [pc, #16]	@ (80049a8 <__sinit+0x2c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f5      	bne.n	8004988 <__sinit+0xc>
 800499c:	f7ff ffc4 	bl	8004928 <global_stdio_init.part.0>
 80049a0:	e7f2      	b.n	8004988 <__sinit+0xc>
 80049a2:	bf00      	nop
 80049a4:	080048e9 	.word	0x080048e9
 80049a8:	2000039c 	.word	0x2000039c

080049ac <_fwalk_sglue>:
 80049ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049b0:	4607      	mov	r7, r0
 80049b2:	4688      	mov	r8, r1
 80049b4:	4614      	mov	r4, r2
 80049b6:	2600      	movs	r6, #0
 80049b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049bc:	f1b9 0901 	subs.w	r9, r9, #1
 80049c0:	d505      	bpl.n	80049ce <_fwalk_sglue+0x22>
 80049c2:	6824      	ldr	r4, [r4, #0]
 80049c4:	2c00      	cmp	r4, #0
 80049c6:	d1f7      	bne.n	80049b8 <_fwalk_sglue+0xc>
 80049c8:	4630      	mov	r0, r6
 80049ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049ce:	89ab      	ldrh	r3, [r5, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d907      	bls.n	80049e4 <_fwalk_sglue+0x38>
 80049d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d8:	3301      	adds	r3, #1
 80049da:	d003      	beq.n	80049e4 <_fwalk_sglue+0x38>
 80049dc:	4629      	mov	r1, r5
 80049de:	4638      	mov	r0, r7
 80049e0:	47c0      	blx	r8
 80049e2:	4306      	orrs	r6, r0
 80049e4:	3568      	adds	r5, #104	@ 0x68
 80049e6:	e7e9      	b.n	80049bc <_fwalk_sglue+0x10>

080049e8 <iprintf>:
 80049e8:	b40f      	push	{r0, r1, r2, r3}
 80049ea:	b507      	push	{r0, r1, r2, lr}
 80049ec:	4906      	ldr	r1, [pc, #24]	@ (8004a08 <iprintf+0x20>)
 80049ee:	ab04      	add	r3, sp, #16
 80049f0:	6808      	ldr	r0, [r1, #0]
 80049f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f6:	6881      	ldr	r1, [r0, #8]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	f000 fadb 	bl	8004fb4 <_vfiprintf_r>
 80049fe:	b003      	add	sp, #12
 8004a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a04:	b004      	add	sp, #16
 8004a06:	4770      	bx	lr
 8004a08:	20000018 	.word	0x20000018

08004a0c <_puts_r>:
 8004a0c:	6a03      	ldr	r3, [r0, #32]
 8004a0e:	b570      	push	{r4, r5, r6, lr}
 8004a10:	6884      	ldr	r4, [r0, #8]
 8004a12:	4605      	mov	r5, r0
 8004a14:	460e      	mov	r6, r1
 8004a16:	b90b      	cbnz	r3, 8004a1c <_puts_r+0x10>
 8004a18:	f7ff ffb0 	bl	800497c <__sinit>
 8004a1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a1e:	07db      	lsls	r3, r3, #31
 8004a20:	d405      	bmi.n	8004a2e <_puts_r+0x22>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0598      	lsls	r0, r3, #22
 8004a26:	d402      	bmi.n	8004a2e <_puts_r+0x22>
 8004a28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a2a:	f000 f99e 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	0719      	lsls	r1, r3, #28
 8004a32:	d502      	bpl.n	8004a3a <_puts_r+0x2e>
 8004a34:	6923      	ldr	r3, [r4, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d135      	bne.n	8004aa6 <_puts_r+0x9a>
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 f8c5 	bl	8004bcc <__swsetup_r>
 8004a42:	b380      	cbz	r0, 8004aa6 <_puts_r+0x9a>
 8004a44:	f04f 35ff 	mov.w	r5, #4294967295
 8004a48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a4a:	07da      	lsls	r2, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_puts_r+0x4e>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	059b      	lsls	r3, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_puts_r+0x4e>
 8004a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a56:	f000 f989 	bl	8004d6c <__retarget_lock_release_recursive>
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da04      	bge.n	8004a6c <_puts_r+0x60>
 8004a62:	69a2      	ldr	r2, [r4, #24]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	dc17      	bgt.n	8004a98 <_puts_r+0x8c>
 8004a68:	290a      	cmp	r1, #10
 8004a6a:	d015      	beq.n	8004a98 <_puts_r+0x8c>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	6022      	str	r2, [r4, #0]
 8004a72:	7019      	strb	r1, [r3, #0]
 8004a74:	68a3      	ldr	r3, [r4, #8]
 8004a76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	60a3      	str	r3, [r4, #8]
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d1ed      	bne.n	8004a5e <_puts_r+0x52>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	da11      	bge.n	8004aaa <_puts_r+0x9e>
 8004a86:	4622      	mov	r2, r4
 8004a88:	210a      	movs	r1, #10
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f85f 	bl	8004b4e <__swbuf_r>
 8004a90:	3001      	adds	r0, #1
 8004a92:	d0d7      	beq.n	8004a44 <_puts_r+0x38>
 8004a94:	250a      	movs	r5, #10
 8004a96:	e7d7      	b.n	8004a48 <_puts_r+0x3c>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f857 	bl	8004b4e <__swbuf_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d1e7      	bne.n	8004a74 <_puts_r+0x68>
 8004aa4:	e7ce      	b.n	8004a44 <_puts_r+0x38>
 8004aa6:	3e01      	subs	r6, #1
 8004aa8:	e7e4      	b.n	8004a74 <_puts_r+0x68>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	220a      	movs	r2, #10
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e7ee      	b.n	8004a94 <_puts_r+0x88>
	...

08004ab8 <puts>:
 8004ab8:	4b02      	ldr	r3, [pc, #8]	@ (8004ac4 <puts+0xc>)
 8004aba:	4601      	mov	r1, r0
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	f7ff bfa5 	b.w	8004a0c <_puts_r>
 8004ac2:	bf00      	nop
 8004ac4:	20000018 	.word	0x20000018

08004ac8 <__sread>:
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	460c      	mov	r4, r1
 8004acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad0:	f000 f8fc 	bl	8004ccc <_read_r>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	bfab      	itete	ge
 8004ad8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ada:	89a3      	ldrhlt	r3, [r4, #12]
 8004adc:	181b      	addge	r3, r3, r0
 8004ade:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ae2:	bfac      	ite	ge
 8004ae4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ae6:	81a3      	strhlt	r3, [r4, #12]
 8004ae8:	bd10      	pop	{r4, pc}

08004aea <__swrite>:
 8004aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aee:	461f      	mov	r7, r3
 8004af0:	898b      	ldrh	r3, [r1, #12]
 8004af2:	05db      	lsls	r3, r3, #23
 8004af4:	4605      	mov	r5, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	4616      	mov	r6, r2
 8004afa:	d505      	bpl.n	8004b08 <__swrite+0x1e>
 8004afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b00:	2302      	movs	r3, #2
 8004b02:	2200      	movs	r2, #0
 8004b04:	f000 f8d0 	bl	8004ca8 <_lseek_r>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	4628      	mov	r0, r5
 8004b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1e:	f000 b8e7 	b.w	8004cf0 <_write_r>

08004b22 <__sseek>:
 8004b22:	b510      	push	{r4, lr}
 8004b24:	460c      	mov	r4, r1
 8004b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2a:	f000 f8bd 	bl	8004ca8 <_lseek_r>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	bf15      	itete	ne
 8004b34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b3e:	81a3      	strheq	r3, [r4, #12]
 8004b40:	bf18      	it	ne
 8004b42:	81a3      	strhne	r3, [r4, #12]
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <__sclose>:
 8004b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4a:	f000 b89d 	b.w	8004c88 <_close_r>

08004b4e <__swbuf_r>:
 8004b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b50:	460e      	mov	r6, r1
 8004b52:	4614      	mov	r4, r2
 8004b54:	4605      	mov	r5, r0
 8004b56:	b118      	cbz	r0, 8004b60 <__swbuf_r+0x12>
 8004b58:	6a03      	ldr	r3, [r0, #32]
 8004b5a:	b90b      	cbnz	r3, 8004b60 <__swbuf_r+0x12>
 8004b5c:	f7ff ff0e 	bl	800497c <__sinit>
 8004b60:	69a3      	ldr	r3, [r4, #24]
 8004b62:	60a3      	str	r3, [r4, #8]
 8004b64:	89a3      	ldrh	r3, [r4, #12]
 8004b66:	071a      	lsls	r2, r3, #28
 8004b68:	d501      	bpl.n	8004b6e <__swbuf_r+0x20>
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	b943      	cbnz	r3, 8004b80 <__swbuf_r+0x32>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 f82b 	bl	8004bcc <__swsetup_r>
 8004b76:	b118      	cbz	r0, 8004b80 <__swbuf_r+0x32>
 8004b78:	f04f 37ff 	mov.w	r7, #4294967295
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	6922      	ldr	r2, [r4, #16]
 8004b84:	1a98      	subs	r0, r3, r2
 8004b86:	6963      	ldr	r3, [r4, #20]
 8004b88:	b2f6      	uxtb	r6, r6
 8004b8a:	4283      	cmp	r3, r0
 8004b8c:	4637      	mov	r7, r6
 8004b8e:	dc05      	bgt.n	8004b9c <__swbuf_r+0x4e>
 8004b90:	4621      	mov	r1, r4
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 fd36 	bl	8005604 <_fflush_r>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d1ed      	bne.n	8004b78 <__swbuf_r+0x2a>
 8004b9c:	68a3      	ldr	r3, [r4, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	60a3      	str	r3, [r4, #8]
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	6022      	str	r2, [r4, #0]
 8004ba8:	701e      	strb	r6, [r3, #0]
 8004baa:	6962      	ldr	r2, [r4, #20]
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d004      	beq.n	8004bbc <__swbuf_r+0x6e>
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	07db      	lsls	r3, r3, #31
 8004bb6:	d5e1      	bpl.n	8004b7c <__swbuf_r+0x2e>
 8004bb8:	2e0a      	cmp	r6, #10
 8004bba:	d1df      	bne.n	8004b7c <__swbuf_r+0x2e>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 fd20 	bl	8005604 <_fflush_r>
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	d0d9      	beq.n	8004b7c <__swbuf_r+0x2e>
 8004bc8:	e7d6      	b.n	8004b78 <__swbuf_r+0x2a>
	...

08004bcc <__swsetup_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4b29      	ldr	r3, [pc, #164]	@ (8004c74 <__swsetup_r+0xa8>)
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	b118      	cbz	r0, 8004be0 <__swsetup_r+0x14>
 8004bd8:	6a03      	ldr	r3, [r0, #32]
 8004bda:	b90b      	cbnz	r3, 8004be0 <__swsetup_r+0x14>
 8004bdc:	f7ff fece 	bl	800497c <__sinit>
 8004be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be4:	0719      	lsls	r1, r3, #28
 8004be6:	d422      	bmi.n	8004c2e <__swsetup_r+0x62>
 8004be8:	06da      	lsls	r2, r3, #27
 8004bea:	d407      	bmi.n	8004bfc <__swsetup_r+0x30>
 8004bec:	2209      	movs	r2, #9
 8004bee:	602a      	str	r2, [r5, #0]
 8004bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfa:	e033      	b.n	8004c64 <__swsetup_r+0x98>
 8004bfc:	0758      	lsls	r0, r3, #29
 8004bfe:	d512      	bpl.n	8004c26 <__swsetup_r+0x5a>
 8004c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c02:	b141      	cbz	r1, 8004c16 <__swsetup_r+0x4a>
 8004c04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	d002      	beq.n	8004c12 <__swsetup_r+0x46>
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f000 f8af 	bl	8004d70 <_free_r>
 8004c12:	2300      	movs	r3, #0
 8004c14:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c16:	89a3      	ldrh	r3, [r4, #12]
 8004c18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c1c:	81a3      	strh	r3, [r4, #12]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6063      	str	r3, [r4, #4]
 8004c22:	6923      	ldr	r3, [r4, #16]
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	f043 0308 	orr.w	r3, r3, #8
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	6923      	ldr	r3, [r4, #16]
 8004c30:	b94b      	cbnz	r3, 8004c46 <__swsetup_r+0x7a>
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c3c:	d003      	beq.n	8004c46 <__swsetup_r+0x7a>
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fd2d 	bl	80056a0 <__smakebuf_r>
 8004c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4a:	f013 0201 	ands.w	r2, r3, #1
 8004c4e:	d00a      	beq.n	8004c66 <__swsetup_r+0x9a>
 8004c50:	2200      	movs	r2, #0
 8004c52:	60a2      	str	r2, [r4, #8]
 8004c54:	6962      	ldr	r2, [r4, #20]
 8004c56:	4252      	negs	r2, r2
 8004c58:	61a2      	str	r2, [r4, #24]
 8004c5a:	6922      	ldr	r2, [r4, #16]
 8004c5c:	b942      	cbnz	r2, 8004c70 <__swsetup_r+0xa4>
 8004c5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c62:	d1c5      	bne.n	8004bf0 <__swsetup_r+0x24>
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	0799      	lsls	r1, r3, #30
 8004c68:	bf58      	it	pl
 8004c6a:	6962      	ldrpl	r2, [r4, #20]
 8004c6c:	60a2      	str	r2, [r4, #8]
 8004c6e:	e7f4      	b.n	8004c5a <__swsetup_r+0x8e>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e7f7      	b.n	8004c64 <__swsetup_r+0x98>
 8004c74:	20000018 	.word	0x20000018

08004c78 <memset>:
 8004c78:	4402      	add	r2, r0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d100      	bne.n	8004c82 <memset+0xa>
 8004c80:	4770      	bx	lr
 8004c82:	f803 1b01 	strb.w	r1, [r3], #1
 8004c86:	e7f9      	b.n	8004c7c <memset+0x4>

08004c88 <_close_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	4d06      	ldr	r5, [pc, #24]	@ (8004ca4 <_close_r+0x1c>)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fc f90b 	bl	8000eae <_close>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_close_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_close_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	200003a0 	.word	0x200003a0

08004ca8 <_lseek_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4d07      	ldr	r5, [pc, #28]	@ (8004cc8 <_lseek_r+0x20>)
 8004cac:	4604      	mov	r4, r0
 8004cae:	4608      	mov	r0, r1
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fc f920 	bl	8000efc <_lseek>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_lseek_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_lseek_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	200003a0 	.word	0x200003a0

08004ccc <_read_r>:
 8004ccc:	b538      	push	{r3, r4, r5, lr}
 8004cce:	4d07      	ldr	r5, [pc, #28]	@ (8004cec <_read_r+0x20>)
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	4608      	mov	r0, r1
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	602a      	str	r2, [r5, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7fc f8ae 	bl	8000e3c <_read>
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d102      	bne.n	8004cea <_read_r+0x1e>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b103      	cbz	r3, 8004cea <_read_r+0x1e>
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	bd38      	pop	{r3, r4, r5, pc}
 8004cec:	200003a0 	.word	0x200003a0

08004cf0 <_write_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4d07      	ldr	r5, [pc, #28]	@ (8004d10 <_write_r+0x20>)
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	602a      	str	r2, [r5, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	f7fc f8b9 	bl	8000e76 <_write>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_write_r+0x1e>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_write_r+0x1e>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200003a0 	.word	0x200003a0

08004d14 <__errno>:
 8004d14:	4b01      	ldr	r3, [pc, #4]	@ (8004d1c <__errno+0x8>)
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20000018 	.word	0x20000018

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	@ (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	@ (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	@ (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	@ (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 fd22 	bl	800577c <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08005908 	.word	0x08005908
 8004d5c:	08005908 	.word	0x08005908
 8004d60:	08005908 	.word	0x08005908
 8004d64:	0800590c 	.word	0x0800590c

08004d68 <__retarget_lock_init_recursive>:
 8004d68:	4770      	bx	lr

08004d6a <__retarget_lock_acquire_recursive>:
 8004d6a:	4770      	bx	lr

08004d6c <__retarget_lock_release_recursive>:
 8004d6c:	4770      	bx	lr
	...

08004d70 <_free_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d041      	beq.n	8004dfc <_free_r+0x8c>
 8004d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7c:	1f0c      	subs	r4, r1, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	bfb8      	it	lt
 8004d82:	18e4      	addlt	r4, r4, r3
 8004d84:	f000 f8e0 	bl	8004f48 <__malloc_lock>
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <_free_r+0x90>)
 8004d8a:	6813      	ldr	r3, [r2, #0]
 8004d8c:	b933      	cbnz	r3, 8004d9c <_free_r+0x2c>
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	6014      	str	r4, [r2, #0]
 8004d92:	4628      	mov	r0, r5
 8004d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d98:	f000 b8dc 	b.w	8004f54 <__malloc_unlock>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d908      	bls.n	8004db2 <_free_r+0x42>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf01      	itttt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	e7ed      	b.n	8004d8e <_free_r+0x1e>
 8004db2:	461a      	mov	r2, r3
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	b10b      	cbz	r3, 8004dbc <_free_r+0x4c>
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d9fa      	bls.n	8004db2 <_free_r+0x42>
 8004dbc:	6811      	ldr	r1, [r2, #0]
 8004dbe:	1850      	adds	r0, r2, r1
 8004dc0:	42a0      	cmp	r0, r4
 8004dc2:	d10b      	bne.n	8004ddc <_free_r+0x6c>
 8004dc4:	6820      	ldr	r0, [r4, #0]
 8004dc6:	4401      	add	r1, r0
 8004dc8:	1850      	adds	r0, r2, r1
 8004dca:	4283      	cmp	r3, r0
 8004dcc:	6011      	str	r1, [r2, #0]
 8004dce:	d1e0      	bne.n	8004d92 <_free_r+0x22>
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	6053      	str	r3, [r2, #4]
 8004dd6:	4408      	add	r0, r1
 8004dd8:	6010      	str	r0, [r2, #0]
 8004dda:	e7da      	b.n	8004d92 <_free_r+0x22>
 8004ddc:	d902      	bls.n	8004de4 <_free_r+0x74>
 8004dde:	230c      	movs	r3, #12
 8004de0:	602b      	str	r3, [r5, #0]
 8004de2:	e7d6      	b.n	8004d92 <_free_r+0x22>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	1821      	adds	r1, r4, r0
 8004de8:	428b      	cmp	r3, r1
 8004dea:	bf04      	itt	eq
 8004dec:	6819      	ldreq	r1, [r3, #0]
 8004dee:	685b      	ldreq	r3, [r3, #4]
 8004df0:	6063      	str	r3, [r4, #4]
 8004df2:	bf04      	itt	eq
 8004df4:	1809      	addeq	r1, r1, r0
 8004df6:	6021      	streq	r1, [r4, #0]
 8004df8:	6054      	str	r4, [r2, #4]
 8004dfa:	e7ca      	b.n	8004d92 <_free_r+0x22>
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	200003ac 	.word	0x200003ac

08004e04 <sbrk_aligned>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4e0f      	ldr	r6, [pc, #60]	@ (8004e44 <sbrk_aligned+0x40>)
 8004e08:	460c      	mov	r4, r1
 8004e0a:	6831      	ldr	r1, [r6, #0]
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	b911      	cbnz	r1, 8004e16 <sbrk_aligned+0x12>
 8004e10:	f000 fca4 	bl	800575c <_sbrk_r>
 8004e14:	6030      	str	r0, [r6, #0]
 8004e16:	4621      	mov	r1, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f000 fc9f 	bl	800575c <_sbrk_r>
 8004e1e:	1c43      	adds	r3, r0, #1
 8004e20:	d103      	bne.n	8004e2a <sbrk_aligned+0x26>
 8004e22:	f04f 34ff 	mov.w	r4, #4294967295
 8004e26:	4620      	mov	r0, r4
 8004e28:	bd70      	pop	{r4, r5, r6, pc}
 8004e2a:	1cc4      	adds	r4, r0, #3
 8004e2c:	f024 0403 	bic.w	r4, r4, #3
 8004e30:	42a0      	cmp	r0, r4
 8004e32:	d0f8      	beq.n	8004e26 <sbrk_aligned+0x22>
 8004e34:	1a21      	subs	r1, r4, r0
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fc90 	bl	800575c <_sbrk_r>
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d1f2      	bne.n	8004e26 <sbrk_aligned+0x22>
 8004e40:	e7ef      	b.n	8004e22 <sbrk_aligned+0x1e>
 8004e42:	bf00      	nop
 8004e44:	200003a8 	.word	0x200003a8

08004e48 <_malloc_r>:
 8004e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	1ccd      	adds	r5, r1, #3
 8004e4e:	f025 0503 	bic.w	r5, r5, #3
 8004e52:	3508      	adds	r5, #8
 8004e54:	2d0c      	cmp	r5, #12
 8004e56:	bf38      	it	cc
 8004e58:	250c      	movcc	r5, #12
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	4606      	mov	r6, r0
 8004e5e:	db01      	blt.n	8004e64 <_malloc_r+0x1c>
 8004e60:	42a9      	cmp	r1, r5
 8004e62:	d904      	bls.n	8004e6e <_malloc_r+0x26>
 8004e64:	230c      	movs	r3, #12
 8004e66:	6033      	str	r3, [r6, #0]
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f44 <_malloc_r+0xfc>
 8004e72:	f000 f869 	bl	8004f48 <__malloc_lock>
 8004e76:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7a:	461c      	mov	r4, r3
 8004e7c:	bb44      	cbnz	r4, 8004ed0 <_malloc_r+0x88>
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff ffbf 	bl	8004e04 <sbrk_aligned>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	4604      	mov	r4, r0
 8004e8a:	d158      	bne.n	8004f3e <_malloc_r+0xf6>
 8004e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8004e90:	4627      	mov	r7, r4
 8004e92:	2f00      	cmp	r7, #0
 8004e94:	d143      	bne.n	8004f1e <_malloc_r+0xd6>
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	d04b      	beq.n	8004f32 <_malloc_r+0xea>
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	4639      	mov	r1, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	eb04 0903 	add.w	r9, r4, r3
 8004ea4:	f000 fc5a 	bl	800575c <_sbrk_r>
 8004ea8:	4581      	cmp	r9, r0
 8004eaa:	d142      	bne.n	8004f32 <_malloc_r+0xea>
 8004eac:	6821      	ldr	r1, [r4, #0]
 8004eae:	1a6d      	subs	r5, r5, r1
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	f7ff ffa6 	bl	8004e04 <sbrk_aligned>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d03a      	beq.n	8004f32 <_malloc_r+0xea>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	442b      	add	r3, r5
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	bb62      	cbnz	r2, 8004f24 <_malloc_r+0xdc>
 8004eca:	f8c8 7000 	str.w	r7, [r8]
 8004ece:	e00f      	b.n	8004ef0 <_malloc_r+0xa8>
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	1b52      	subs	r2, r2, r5
 8004ed4:	d420      	bmi.n	8004f18 <_malloc_r+0xd0>
 8004ed6:	2a0b      	cmp	r2, #11
 8004ed8:	d917      	bls.n	8004f0a <_malloc_r+0xc2>
 8004eda:	1961      	adds	r1, r4, r5
 8004edc:	42a3      	cmp	r3, r4
 8004ede:	6025      	str	r5, [r4, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	6059      	strne	r1, [r3, #4]
 8004ee4:	6863      	ldr	r3, [r4, #4]
 8004ee6:	bf08      	it	eq
 8004ee8:	f8c8 1000 	streq.w	r1, [r8]
 8004eec:	5162      	str	r2, [r4, r5]
 8004eee:	604b      	str	r3, [r1, #4]
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f000 f82f 	bl	8004f54 <__malloc_unlock>
 8004ef6:	f104 000b 	add.w	r0, r4, #11
 8004efa:	1d23      	adds	r3, r4, #4
 8004efc:	f020 0007 	bic.w	r0, r0, #7
 8004f00:	1ac2      	subs	r2, r0, r3
 8004f02:	bf1c      	itt	ne
 8004f04:	1a1b      	subne	r3, r3, r0
 8004f06:	50a3      	strne	r3, [r4, r2]
 8004f08:	e7af      	b.n	8004e6a <_malloc_r+0x22>
 8004f0a:	6862      	ldr	r2, [r4, #4]
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	bf0c      	ite	eq
 8004f10:	f8c8 2000 	streq.w	r2, [r8]
 8004f14:	605a      	strne	r2, [r3, #4]
 8004f16:	e7eb      	b.n	8004ef0 <_malloc_r+0xa8>
 8004f18:	4623      	mov	r3, r4
 8004f1a:	6864      	ldr	r4, [r4, #4]
 8004f1c:	e7ae      	b.n	8004e7c <_malloc_r+0x34>
 8004f1e:	463c      	mov	r4, r7
 8004f20:	687f      	ldr	r7, [r7, #4]
 8004f22:	e7b6      	b.n	8004e92 <_malloc_r+0x4a>
 8004f24:	461a      	mov	r2, r3
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	d1fb      	bne.n	8004f24 <_malloc_r+0xdc>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6053      	str	r3, [r2, #4]
 8004f30:	e7de      	b.n	8004ef0 <_malloc_r+0xa8>
 8004f32:	230c      	movs	r3, #12
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	4630      	mov	r0, r6
 8004f38:	f000 f80c 	bl	8004f54 <__malloc_unlock>
 8004f3c:	e794      	b.n	8004e68 <_malloc_r+0x20>
 8004f3e:	6005      	str	r5, [r0, #0]
 8004f40:	e7d6      	b.n	8004ef0 <_malloc_r+0xa8>
 8004f42:	bf00      	nop
 8004f44:	200003ac 	.word	0x200003ac

08004f48 <__malloc_lock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	@ (8004f50 <__malloc_lock+0x8>)
 8004f4a:	f7ff bf0e 	b.w	8004d6a <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	200003a4 	.word	0x200003a4

08004f54 <__malloc_unlock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	@ (8004f5c <__malloc_unlock+0x8>)
 8004f56:	f7ff bf09 	b.w	8004d6c <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	200003a4 	.word	0x200003a4

08004f60 <__sfputc_r>:
 8004f60:	6893      	ldr	r3, [r2, #8]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	b410      	push	{r4}
 8004f68:	6093      	str	r3, [r2, #8]
 8004f6a:	da08      	bge.n	8004f7e <__sfputc_r+0x1e>
 8004f6c:	6994      	ldr	r4, [r2, #24]
 8004f6e:	42a3      	cmp	r3, r4
 8004f70:	db01      	blt.n	8004f76 <__sfputc_r+0x16>
 8004f72:	290a      	cmp	r1, #10
 8004f74:	d103      	bne.n	8004f7e <__sfputc_r+0x1e>
 8004f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f7a:	f7ff bde8 	b.w	8004b4e <__swbuf_r>
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	1c58      	adds	r0, r3, #1
 8004f82:	6010      	str	r0, [r2, #0]
 8004f84:	7019      	strb	r1, [r3, #0]
 8004f86:	4608      	mov	r0, r1
 8004f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <__sfputs_r>:
 8004f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f90:	4606      	mov	r6, r0
 8004f92:	460f      	mov	r7, r1
 8004f94:	4614      	mov	r4, r2
 8004f96:	18d5      	adds	r5, r2, r3
 8004f98:	42ac      	cmp	r4, r5
 8004f9a:	d101      	bne.n	8004fa0 <__sfputs_r+0x12>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e007      	b.n	8004fb0 <__sfputs_r+0x22>
 8004fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa4:	463a      	mov	r2, r7
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f7ff ffda 	bl	8004f60 <__sfputc_r>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d1f3      	bne.n	8004f98 <__sfputs_r+0xa>
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fb4 <_vfiprintf_r>:
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	460d      	mov	r5, r1
 8004fba:	b09d      	sub	sp, #116	@ 0x74
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	4698      	mov	r8, r3
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	b118      	cbz	r0, 8004fcc <_vfiprintf_r+0x18>
 8004fc4:	6a03      	ldr	r3, [r0, #32]
 8004fc6:	b90b      	cbnz	r3, 8004fcc <_vfiprintf_r+0x18>
 8004fc8:	f7ff fcd8 	bl	800497c <__sinit>
 8004fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fce:	07d9      	lsls	r1, r3, #31
 8004fd0:	d405      	bmi.n	8004fde <_vfiprintf_r+0x2a>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	059a      	lsls	r2, r3, #22
 8004fd6:	d402      	bmi.n	8004fde <_vfiprintf_r+0x2a>
 8004fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fda:	f7ff fec6 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	071b      	lsls	r3, r3, #28
 8004fe2:	d501      	bpl.n	8004fe8 <_vfiprintf_r+0x34>
 8004fe4:	692b      	ldr	r3, [r5, #16]
 8004fe6:	b99b      	cbnz	r3, 8005010 <_vfiprintf_r+0x5c>
 8004fe8:	4629      	mov	r1, r5
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff fdee 	bl	8004bcc <__swsetup_r>
 8004ff0:	b170      	cbz	r0, 8005010 <_vfiprintf_r+0x5c>
 8004ff2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ff4:	07dc      	lsls	r4, r3, #31
 8004ff6:	d504      	bpl.n	8005002 <_vfiprintf_r+0x4e>
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	b01d      	add	sp, #116	@ 0x74
 8004ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005002:	89ab      	ldrh	r3, [r5, #12]
 8005004:	0598      	lsls	r0, r3, #22
 8005006:	d4f7      	bmi.n	8004ff8 <_vfiprintf_r+0x44>
 8005008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800500a:	f7ff feaf 	bl	8004d6c <__retarget_lock_release_recursive>
 800500e:	e7f3      	b.n	8004ff8 <_vfiprintf_r+0x44>
 8005010:	2300      	movs	r3, #0
 8005012:	9309      	str	r3, [sp, #36]	@ 0x24
 8005014:	2320      	movs	r3, #32
 8005016:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800501a:	f8cd 800c 	str.w	r8, [sp, #12]
 800501e:	2330      	movs	r3, #48	@ 0x30
 8005020:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051d0 <_vfiprintf_r+0x21c>
 8005024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005028:	f04f 0901 	mov.w	r9, #1
 800502c:	4623      	mov	r3, r4
 800502e:	469a      	mov	sl, r3
 8005030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005034:	b10a      	cbz	r2, 800503a <_vfiprintf_r+0x86>
 8005036:	2a25      	cmp	r2, #37	@ 0x25
 8005038:	d1f9      	bne.n	800502e <_vfiprintf_r+0x7a>
 800503a:	ebba 0b04 	subs.w	fp, sl, r4
 800503e:	d00b      	beq.n	8005058 <_vfiprintf_r+0xa4>
 8005040:	465b      	mov	r3, fp
 8005042:	4622      	mov	r2, r4
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f7ff ffa1 	bl	8004f8e <__sfputs_r>
 800504c:	3001      	adds	r0, #1
 800504e:	f000 80a7 	beq.w	80051a0 <_vfiprintf_r+0x1ec>
 8005052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005054:	445a      	add	r2, fp
 8005056:	9209      	str	r2, [sp, #36]	@ 0x24
 8005058:	f89a 3000 	ldrb.w	r3, [sl]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 809f 	beq.w	80051a0 <_vfiprintf_r+0x1ec>
 8005062:	2300      	movs	r3, #0
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800506c:	f10a 0a01 	add.w	sl, sl, #1
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005078:	931a      	str	r3, [sp, #104]	@ 0x68
 800507a:	4654      	mov	r4, sl
 800507c:	2205      	movs	r2, #5
 800507e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005082:	4853      	ldr	r0, [pc, #332]	@ (80051d0 <_vfiprintf_r+0x21c>)
 8005084:	f7fb f8cc 	bl	8000220 <memchr>
 8005088:	9a04      	ldr	r2, [sp, #16]
 800508a:	b9d8      	cbnz	r0, 80050c4 <_vfiprintf_r+0x110>
 800508c:	06d1      	lsls	r1, r2, #27
 800508e:	bf44      	itt	mi
 8005090:	2320      	movmi	r3, #32
 8005092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005096:	0713      	lsls	r3, r2, #28
 8005098:	bf44      	itt	mi
 800509a:	232b      	movmi	r3, #43	@ 0x2b
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050a0:	f89a 3000 	ldrb.w	r3, [sl]
 80050a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a6:	d015      	beq.n	80050d4 <_vfiprintf_r+0x120>
 80050a8:	9a07      	ldr	r2, [sp, #28]
 80050aa:	4654      	mov	r4, sl
 80050ac:	2000      	movs	r0, #0
 80050ae:	f04f 0c0a 	mov.w	ip, #10
 80050b2:	4621      	mov	r1, r4
 80050b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b8:	3b30      	subs	r3, #48	@ 0x30
 80050ba:	2b09      	cmp	r3, #9
 80050bc:	d94b      	bls.n	8005156 <_vfiprintf_r+0x1a2>
 80050be:	b1b0      	cbz	r0, 80050ee <_vfiprintf_r+0x13a>
 80050c0:	9207      	str	r2, [sp, #28]
 80050c2:	e014      	b.n	80050ee <_vfiprintf_r+0x13a>
 80050c4:	eba0 0308 	sub.w	r3, r0, r8
 80050c8:	fa09 f303 	lsl.w	r3, r9, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	46a2      	mov	sl, r4
 80050d2:	e7d2      	b.n	800507a <_vfiprintf_r+0xc6>
 80050d4:	9b03      	ldr	r3, [sp, #12]
 80050d6:	1d19      	adds	r1, r3, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	9103      	str	r1, [sp, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfbb      	ittet	lt
 80050e0:	425b      	neglt	r3, r3
 80050e2:	f042 0202 	orrlt.w	r2, r2, #2
 80050e6:	9307      	strge	r3, [sp, #28]
 80050e8:	9307      	strlt	r3, [sp, #28]
 80050ea:	bfb8      	it	lt
 80050ec:	9204      	strlt	r2, [sp, #16]
 80050ee:	7823      	ldrb	r3, [r4, #0]
 80050f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80050f2:	d10a      	bne.n	800510a <_vfiprintf_r+0x156>
 80050f4:	7863      	ldrb	r3, [r4, #1]
 80050f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f8:	d132      	bne.n	8005160 <_vfiprintf_r+0x1ac>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	1d1a      	adds	r2, r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	9203      	str	r2, [sp, #12]
 8005102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005106:	3402      	adds	r4, #2
 8005108:	9305      	str	r3, [sp, #20]
 800510a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051e0 <_vfiprintf_r+0x22c>
 800510e:	7821      	ldrb	r1, [r4, #0]
 8005110:	2203      	movs	r2, #3
 8005112:	4650      	mov	r0, sl
 8005114:	f7fb f884 	bl	8000220 <memchr>
 8005118:	b138      	cbz	r0, 800512a <_vfiprintf_r+0x176>
 800511a:	9b04      	ldr	r3, [sp, #16]
 800511c:	eba0 000a 	sub.w	r0, r0, sl
 8005120:	2240      	movs	r2, #64	@ 0x40
 8005122:	4082      	lsls	r2, r0
 8005124:	4313      	orrs	r3, r2
 8005126:	3401      	adds	r4, #1
 8005128:	9304      	str	r3, [sp, #16]
 800512a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512e:	4829      	ldr	r0, [pc, #164]	@ (80051d4 <_vfiprintf_r+0x220>)
 8005130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005134:	2206      	movs	r2, #6
 8005136:	f7fb f873 	bl	8000220 <memchr>
 800513a:	2800      	cmp	r0, #0
 800513c:	d03f      	beq.n	80051be <_vfiprintf_r+0x20a>
 800513e:	4b26      	ldr	r3, [pc, #152]	@ (80051d8 <_vfiprintf_r+0x224>)
 8005140:	bb1b      	cbnz	r3, 800518a <_vfiprintf_r+0x1d6>
 8005142:	9b03      	ldr	r3, [sp, #12]
 8005144:	3307      	adds	r3, #7
 8005146:	f023 0307 	bic.w	r3, r3, #7
 800514a:	3308      	adds	r3, #8
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005150:	443b      	add	r3, r7
 8005152:	9309      	str	r3, [sp, #36]	@ 0x24
 8005154:	e76a      	b.n	800502c <_vfiprintf_r+0x78>
 8005156:	fb0c 3202 	mla	r2, ip, r2, r3
 800515a:	460c      	mov	r4, r1
 800515c:	2001      	movs	r0, #1
 800515e:	e7a8      	b.n	80050b2 <_vfiprintf_r+0xfe>
 8005160:	2300      	movs	r3, #0
 8005162:	3401      	adds	r4, #1
 8005164:	9305      	str	r3, [sp, #20]
 8005166:	4619      	mov	r1, r3
 8005168:	f04f 0c0a 	mov.w	ip, #10
 800516c:	4620      	mov	r0, r4
 800516e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005172:	3a30      	subs	r2, #48	@ 0x30
 8005174:	2a09      	cmp	r2, #9
 8005176:	d903      	bls.n	8005180 <_vfiprintf_r+0x1cc>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0c6      	beq.n	800510a <_vfiprintf_r+0x156>
 800517c:	9105      	str	r1, [sp, #20]
 800517e:	e7c4      	b.n	800510a <_vfiprintf_r+0x156>
 8005180:	fb0c 2101 	mla	r1, ip, r1, r2
 8005184:	4604      	mov	r4, r0
 8005186:	2301      	movs	r3, #1
 8005188:	e7f0      	b.n	800516c <_vfiprintf_r+0x1b8>
 800518a:	ab03      	add	r3, sp, #12
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	462a      	mov	r2, r5
 8005190:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <_vfiprintf_r+0x228>)
 8005192:	a904      	add	r1, sp, #16
 8005194:	4630      	mov	r0, r6
 8005196:	f3af 8000 	nop.w
 800519a:	4607      	mov	r7, r0
 800519c:	1c78      	adds	r0, r7, #1
 800519e:	d1d6      	bne.n	800514e <_vfiprintf_r+0x19a>
 80051a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051a2:	07d9      	lsls	r1, r3, #31
 80051a4:	d405      	bmi.n	80051b2 <_vfiprintf_r+0x1fe>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	059a      	lsls	r2, r3, #22
 80051aa:	d402      	bmi.n	80051b2 <_vfiprintf_r+0x1fe>
 80051ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051ae:	f7ff fddd 	bl	8004d6c <__retarget_lock_release_recursive>
 80051b2:	89ab      	ldrh	r3, [r5, #12]
 80051b4:	065b      	lsls	r3, r3, #25
 80051b6:	f53f af1f 	bmi.w	8004ff8 <_vfiprintf_r+0x44>
 80051ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051bc:	e71e      	b.n	8004ffc <_vfiprintf_r+0x48>
 80051be:	ab03      	add	r3, sp, #12
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	462a      	mov	r2, r5
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <_vfiprintf_r+0x228>)
 80051c6:	a904      	add	r1, sp, #16
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f879 	bl	80052c0 <_printf_i>
 80051ce:	e7e4      	b.n	800519a <_vfiprintf_r+0x1e6>
 80051d0:	080058cc 	.word	0x080058cc
 80051d4:	080058d6 	.word	0x080058d6
 80051d8:	00000000 	.word	0x00000000
 80051dc:	08004f8f 	.word	0x08004f8f
 80051e0:	080058d2 	.word	0x080058d2

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4698      	mov	r8, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005230:	6822      	ldr	r2, [r4, #0]
 8005232:	3b00      	subs	r3, #0
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005240:	4641      	mov	r1, r8
 8005242:	4638      	mov	r0, r7
 8005244:	47c8      	blx	r9
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf02      	ittt	eq
 8005256:	68e5      	ldreq	r5, [r4, #12]
 8005258:	6833      	ldreq	r3, [r6, #0]
 800525a:	1aed      	subeq	r5, r5, r3
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4641      	mov	r1, r8
 8005280:	4638      	mov	r0, r7
 8005282:	47c8      	blx	r9
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	@ 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4641      	mov	r1, r8
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c8      	blx	r9
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052c8:	2f78      	cmp	r7, #120	@ 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	@ 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d1 	beq.w	8005484 <_printf_i+0x1c4>
 80052e2:	2f58      	cmp	r7, #88	@ 0x58
 80052e4:	f000 80b8 	beq.w	8005458 <_printf_i+0x198>
 80052e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	@ (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	0800546b 	.word	0x0800546b
 8005330:	08005397 	.word	0x08005397
 8005334:	08005425 	.word	0x08005425
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	0800548d 	.word	0x0800548d
 8005344:	080052e9 	.word	0x080052e9
 8005348:	08005397 	.word	0x08005397
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	0800542d 	.word	0x0800542d
 8005358:	6833      	ldr	r3, [r6, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6032      	str	r2, [r6, #0]
 8005360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e09c      	b.n	80054a6 <_printf_i+0x1e6>
 800536c:	6833      	ldr	r3, [r6, #0]
 800536e:	6820      	ldr	r0, [r4, #0]
 8005370:	1d19      	adds	r1, r3, #4
 8005372:	6031      	str	r1, [r6, #0]
 8005374:	0606      	lsls	r6, r0, #24
 8005376:	d501      	bpl.n	800537c <_printf_i+0xbc>
 8005378:	681d      	ldr	r5, [r3, #0]
 800537a:	e003      	b.n	8005384 <_printf_i+0xc4>
 800537c:	0645      	lsls	r5, r0, #25
 800537e:	d5fb      	bpl.n	8005378 <_printf_i+0xb8>
 8005380:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005384:	2d00      	cmp	r5, #0
 8005386:	da03      	bge.n	8005390 <_printf_i+0xd0>
 8005388:	232d      	movs	r3, #45	@ 0x2d
 800538a:	426d      	negs	r5, r5
 800538c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005390:	4858      	ldr	r0, [pc, #352]	@ (80054f4 <_printf_i+0x234>)
 8005392:	230a      	movs	r3, #10
 8005394:	e011      	b.n	80053ba <_printf_i+0xfa>
 8005396:	6821      	ldr	r1, [r4, #0]
 8005398:	6833      	ldr	r3, [r6, #0]
 800539a:	0608      	lsls	r0, r1, #24
 800539c:	f853 5b04 	ldr.w	r5, [r3], #4
 80053a0:	d402      	bmi.n	80053a8 <_printf_i+0xe8>
 80053a2:	0649      	lsls	r1, r1, #25
 80053a4:	bf48      	it	mi
 80053a6:	b2ad      	uxthmi	r5, r5
 80053a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80053aa:	4852      	ldr	r0, [pc, #328]	@ (80054f4 <_printf_i+0x234>)
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	bf14      	ite	ne
 80053b0:	230a      	movne	r3, #10
 80053b2:	2308      	moveq	r3, #8
 80053b4:	2100      	movs	r1, #0
 80053b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053ba:	6866      	ldr	r6, [r4, #4]
 80053bc:	60a6      	str	r6, [r4, #8]
 80053be:	2e00      	cmp	r6, #0
 80053c0:	db05      	blt.n	80053ce <_printf_i+0x10e>
 80053c2:	6821      	ldr	r1, [r4, #0]
 80053c4:	432e      	orrs	r6, r5
 80053c6:	f021 0104 	bic.w	r1, r1, #4
 80053ca:	6021      	str	r1, [r4, #0]
 80053cc:	d04b      	beq.n	8005466 <_printf_i+0x1a6>
 80053ce:	4616      	mov	r6, r2
 80053d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80053d4:	fb03 5711 	mls	r7, r3, r1, r5
 80053d8:	5dc7      	ldrb	r7, [r0, r7]
 80053da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053de:	462f      	mov	r7, r5
 80053e0:	42bb      	cmp	r3, r7
 80053e2:	460d      	mov	r5, r1
 80053e4:	d9f4      	bls.n	80053d0 <_printf_i+0x110>
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d10b      	bne.n	8005402 <_printf_i+0x142>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	07df      	lsls	r7, r3, #31
 80053ee:	d508      	bpl.n	8005402 <_printf_i+0x142>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	6861      	ldr	r1, [r4, #4]
 80053f4:	4299      	cmp	r1, r3
 80053f6:	bfde      	ittt	le
 80053f8:	2330      	movle	r3, #48	@ 0x30
 80053fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005402:	1b92      	subs	r2, r2, r6
 8005404:	6122      	str	r2, [r4, #16]
 8005406:	f8cd a000 	str.w	sl, [sp]
 800540a:	464b      	mov	r3, r9
 800540c:	aa03      	add	r2, sp, #12
 800540e:	4621      	mov	r1, r4
 8005410:	4640      	mov	r0, r8
 8005412:	f7ff fee7 	bl	80051e4 <_printf_common>
 8005416:	3001      	adds	r0, #1
 8005418:	d14a      	bne.n	80054b0 <_printf_i+0x1f0>
 800541a:	f04f 30ff 	mov.w	r0, #4294967295
 800541e:	b004      	add	sp, #16
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	f043 0320 	orr.w	r3, r3, #32
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	4832      	ldr	r0, [pc, #200]	@ (80054f8 <_printf_i+0x238>)
 800542e:	2778      	movs	r7, #120	@ 0x78
 8005430:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	6831      	ldr	r1, [r6, #0]
 8005438:	061f      	lsls	r7, r3, #24
 800543a:	f851 5b04 	ldr.w	r5, [r1], #4
 800543e:	d402      	bmi.n	8005446 <_printf_i+0x186>
 8005440:	065f      	lsls	r7, r3, #25
 8005442:	bf48      	it	mi
 8005444:	b2ad      	uxthmi	r5, r5
 8005446:	6031      	str	r1, [r6, #0]
 8005448:	07d9      	lsls	r1, r3, #31
 800544a:	bf44      	itt	mi
 800544c:	f043 0320 	orrmi.w	r3, r3, #32
 8005450:	6023      	strmi	r3, [r4, #0]
 8005452:	b11d      	cbz	r5, 800545c <_printf_i+0x19c>
 8005454:	2310      	movs	r3, #16
 8005456:	e7ad      	b.n	80053b4 <_printf_i+0xf4>
 8005458:	4826      	ldr	r0, [pc, #152]	@ (80054f4 <_printf_i+0x234>)
 800545a:	e7e9      	b.n	8005430 <_printf_i+0x170>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	e7f6      	b.n	8005454 <_printf_i+0x194>
 8005466:	4616      	mov	r6, r2
 8005468:	e7bd      	b.n	80053e6 <_printf_i+0x126>
 800546a:	6833      	ldr	r3, [r6, #0]
 800546c:	6825      	ldr	r5, [r4, #0]
 800546e:	6961      	ldr	r1, [r4, #20]
 8005470:	1d18      	adds	r0, r3, #4
 8005472:	6030      	str	r0, [r6, #0]
 8005474:	062e      	lsls	r6, r5, #24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	d501      	bpl.n	800547e <_printf_i+0x1be>
 800547a:	6019      	str	r1, [r3, #0]
 800547c:	e002      	b.n	8005484 <_printf_i+0x1c4>
 800547e:	0668      	lsls	r0, r5, #25
 8005480:	d5fb      	bpl.n	800547a <_printf_i+0x1ba>
 8005482:	8019      	strh	r1, [r3, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	4616      	mov	r6, r2
 800548a:	e7bc      	b.n	8005406 <_printf_i+0x146>
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	6032      	str	r2, [r6, #0]
 8005492:	681e      	ldr	r6, [r3, #0]
 8005494:	6862      	ldr	r2, [r4, #4]
 8005496:	2100      	movs	r1, #0
 8005498:	4630      	mov	r0, r6
 800549a:	f7fa fec1 	bl	8000220 <memchr>
 800549e:	b108      	cbz	r0, 80054a4 <_printf_i+0x1e4>
 80054a0:	1b80      	subs	r0, r0, r6
 80054a2:	6060      	str	r0, [r4, #4]
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	6123      	str	r3, [r4, #16]
 80054a8:	2300      	movs	r3, #0
 80054aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ae:	e7aa      	b.n	8005406 <_printf_i+0x146>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	4632      	mov	r2, r6
 80054b4:	4649      	mov	r1, r9
 80054b6:	4640      	mov	r0, r8
 80054b8:	47d0      	blx	sl
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0ad      	beq.n	800541a <_printf_i+0x15a>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	079b      	lsls	r3, r3, #30
 80054c2:	d413      	bmi.n	80054ec <_printf_i+0x22c>
 80054c4:	68e0      	ldr	r0, [r4, #12]
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	4298      	cmp	r0, r3
 80054ca:	bfb8      	it	lt
 80054cc:	4618      	movlt	r0, r3
 80054ce:	e7a6      	b.n	800541e <_printf_i+0x15e>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4632      	mov	r2, r6
 80054d4:	4649      	mov	r1, r9
 80054d6:	4640      	mov	r0, r8
 80054d8:	47d0      	blx	sl
 80054da:	3001      	adds	r0, #1
 80054dc:	d09d      	beq.n	800541a <_printf_i+0x15a>
 80054de:	3501      	adds	r5, #1
 80054e0:	68e3      	ldr	r3, [r4, #12]
 80054e2:	9903      	ldr	r1, [sp, #12]
 80054e4:	1a5b      	subs	r3, r3, r1
 80054e6:	42ab      	cmp	r3, r5
 80054e8:	dcf2      	bgt.n	80054d0 <_printf_i+0x210>
 80054ea:	e7eb      	b.n	80054c4 <_printf_i+0x204>
 80054ec:	2500      	movs	r5, #0
 80054ee:	f104 0619 	add.w	r6, r4, #25
 80054f2:	e7f5      	b.n	80054e0 <_printf_i+0x220>
 80054f4:	080058dd 	.word	0x080058dd
 80054f8:	080058ee 	.word	0x080058ee

080054fc <__sflush_r>:
 80054fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005504:	0716      	lsls	r6, r2, #28
 8005506:	4605      	mov	r5, r0
 8005508:	460c      	mov	r4, r1
 800550a:	d454      	bmi.n	80055b6 <__sflush_r+0xba>
 800550c:	684b      	ldr	r3, [r1, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	dc02      	bgt.n	8005518 <__sflush_r+0x1c>
 8005512:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	dd48      	ble.n	80055aa <__sflush_r+0xae>
 8005518:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800551a:	2e00      	cmp	r6, #0
 800551c:	d045      	beq.n	80055aa <__sflush_r+0xae>
 800551e:	2300      	movs	r3, #0
 8005520:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005524:	682f      	ldr	r7, [r5, #0]
 8005526:	6a21      	ldr	r1, [r4, #32]
 8005528:	602b      	str	r3, [r5, #0]
 800552a:	d030      	beq.n	800558e <__sflush_r+0x92>
 800552c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	0759      	lsls	r1, r3, #29
 8005532:	d505      	bpl.n	8005540 <__sflush_r+0x44>
 8005534:	6863      	ldr	r3, [r4, #4]
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800553a:	b10b      	cbz	r3, 8005540 <__sflush_r+0x44>
 800553c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	2300      	movs	r3, #0
 8005542:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005544:	6a21      	ldr	r1, [r4, #32]
 8005546:	4628      	mov	r0, r5
 8005548:	47b0      	blx	r6
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	89a3      	ldrh	r3, [r4, #12]
 800554e:	d106      	bne.n	800555e <__sflush_r+0x62>
 8005550:	6829      	ldr	r1, [r5, #0]
 8005552:	291d      	cmp	r1, #29
 8005554:	d82b      	bhi.n	80055ae <__sflush_r+0xb2>
 8005556:	4a2a      	ldr	r2, [pc, #168]	@ (8005600 <__sflush_r+0x104>)
 8005558:	40ca      	lsrs	r2, r1
 800555a:	07d6      	lsls	r6, r2, #31
 800555c:	d527      	bpl.n	80055ae <__sflush_r+0xb2>
 800555e:	2200      	movs	r2, #0
 8005560:	6062      	str	r2, [r4, #4]
 8005562:	04d9      	lsls	r1, r3, #19
 8005564:	6922      	ldr	r2, [r4, #16]
 8005566:	6022      	str	r2, [r4, #0]
 8005568:	d504      	bpl.n	8005574 <__sflush_r+0x78>
 800556a:	1c42      	adds	r2, r0, #1
 800556c:	d101      	bne.n	8005572 <__sflush_r+0x76>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	b903      	cbnz	r3, 8005574 <__sflush_r+0x78>
 8005572:	6560      	str	r0, [r4, #84]	@ 0x54
 8005574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005576:	602f      	str	r7, [r5, #0]
 8005578:	b1b9      	cbz	r1, 80055aa <__sflush_r+0xae>
 800557a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800557e:	4299      	cmp	r1, r3
 8005580:	d002      	beq.n	8005588 <__sflush_r+0x8c>
 8005582:	4628      	mov	r0, r5
 8005584:	f7ff fbf4 	bl	8004d70 <_free_r>
 8005588:	2300      	movs	r3, #0
 800558a:	6363      	str	r3, [r4, #52]	@ 0x34
 800558c:	e00d      	b.n	80055aa <__sflush_r+0xae>
 800558e:	2301      	movs	r3, #1
 8005590:	4628      	mov	r0, r5
 8005592:	47b0      	blx	r6
 8005594:	4602      	mov	r2, r0
 8005596:	1c50      	adds	r0, r2, #1
 8005598:	d1c9      	bne.n	800552e <__sflush_r+0x32>
 800559a:	682b      	ldr	r3, [r5, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0c6      	beq.n	800552e <__sflush_r+0x32>
 80055a0:	2b1d      	cmp	r3, #29
 80055a2:	d001      	beq.n	80055a8 <__sflush_r+0xac>
 80055a4:	2b16      	cmp	r3, #22
 80055a6:	d11e      	bne.n	80055e6 <__sflush_r+0xea>
 80055a8:	602f      	str	r7, [r5, #0]
 80055aa:	2000      	movs	r0, #0
 80055ac:	e022      	b.n	80055f4 <__sflush_r+0xf8>
 80055ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	e01b      	b.n	80055ee <__sflush_r+0xf2>
 80055b6:	690f      	ldr	r7, [r1, #16]
 80055b8:	2f00      	cmp	r7, #0
 80055ba:	d0f6      	beq.n	80055aa <__sflush_r+0xae>
 80055bc:	0793      	lsls	r3, r2, #30
 80055be:	680e      	ldr	r6, [r1, #0]
 80055c0:	bf08      	it	eq
 80055c2:	694b      	ldreq	r3, [r1, #20]
 80055c4:	600f      	str	r7, [r1, #0]
 80055c6:	bf18      	it	ne
 80055c8:	2300      	movne	r3, #0
 80055ca:	eba6 0807 	sub.w	r8, r6, r7
 80055ce:	608b      	str	r3, [r1, #8]
 80055d0:	f1b8 0f00 	cmp.w	r8, #0
 80055d4:	dde9      	ble.n	80055aa <__sflush_r+0xae>
 80055d6:	6a21      	ldr	r1, [r4, #32]
 80055d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055da:	4643      	mov	r3, r8
 80055dc:	463a      	mov	r2, r7
 80055de:	4628      	mov	r0, r5
 80055e0:	47b0      	blx	r6
 80055e2:	2800      	cmp	r0, #0
 80055e4:	dc08      	bgt.n	80055f8 <__sflush_r+0xfc>
 80055e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f8:	4407      	add	r7, r0
 80055fa:	eba8 0800 	sub.w	r8, r8, r0
 80055fe:	e7e7      	b.n	80055d0 <__sflush_r+0xd4>
 8005600:	20400001 	.word	0x20400001

08005604 <_fflush_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	690b      	ldr	r3, [r1, #16]
 8005608:	4605      	mov	r5, r0
 800560a:	460c      	mov	r4, r1
 800560c:	b913      	cbnz	r3, 8005614 <_fflush_r+0x10>
 800560e:	2500      	movs	r5, #0
 8005610:	4628      	mov	r0, r5
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	b118      	cbz	r0, 800561e <_fflush_r+0x1a>
 8005616:	6a03      	ldr	r3, [r0, #32]
 8005618:	b90b      	cbnz	r3, 800561e <_fflush_r+0x1a>
 800561a:	f7ff f9af 	bl	800497c <__sinit>
 800561e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f3      	beq.n	800560e <_fflush_r+0xa>
 8005626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005628:	07d0      	lsls	r0, r2, #31
 800562a:	d404      	bmi.n	8005636 <_fflush_r+0x32>
 800562c:	0599      	lsls	r1, r3, #22
 800562e:	d402      	bmi.n	8005636 <_fflush_r+0x32>
 8005630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005632:	f7ff fb9a 	bl	8004d6a <__retarget_lock_acquire_recursive>
 8005636:	4628      	mov	r0, r5
 8005638:	4621      	mov	r1, r4
 800563a:	f7ff ff5f 	bl	80054fc <__sflush_r>
 800563e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005640:	07da      	lsls	r2, r3, #31
 8005642:	4605      	mov	r5, r0
 8005644:	d4e4      	bmi.n	8005610 <_fflush_r+0xc>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	059b      	lsls	r3, r3, #22
 800564a:	d4e1      	bmi.n	8005610 <_fflush_r+0xc>
 800564c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800564e:	f7ff fb8d 	bl	8004d6c <__retarget_lock_release_recursive>
 8005652:	e7dd      	b.n	8005610 <_fflush_r+0xc>

08005654 <__swhatbuf_r>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	460c      	mov	r4, r1
 8005658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800565c:	2900      	cmp	r1, #0
 800565e:	b096      	sub	sp, #88	@ 0x58
 8005660:	4615      	mov	r5, r2
 8005662:	461e      	mov	r6, r3
 8005664:	da0d      	bge.n	8005682 <__swhatbuf_r+0x2e>
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	bf14      	ite	ne
 8005672:	2340      	movne	r3, #64	@ 0x40
 8005674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005678:	2000      	movs	r0, #0
 800567a:	6031      	str	r1, [r6, #0]
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	b016      	add	sp, #88	@ 0x58
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	466a      	mov	r2, sp
 8005684:	f000 f848 	bl	8005718 <_fstat_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	dbec      	blt.n	8005666 <__swhatbuf_r+0x12>
 800568c:	9901      	ldr	r1, [sp, #4]
 800568e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005696:	4259      	negs	r1, r3
 8005698:	4159      	adcs	r1, r3
 800569a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800569e:	e7eb      	b.n	8005678 <__swhatbuf_r+0x24>

080056a0 <__smakebuf_r>:
 80056a0:	898b      	ldrh	r3, [r1, #12]
 80056a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056a4:	079d      	lsls	r5, r3, #30
 80056a6:	4606      	mov	r6, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	d507      	bpl.n	80056bc <__smakebuf_r+0x1c>
 80056ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056b0:	6023      	str	r3, [r4, #0]
 80056b2:	6123      	str	r3, [r4, #16]
 80056b4:	2301      	movs	r3, #1
 80056b6:	6163      	str	r3, [r4, #20]
 80056b8:	b003      	add	sp, #12
 80056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056bc:	ab01      	add	r3, sp, #4
 80056be:	466a      	mov	r2, sp
 80056c0:	f7ff ffc8 	bl	8005654 <__swhatbuf_r>
 80056c4:	9f00      	ldr	r7, [sp, #0]
 80056c6:	4605      	mov	r5, r0
 80056c8:	4639      	mov	r1, r7
 80056ca:	4630      	mov	r0, r6
 80056cc:	f7ff fbbc 	bl	8004e48 <_malloc_r>
 80056d0:	b948      	cbnz	r0, 80056e6 <__smakebuf_r+0x46>
 80056d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056d6:	059a      	lsls	r2, r3, #22
 80056d8:	d4ee      	bmi.n	80056b8 <__smakebuf_r+0x18>
 80056da:	f023 0303 	bic.w	r3, r3, #3
 80056de:	f043 0302 	orr.w	r3, r3, #2
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	e7e2      	b.n	80056ac <__smakebuf_r+0xc>
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	6020      	str	r0, [r4, #0]
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	9b01      	ldr	r3, [sp, #4]
 80056f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056f6:	b15b      	cbz	r3, 8005710 <__smakebuf_r+0x70>
 80056f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056fc:	4630      	mov	r0, r6
 80056fe:	f000 f81d 	bl	800573c <_isatty_r>
 8005702:	b128      	cbz	r0, 8005710 <__smakebuf_r+0x70>
 8005704:	89a3      	ldrh	r3, [r4, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	89a3      	ldrh	r3, [r4, #12]
 8005712:	431d      	orrs	r5, r3
 8005714:	81a5      	strh	r5, [r4, #12]
 8005716:	e7cf      	b.n	80056b8 <__smakebuf_r+0x18>

08005718 <_fstat_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4d07      	ldr	r5, [pc, #28]	@ (8005738 <_fstat_r+0x20>)
 800571c:	2300      	movs	r3, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	f7fb fbce 	bl	8000ec6 <_fstat>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d102      	bne.n	8005734 <_fstat_r+0x1c>
 800572e:	682b      	ldr	r3, [r5, #0]
 8005730:	b103      	cbz	r3, 8005734 <_fstat_r+0x1c>
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	bd38      	pop	{r3, r4, r5, pc}
 8005736:	bf00      	nop
 8005738:	200003a0 	.word	0x200003a0

0800573c <_isatty_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d06      	ldr	r5, [pc, #24]	@ (8005758 <_isatty_r+0x1c>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fb fbcd 	bl	8000ee6 <_isatty>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_isatty_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_isatty_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	200003a0 	.word	0x200003a0

0800575c <_sbrk_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d06      	ldr	r5, [pc, #24]	@ (8005778 <_sbrk_r+0x1c>)
 8005760:	2300      	movs	r3, #0
 8005762:	4604      	mov	r4, r0
 8005764:	4608      	mov	r0, r1
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	f7fb fbd6 	bl	8000f18 <_sbrk>
 800576c:	1c43      	adds	r3, r0, #1
 800576e:	d102      	bne.n	8005776 <_sbrk_r+0x1a>
 8005770:	682b      	ldr	r3, [r5, #0]
 8005772:	b103      	cbz	r3, 8005776 <_sbrk_r+0x1a>
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	bd38      	pop	{r3, r4, r5, pc}
 8005778:	200003a0 	.word	0x200003a0

0800577c <_init>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	bf00      	nop
 8005780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005782:	bc08      	pop	{r3}
 8005784:	469e      	mov	lr, r3
 8005786:	4770      	bx	lr

08005788 <_fini>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr
