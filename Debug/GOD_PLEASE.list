
GOD_PLEASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005658  08005658  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005658  08005658  00006658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005660  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000068  080056c8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080056c8  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001133b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002464  00000000  00000000  000183d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0001a838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b40  00000000  00000000  0001b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbf2  00000000  00000000  0001c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cf5  00000000  00000000  0003be1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6f4c  00000000  00000000  0004cb0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113a5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044d4  00000000  00000000  00113aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00117f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005500 	.word	0x08005500

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005500 	.word	0x08005500

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fcd2 	bl	8000f9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f8db 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */




  TxHeader.Identifier = 0x123;
 80005fa:	4b60      	ldr	r3, [pc, #384]	@ (800077c <main+0x190>)
 80005fc:	f240 1223 	movw	r2, #291	@ 0x123
 8000600:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000602:	4b5e      	ldr	r3, [pc, #376]	@ (800077c <main+0x190>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000608:	4b5c      	ldr	r3, [pc, #368]	@ (800077c <main+0x190>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 800060e:	4b5b      	ldr	r3, [pc, #364]	@ (800077c <main+0x190>)
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000614:	4b59      	ldr	r3, [pc, #356]	@ (800077c <main+0x190>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800061a:	4b58      	ldr	r3, [pc, #352]	@ (800077c <main+0x190>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000620:	4b56      	ldr	r3, [pc, #344]	@ (800077c <main+0x190>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000626:	4b55      	ldr	r3, [pc, #340]	@ (800077c <main+0x190>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 800062c:	4b53      	ldr	r3, [pc, #332]	@ (800077c <main+0x190>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f9df 	bl	80009f4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000636:	f000 f907 	bl	8000848 <MX_FDCAN1_Init>

  //MX_WWDG_Init();
  MX_SPI1_Init();
 800063a:	f000 f94b 	bl	80008d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800063e:	f000 f987 	bl	8000950 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_FDCAN_Start(&hfdcan1);
  //HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
  lastCANMessageTick = HAL_GetTick();
 8000642:	f000 fd0f 	bl	8001064 <HAL_GetTick>
 8000646:	4603      	mov	r3, r0
 8000648:	4a4d      	ldr	r2, [pc, #308]	@ (8000780 <main+0x194>)
 800064a:	6013      	str	r3, [r2, #0]
  printf("USART2 printf redirect working!\r\n");
 800064c:	484d      	ldr	r0, [pc, #308]	@ (8000784 <main+0x198>)
 800064e:	f004 f8f5 	bl	800483c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, dummyData);
 8000652:	4a4d      	ldr	r2, [pc, #308]	@ (8000788 <main+0x19c>)
 8000654:	4949      	ldr	r1, [pc, #292]	@ (800077c <main+0x190>)
 8000656:	484d      	ldr	r0, [pc, #308]	@ (800078c <main+0x1a0>)
 8000658:	f000 ff9c 	bl	8001594 <HAL_FDCAN_AddMessageToTxFifoQ>
	  HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
	  HAL_Delay(500);
	  HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_RESET);
	  HAL_Delay(500);
	  */
	  uint32_t currentTick = HAL_GetTick();
 800065c:	f000 fd02 	bl	8001064 <HAL_GetTick>
 8000660:	60f8      	str	r0, [r7, #12]
	  uint32_t psr = hfdcan1.Instance->PSR;
 8000662:	4b4a      	ldr	r3, [pc, #296]	@ (800078c <main+0x1a0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000668:	60bb      	str	r3, [r7, #8]
	  uint8_t lec = psr & 0x7;
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	71fb      	strb	r3, [r7, #7]
	  printf("LEC: 0x%02X\r\n", lec);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4619      	mov	r1, r3
 8000678:	4845      	ldr	r0, [pc, #276]	@ (8000790 <main+0x1a4>)
 800067a:	f004 f877 	bl	800476c <iprintf>
	  if ((currentTick - lastCANMessageTick) > CAN_TIMEOUT_MS){
 800067e:	4b40      	ldr	r3, [pc, #256]	@ (8000780 <main+0x194>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800068a:	4293      	cmp	r3, r2
 800068c:	d909      	bls.n	80006a2 <main+0xb6>
	          //printf("CAN timeout occurred!\n");
	          HAL_GPIO_WritePin(GPIOA,PIN3_Pin,GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000698:	f001 fcc4 	bl	8002024 <HAL_GPIO_WritePin>
	          sendSPIMessage(FAULT_CAN_TIMEOUT);
 800069c:	20a4      	movs	r0, #164	@ 0xa4
 800069e:	f000 f9db 	bl	8000a58 <sendSPIMessage>
	          // Optional: Reset system
	          ///NVIC_SystemReset();
	  }
	  if ((hfdcan1.Instance->PSR & FDCAN_PSR_BO) != 0){
 80006a2:	4b3a      	ldr	r3, [pc, #232]	@ (800078c <main+0x1a0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00c      	beq.n	80006ca <main+0xde>
	  	    // Bus Off = severe fault (e.g., shorted lines)
	  	    HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET); // Indicate fault
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ba:	f001 fcb3 	bl	8002024 <HAL_GPIO_WritePin>
	  	    sendSPIMessage(FAULT_BUS_OFF);
 80006be:	20a5      	movs	r0, #165	@ 0xa5
 80006c0:	f000 f9ca 	bl	8000a58 <sendSPIMessage>
	  	    printf("short!!!");
 80006c4:	4833      	ldr	r0, [pc, #204]	@ (8000794 <main+0x1a8>)
 80006c6:	f004 f851 	bl	800476c <iprintf>
	  }
	  if ((currentTick - lastRateCheckTick) > RATE_CHECK_WINDOW_MS) {
 80006ca:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <main+0x1ac>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d918      	bls.n	800070c <main+0x120>
	      if (canMessageCount > MAX_EXPECTED_MSGS) {
 80006da:	4b30      	ldr	r3, [pc, #192]	@ (800079c <main+0x1b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d90c      	bls.n	8000700 <main+0x114>
	          printf("Blabbering idiot fault detected!\n");
 80006e6:	482e      	ldr	r0, [pc, #184]	@ (80007a0 <main+0x1b4>)
 80006e8:	f004 f8a8 	bl	800483c <puts>
	          HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f6:	f001 fc95 	bl	8002024 <HAL_GPIO_WritePin>
	          sendSPIMessage(FAULT_ACK_ERROR);
 80006fa:	20a1      	movs	r0, #161	@ 0xa1
 80006fc:	f000 f9ac 	bl	8000a58 <sendSPIMessage>
	      }
	      canMessageCount = 0;
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <main+0x1b0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	      lastRateCheckTick = currentTick;
 8000706:	4a24      	ldr	r2, [pc, #144]	@ (8000798 <main+0x1ac>)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6013      	str	r3, [r2, #0]
	  }
	  switch(lec){
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b03      	cmp	r3, #3
 8000710:	d022      	beq.n	8000758 <main+0x16c>
 8000712:	2b03      	cmp	r3, #3
 8000714:	dc2e      	bgt.n	8000774 <main+0x188>
 8000716:	2b01      	cmp	r3, #1
 8000718:	d002      	beq.n	8000720 <main+0x134>
 800071a:	2b02      	cmp	r3, #2
 800071c:	d00e      	beq.n	800073c <main+0x150>
 800071e:	e029      	b.n	8000774 <main+0x188>
	  	  case 0x1:
	  		  printf("Stuff error\n");
 8000720:	4820      	ldr	r0, [pc, #128]	@ (80007a4 <main+0x1b8>)
 8000722:	f004 f88b 	bl	800483c <puts>
	  		  HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
 8000726:	2201      	movs	r2, #1
 8000728:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000730:	f001 fc78 	bl	8002024 <HAL_GPIO_WritePin>
	  		  sendSPIMessage(FAULT_STUFF_ERROR);
 8000734:	20a2      	movs	r0, #162	@ 0xa2
 8000736:	f000 f98f 	bl	8000a58 <sendSPIMessage>
	  		  break;
 800073a:	e01b      	b.n	8000774 <main+0x188>
	  	  case 0x2:
	  		  printf("Form error\n");
 800073c:	481a      	ldr	r0, [pc, #104]	@ (80007a8 <main+0x1bc>)
 800073e:	f004 f87d 	bl	800483c <puts>
	  		  HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000748:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800074c:	f001 fc6a 	bl	8002024 <HAL_GPIO_WritePin>
	  		  sendSPIMessage(FAULT_FORM_ERROR);
 8000750:	20a3      	movs	r0, #163	@ 0xa3
 8000752:	f000 f981 	bl	8000a58 <sendSPIMessage>
	  		  break;
 8000756:	e00d      	b.n	8000774 <main+0x188>
	  	  case 0x3:
	  		  printf("ACK error (likely no other node)\n");
 8000758:	4814      	ldr	r0, [pc, #80]	@ (80007ac <main+0x1c0>)
 800075a:	f004 f86f 	bl	800483c <puts>
	  		  HAL_GPIO_WritePin(GPIOA, PIN8_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000768:	f001 fc5c 	bl	8002024 <HAL_GPIO_WritePin>
	  		  sendSPIMessage(FAULT_ACK_ERROR);
 800076c:	20a1      	movs	r0, #161	@ 0xa1
 800076e:	f000 f973 	bl	8000a58 <sendSPIMessage>
	  		  break;
 8000772:	bf00      	nop
	  }
	  HAL_Delay(5);
 8000774:	2005      	movs	r0, #5
 8000776:	f000 fc81 	bl	800107c <HAL_Delay>
  {
 800077a:	e76a      	b.n	8000652 <main+0x66>
 800077c:	20000200 	.word	0x20000200
 8000780:	200001f4 	.word	0x200001f4
 8000784:	08005518 	.word	0x08005518
 8000788:	20000224 	.word	0x20000224
 800078c:	20000084 	.word	0x20000084
 8000790:	0800553c 	.word	0x0800553c
 8000794:	0800554c 	.word	0x0800554c
 8000798:	200001fc 	.word	0x200001fc
 800079c:	200001f8 	.word	0x200001f8
 80007a0:	08005558 	.word	0x08005558
 80007a4:	0800557c 	.word	0x0800557c
 80007a8:	08005588 	.word	0x08005588
 80007ac:	08005594 	.word	0x08005594

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	@ 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	2238      	movs	r2, #56	@ 0x38
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f91c 	bl	80049fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007d6:	f001 fc3d 	bl	8002054 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007f4:	230a      	movs	r3, #10
 80007f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fcd7 	bl	80021bc <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000814:	f000 f966 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f001 ffd5 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800083c:	f000 f952 	bl	8000ae4 <Error_Handler>
  }
}
 8000840:	bf00      	nop
 8000842:	3750      	adds	r7, #80	@ 0x50
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 800084e:	4a20      	ldr	r2, [pc, #128]	@ (80008d0 <MX_FDCAN1_Init+0x88>)
 8000850:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000854:	2200      	movs	r2, #0
 8000856:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000858:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000864:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000866:	2200      	movs	r2, #0
 8000868:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 800086c:	2200      	movs	r2, #0
 800086e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000870:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000872:	2200      	movs	r2, #0
 8000874:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000878:	220a      	movs	r2, #10
 800087a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800087c:	4b13      	ldr	r3, [pc, #76]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 800087e:	2201      	movs	r2, #1
 8000880:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000882:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000884:	220d      	movs	r2, #13
 8000886:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000888:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 800088a:	2202      	movs	r2, #2
 800088c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800088e:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000890:	2201      	movs	r2, #1
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000894:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 8000896:	2201      	movs	r2, #1
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 800089c:	2201      	movs	r2, #1
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_FDCAN1_Init+0x84>)
 80008ba:	f000 fd11 	bl	80012e0 <HAL_FDCAN_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80008c4:	f000 f90e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000084 	.word	0x20000084
 80008d0:	40006400 	.word	0x40006400

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008da:	4a1c      	ldr	r2, [pc, #112]	@ (800094c <MX_SPI1_Init+0x78>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008ee:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000906:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_SPI1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000922:	2207      	movs	r2, #7
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_SPI1_Init+0x74>)
 800092e:	2208      	movs	r2, #8
 8000930:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_SPI1_Init+0x74>)
 8000934:	f002 fbac 	bl	8003090 <HAL_SPI_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800093e:	f000 f8d1 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000e8 	.word	0x200000e8
 800094c:	40013000 	.word	0x40013000

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
printf("Hello from STM32!\r\n");
 8000954:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <MX_USART2_UART_Init+0x98>)
 8000956:	f003 ff71 	bl	800483c <puts>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 800095c:	4a24      	ldr	r2, [pc, #144]	@ (80009f0 <MX_USART2_UART_Init+0xa0>)
 800095e:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 8000962:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000966:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000968:	4b20      	ldr	r3, [pc, #128]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 800097c:	220c      	movs	r2, #12
 800097e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000992:	4b16      	ldr	r3, [pc, #88]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4813      	ldr	r0, [pc, #76]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 80009a0:	f002 fefc 	bl	800379c <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x5e>
  {
    Error_Handler();
 80009aa:	f000 f89b 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	480e      	ldr	r0, [pc, #56]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 80009b2:	f003 fd25 	bl	8004400 <HAL_UARTEx_SetTxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x70>
  {
    Error_Handler();
 80009bc:	f000 f892 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c0:	2100      	movs	r1, #0
 80009c2:	480a      	ldr	r0, [pc, #40]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 80009c4:	f003 fd5a 	bl	800447c <HAL_UARTEx_SetRxFifoThreshold>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x82>
  {
    Error_Handler();
 80009ce:	f000 f889 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009d2:	4806      	ldr	r0, [pc, #24]	@ (80009ec <MX_USART2_UART_Init+0x9c>)
 80009d4:	f003 fcdb 	bl	800438e <HAL_UARTEx_DisableFifoMode>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x92>
  {
    Error_Handler();
 80009de:	f000 f881 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	080055b8 	.word	0x080055b8
 80009ec:	2000014c 	.word	0x2000014c
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_GPIO_Init+0x60>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0c:	4a11      	ldr	r2, [pc, #68]	@ (8000a54 <MX_GPIO_Init+0x60>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_GPIO_Init+0x60>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN7_Pin|PIN8_Pin|PIN3_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f001 fafb 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN7_Pin PIN8_Pin PIN3_Pin */
  GPIO_InitStruct.Pin = PIN7_Pin|PIN8_Pin|PIN3_Pin;
 8000a2e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000a32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a48:	f001 f96a 	bl	8001d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000

08000a58 <sendSPIMessage>:

/* USER CODE BEGIN 4 */
void sendSPIMessage(uint8_t code) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &code, 1, HAL_MAX_DELAY);
 8000a62:	1df9      	adds	r1, r7, #7
 8000a64:	f04f 33ff 	mov.w	r3, #4294967295
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <sendSPIMessage+0x20>)
 8000a6c:	f002 fbbb 	bl	80031e6 <HAL_SPI_Transmit>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000e8 	.word	0x200000e8

08000a7c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000a8a:	2140      	movs	r1, #64	@ 0x40
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 fdc5 	bl	800161c <HAL_FDCAN_GetRxMessage>
    lastCANMessageTick = HAL_GetTick();
 8000a92:	f000 fae7 	bl	8001064 <HAL_GetTick>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000a9a:	6013      	str	r3, [r2, #0]
    canMessageCount++;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000250 	.word	0x20000250
 8000ab4:	20000228 	.word	0x20000228
 8000ab8:	200001f4 	.word	0x200001f4
 8000abc:	200001f8 	.word	0x200001f8

08000ac0 <__io_putchar>:

int __io_putchar(int ch) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ac8:	1d39      	adds	r1, r7, #4
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <__io_putchar+0x20>)
 8000ad2:	f002 feb3 	bl	800383c <HAL_UART_Transmit>
    return ch;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000014c 	.word	0x2000014c

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <HAL_MspInit+0x44>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000afa:	4a0e      	ldr	r2, [pc, #56]	@ (8000b34 <HAL_MspInit+0x44>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b1a:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b26:	f001 fb39 	bl	800219c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09e      	sub	sp, #120	@ 0x78
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2250      	movs	r2, #80	@ 0x50
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 ff4f 	bl	80049fc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a2d      	ldr	r2, [pc, #180]	@ (8000c18 <HAL_FDCAN_MspInit+0xe0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d153      	bne.n	8000c10 <HAL_FDCAN_MspInit+0xd8>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000b6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b72:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 f84d 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000b84:	f7ff ffae 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <HAL_FDCAN_MspInit+0xe4>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8c:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <HAL_FDCAN_MspInit+0xe4>)
 8000b8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b94:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_FDCAN_MspInit+0xe4>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <HAL_FDCAN_MspInit+0xe4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <HAL_FDCAN_MspInit+0xe4>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bac:	4b1b      	ldr	r3, [pc, #108]	@ (8000c1c <HAL_FDCAN_MspInit+0xe4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000bb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bbc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bca:	2309      	movs	r3, #9
 8000bcc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd8:	f001 f8a2 	bl	8001d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bee:	2309      	movs	r3, #9
 8000bf0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f001 f890 	bl	8001d20 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2015      	movs	r0, #21
 8000c06:	f000 fb36 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c0a:	2015      	movs	r0, #21
 8000c0c:	f000 fb4d 	bl	80012aa <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000c10:	bf00      	nop
 8000c12:	3778      	adds	r7, #120	@ 0x78
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40006400 	.word	0x40006400
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	@ (8000c9c <HAL_SPI_MspInit+0x7c>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d128      	bne.n	8000c94 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	4a16      	ldr	r2, [pc, #88]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <HAL_SPI_MspInit+0x80>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c72:	23a0      	movs	r3, #160	@ 0xa0
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c82:	2305      	movs	r3, #5
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c90:	f001 f846 	bl	8001d20 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013000 	.word	0x40013000
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09e      	sub	sp, #120	@ 0x78
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2250      	movs	r2, #80	@ 0x50
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fe99 	bl	80049fc <memset>
  if(huart->Instance==USART2)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1f      	ldr	r2, [pc, #124]	@ (8000d4c <HAL_UART_MspInit+0xa8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d136      	bne.n	8000d42 <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f001 ff99 	bl	8002c18 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cec:	f7ff fefa 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf0:	4b17      	ldr	r3, [pc, #92]	@ (8000d50 <HAL_UART_MspInit+0xac>)
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf4:	4a16      	ldr	r2, [pc, #88]	@ (8000d50 <HAL_UART_MspInit+0xac>)
 8000cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <HAL_UART_MspInit+0xac>)
 8000cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <HAL_UART_MspInit+0xac>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0c:	4a10      	ldr	r2, [pc, #64]	@ (8000d50 <HAL_UART_MspInit+0xac>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d14:	4b0e      	ldr	r3, [pc, #56]	@ (8000d50 <HAL_UART_MspInit+0xac>)
 8000d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d20:	230c      	movs	r3, #12
 8000d22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f000 ffef 	bl	8001d20 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d42:	bf00      	nop
 8000d44:	3778      	adds	r7, #120	@ 0x78
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004400 	.word	0x40004400
 8000d50:	40021000 	.word	0x40021000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <NMI_Handler+0x4>

08000d5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000daa:	f000 f949 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <WWDG_IRQHandler+0x10>)
 8000dba:	f003 fbeb 	bl	8004594 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001e0 	.word	0x200001e0

08000dc8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <FDCAN1_IT0_IRQHandler+0x10>)
 8000dce:	f000 fd2d 	bl	800182c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000084 	.word	0x20000084

08000ddc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e00a      	b.n	8000e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dee:	f3af 8000 	nop.w
 8000df2:	4601      	mov	r1, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	b2ca      	uxtb	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf0      	blt.n	8000dee <_read+0x12>
  }

  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e009      	b.n	8000e3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fe45 	bl	8000ac0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf1      	blt.n	8000e28 <_write+0x12>
  }
  return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e76:	605a      	str	r2, [r3, #4]
  return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_isatty>:

int _isatty(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f003 fdd6 	bl	8004a98 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2001c000 	.word	0x2001c000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	20000258 	.word	0x20000258
 8000f20:	200003b0 	.word	0x200003b0

08000f24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f48:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f003 fd95 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fb37 	bl	80005ec <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   r0, =_estack
 8000f80:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f8c:	08005660 	.word	0x08005660
  ldr r2, =_sbss
 8000f90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f94:	200003ac 	.word	0x200003ac

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>

08000f9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f95b 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000faa:	200f      	movs	r0, #15
 8000fac:	f000 f80e 	bl	8000fcc <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	e001      	b.n	8000fc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fbc:	f7ff fd98 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fc0:	79fb      	ldrb	r3, [r7, #7]

}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_InitTick+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d022      	beq.n	8001026 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_InitTick+0x6c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <HAL_InitTick+0x68>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f966 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d10f      	bne.n	8001020 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b0f      	cmp	r3, #15
 8001004:	d809      	bhi.n	800101a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001006:	2200      	movs	r2, #0
 8001008:	6879      	ldr	r1, [r7, #4]
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	f000 f932 	bl	8001276 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <HAL_InitTick+0x70>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	e007      	b.n	800102a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e004      	b.n	800102a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e001      	b.n	800102a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000008 	.word	0x20000008
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <HAL_IncTick+0x1c>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <HAL_IncTick+0x20>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a03      	ldr	r2, [pc, #12]	@ (800105c <HAL_IncTick+0x1c>)
 8001050:	6013      	str	r3, [r2, #0]
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	2000025c 	.word	0x2000025c
 8001060:	20000008 	.word	0x20000008

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000025c 	.word	0x2000025c

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d004      	beq.n	80010a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <HAL_Delay+0x40>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a0:	bf00      	nop
 80010a2:	f7ff ffdf 	bl	8001064 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d8f7      	bhi.n	80010a2 <HAL_Delay+0x26>
  {
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000008 	.word	0x20000008

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	@ (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	@ (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	@ 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	@ 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	@ (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	@ (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff40 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff33 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa4 	bl	800121c <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e147      	b.n	8001582 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d106      	bne.n	800130c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fc16 	bl	8000b38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0210 	bic.w	r2, r2, #16
 800131a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800131c:	f7ff fea2 	bl	8001064 <HAL_GetTick>
 8001320:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001322:	e012      	b.n	800134a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001324:	f7ff fe9e 	bl	8001064 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b0a      	cmp	r3, #10
 8001330:	d90b      	bls.n	800134a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e11b      	b.n	8001582 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b08      	cmp	r3, #8
 8001356:	d0e5      	beq.n	8001324 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001368:	f7ff fe7c 	bl	8001064 <HAL_GetTick>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800136e:	e012      	b.n	8001396 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001370:	f7ff fe78 	bl	8001064 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b0a      	cmp	r3, #10
 800137c:	d90b      	bls.n	8001396 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2203      	movs	r2, #3
 800138e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e0f5      	b.n	8001582 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0e5      	beq.n	8001370 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f042 0202 	orr.w	r2, r2, #2
 80013b2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a74      	ldr	r2, [pc, #464]	@ (800158c <HAL_FDCAN_Init+0x2ac>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d103      	bne.n	80013c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80013be:	4a74      	ldr	r2, [pc, #464]	@ (8001590 <HAL_FDCAN_Init+0x2b0>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7c1b      	ldrb	r3, [r3, #16]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d108      	bne.n	80013e0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699a      	ldr	r2, [r3, #24]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013dc:	619a      	str	r2, [r3, #24]
 80013de:	e007      	b.n	80013f0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7c5b      	ldrb	r3, [r3, #17]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d108      	bne.n	800140a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	e007      	b.n	800141a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001418:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7c9b      	ldrb	r3, [r3, #18]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d108      	bne.n	8001434 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	e007      	b.n	8001444 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699a      	ldr	r2, [r3, #24]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001442:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	699a      	ldr	r2, [r3, #24]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001468:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0210 	bic.w	r2, r2, #16
 8001478:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0204 	orr.w	r2, r2, #4
 8001490:	619a      	str	r2, [r3, #24]
 8001492:	e02c      	b.n	80014ee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d028      	beq.n	80014ee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d01c      	beq.n	80014de <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	699a      	ldr	r2, [r3, #24]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014b2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0210 	orr.w	r2, r2, #16
 80014c2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b03      	cmp	r3, #3
 80014ca:	d110      	bne.n	80014ee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	619a      	str	r2, [r3, #24]
 80014dc:	e007      	b.n	80014ee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699a      	ldr	r2, [r3, #24]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0220 	orr.w	r2, r2, #32
 80014ec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80014fe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001506:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	3b01      	subs	r3, #1
 8001510:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001516:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001518:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001522:	d115      	bne.n	8001550 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152e:	3b01      	subs	r3, #1
 8001530:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001532:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	3b01      	subs	r3, #1
 800153a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800153c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	3b01      	subs	r3, #1
 8001546:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800154c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800154e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fafc 	bl	8001b64 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40006400 	.word	0x40006400
 8001590:	40006500 	.word	0x40006500

08001594 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d12c      	bne.n	8001606 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e023      	b.n	8001614 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fb20 	bl	8001c28 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015f8:	2201      	movs	r2, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e006      	b.n	8001614 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	f043 0208 	orr.w	r2, r3, #8
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800161c:	b480      	push	{r7}
 800161e:	b08b      	sub	sp, #44	@ 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001634:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	2b02      	cmp	r3, #2
 800163a:	f040 80e8 	bne.w	800180e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b40      	cmp	r3, #64	@ 0x40
 8001642:	d137      	bne.n	80016b4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0db      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d10a      	bne.n	800168c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800167e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001686:	d101      	bne.n	800168c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b2:	e036      	b.n	8001722 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0a3      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e4:	d10a      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f6:	d101      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d107      	bne.n	8001746 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e005      	b.n	8001752 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	3304      	adds	r3, #4
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	f003 020f 	and.w	r2, r3, #15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0e1b      	lsrs	r3, r3, #24
 80017a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0fda      	lsrs	r2, r3, #31
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	3304      	adds	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
 80017c6:	e00a      	b.n	80017de <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	441a      	add	r2, r3
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	440b      	add	r3, r1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	3301      	adds	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_FDCAN_GetRxMessage+0x20c>)
 80017e4:	5cd3      	ldrb	r3, [r2, r3]
 80017e6:	461a      	mov	r2, r3
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d3ec      	bcc.n	80017c8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b40      	cmp	r3, #64	@ 0x40
 80017f2:	d105      	bne.n	8001800 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80017fe:	e004      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e006      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	f043 0208 	orr.w	r2, r3, #8
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	372c      	adds	r7, #44	@ 0x2c
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	080055e4 	.word	0x080055e4

0800182c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	@ 0x30
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800183a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800183e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001846:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001848:	4013      	ands	r3, r2
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001860:	4013      	ands	r3, r2
 8001862:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800186a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001878:	4013      	ands	r3, r2
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001882:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001886:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	4013      	ands	r3, r2
 8001892:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800189e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ba:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00c      	beq.n	80018e2 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d006      	beq.n	80018e2 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f922 	bl	8001b26 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d01a      	beq.n	8001924 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d014      	beq.n	8001924 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001902:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800191a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800191c:	6939      	ldr	r1, [r7, #16]
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f8e2 	bl	8001ae8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d007      	beq.n	800193a <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001930:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f8ac 	bl	8001a92 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193c:	2b00      	cmp	r3, #0
 800193e:	d007      	beq.n	8001950 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001946:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff f896 	bl	8000a7c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d007      	beq.n	8001966 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800195e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 f8a1 	bl	8001aa8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	0a5b      	lsrs	r3, r3, #9
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	0a5b      	lsrs	r3, r3, #9
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001986:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f898 	bl	8001abe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	09db      	lsrs	r3, r3, #7
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d019      	beq.n	80019ce <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	09db      	lsrs	r3, r3, #7
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d013      	beq.n	80019ce <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019ae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2280      	movs	r2, #128	@ 0x80
 80019c4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f882 	bl	8001ad2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	0b5b      	lsrs	r3, r3, #13
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00d      	beq.n	80019f6 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	0b5b      	lsrs	r3, r3, #13
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f884 	bl	8001afe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	0bdb      	lsrs	r3, r3, #15
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	0bdb      	lsrs	r3, r3, #15
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a16:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f87a 	bl	8001b12 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	0b9b      	lsrs	r3, r3, #14
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d010      	beq.n	8001a4c <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	0b9b      	lsrs	r3, r3, #14
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a44:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a5a:	69f9      	ldr	r1, [r7, #28]
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f876 	bl	8001b4e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a3a      	ldr	r2, [r7, #32]
 8001a6e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f858 	bl	8001b3a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001b6e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d103      	bne.n	8001b82 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001b80:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b90:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b98:	041a      	lsls	r2, r3, #16
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bb6:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbe:	061a      	lsls	r2, r3, #24
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e005      	b.n	8001c04 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d3f3      	bcc.n	8001bf8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	4000a400 	.word	0x4000a400
 8001c24:	40006800 	.word	0x40006800

08001c28 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10a      	bne.n	8001c54 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001c46:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e00a      	b.n	8001c6a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001c5c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001c62:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001c64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c68:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c74:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c7a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001c80:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	3304      	adds	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e020      	b.n	8001cfe <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3303      	adds	r3, #3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3302      	adds	r3, #2
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	440b      	add	r3, r1
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cd4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	440b      	add	r3, r1
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001ce2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	440a      	add	r2, r1
 8001cea:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001cec:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	4a06      	ldr	r2, [pc, #24]	@ (8001d1c <FDCAN_CopyMessageToRAM+0xf4>)
 8001d04:	5cd3      	ldrb	r3, [r2, r3]
 8001d06:	461a      	mov	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d3d6      	bcc.n	8001cbc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	3724      	adds	r7, #36	@ 0x24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	080055e4 	.word	0x080055e4

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d2e:	e15a      	b.n	8001fe6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 814c 	beq.w	8001fe0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80a6 	beq.w	8001fe0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b5b      	ldr	r3, [pc, #364]	@ (8002004 <HAL_GPIO_Init+0x2e4>)
 8001e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e98:	4a5a      	ldr	r2, [pc, #360]	@ (8002004 <HAL_GPIO_Init+0x2e4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ea0:	4b58      	ldr	r3, [pc, #352]	@ (8002004 <HAL_GPIO_Init+0x2e4>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eac:	4a56      	ldr	r2, [pc, #344]	@ (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ed6:	d01f      	beq.n	8001f18 <HAL_GPIO_Init+0x1f8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4c      	ldr	r2, [pc, #304]	@ (800200c <HAL_GPIO_Init+0x2ec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d019      	beq.n	8001f14 <HAL_GPIO_Init+0x1f4>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a4b      	ldr	r2, [pc, #300]	@ (8002010 <HAL_GPIO_Init+0x2f0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1f0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a4a      	ldr	r2, [pc, #296]	@ (8002014 <HAL_GPIO_Init+0x2f4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1ec>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a49      	ldr	r2, [pc, #292]	@ (8002018 <HAL_GPIO_Init+0x2f8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1e8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a48      	ldr	r2, [pc, #288]	@ (800201c <HAL_GPIO_Init+0x2fc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1e4>
 8001f00:	2305      	movs	r3, #5
 8001f02:	e00a      	b.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001f04:	2306      	movs	r3, #6
 8001f06:	e008      	b.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e006      	b.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e004      	b.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e002      	b.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_GPIO_Init+0x1fa>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	f002 0203 	and.w	r2, r2, #3
 8001f20:	0092      	lsls	r2, r2, #2
 8001f22:	4093      	lsls	r3, r2
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f2a:	4937      	ldr	r1, [pc, #220]	@ (8002008 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	089b      	lsrs	r3, r3, #2
 8001f30:	3302      	adds	r3, #2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f38:	4b39      	ldr	r3, [pc, #228]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f5c:	4a30      	ldr	r2, [pc, #192]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f62:	4b2f      	ldr	r3, [pc, #188]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f86:	4a26      	ldr	r2, [pc, #152]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fda:	4a11      	ldr	r2, [pc, #68]	@ (8002020 <HAL_GPIO_Init+0x300>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f47f ae9d 	bne.w	8001d30 <HAL_GPIO_Init+0x10>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000
 8002008:	40010000 	.word	0x40010000
 800200c:	48000400 	.word	0x48000400
 8002010:	48000800 	.word	0x48000800
 8002014:	48000c00 	.word	0x48000c00
 8002018:	48001000 	.word	0x48001000
 800201c:	48001400 	.word	0x48001400
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002040:	e002      	b.n	8002048 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002042:	887a      	ldrh	r2, [r7, #2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d141      	bne.n	80020e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002062:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206e:	d131      	bne.n	80020d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002070:	4b47      	ldr	r3, [pc, #284]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002076:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800207c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002080:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002088:	4a41      	ldr	r2, [pc, #260]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800208e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002090:	4b40      	ldr	r3, [pc, #256]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2232      	movs	r2, #50	@ 0x32
 8002096:	fb02 f303 	mul.w	r3, r2, r3
 800209a:	4a3f      	ldr	r2, [pc, #252]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	0c9b      	lsrs	r3, r3, #18
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a6:	e002      	b.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ae:	4b38      	ldr	r3, [pc, #224]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d102      	bne.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f2      	bne.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020c2:	4b33      	ldr	r3, [pc, #204]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ce:	d158      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e057      	b.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020da:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020e4:	e04d      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020ec:	d141      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ee:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d131      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002102:	4a23      	ldr	r2, [pc, #140]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002108:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800210c:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002114:	4a1e      	ldr	r2, [pc, #120]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2232      	movs	r2, #50	@ 0x32
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a1c      	ldr	r2, [pc, #112]	@ (8002198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	0c9b      	lsrs	r3, r3, #18
 800212e:	3301      	adds	r3, #1
 8002130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002132:	e002      	b.n	800213a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3b01      	subs	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d102      	bne.n	800214e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f2      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d112      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e011      	b.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002162:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002170:	e007      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002172:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002180:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40007000 	.word	0x40007000
 8002194:	20000000 	.word	0x20000000
 8002198:	431bde83 	.word	0x431bde83

0800219c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a04      	ldr	r2, [pc, #16]	@ (80021b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80021a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021aa:	6093      	str	r3, [r2, #8]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e2fe      	b.n	80027cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	4b97      	ldr	r3, [pc, #604]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e4:	4b94      	ldr	r3, [pc, #592]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x3e>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b8d      	ldr	r3, [pc, #564]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e2d9      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b85      	ldr	r3, [pc, #532]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a84      	ldr	r2, [pc, #528]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7f      	ldr	r3, [pc, #508]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7e      	ldr	r2, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b7c      	ldr	r3, [pc, #496]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a7b      	ldr	r2, [pc, #492]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a77      	ldr	r2, [pc, #476]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a74      	ldr	r2, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7fe fef6 	bl	8001064 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7fe fef2 	bl	8001064 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e29e      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe fee2 	bl	8001064 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fede 	bl	8001064 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e28a      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	4b60      	ldr	r3, [pc, #384]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d075      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d2:	4b59      	ldr	r3, [pc, #356]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022dc:	4b56      	ldr	r3, [pc, #344]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d102      	bne.n	80022f2 <HAL_RCC_OscConfig+0x136>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d002      	beq.n	80022f8 <HAL_RCC_OscConfig+0x13c>
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d11f      	bne.n	8002338 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	4b4f      	ldr	r3, [pc, #316]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_OscConfig+0x154>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e25d      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b49      	ldr	r3, [pc, #292]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	4946      	ldr	r1, [pc, #280]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002324:	4b45      	ldr	r3, [pc, #276]	@ (800243c <HAL_RCC_OscConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fe4f 	bl	8000fcc <HAL_InitTick>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d043      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e249      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d023      	beq.n	8002388 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002340:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3c      	ldr	r2, [pc, #240]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fe8a 	bl	8001064 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002354:	f7fe fe86 	bl	8001064 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e232      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002366:	4b34      	ldr	r3, [pc, #208]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	061b      	lsls	r3, r3, #24
 8002380:	492d      	ldr	r1, [pc, #180]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
 8002386:	e01a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002388:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2a      	ldr	r2, [pc, #168]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800238e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fe66 	bl	8001064 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fe62 	bl	8001064 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e20e      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x1e0>
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d041      	beq.n	800244e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01c      	beq.n	800240c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023d8:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe fe3f 	bl	8001064 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe fe3b 	bl	8001064 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1e7      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0ef      	beq.n	80023ea <HAL_RCC_OscConfig+0x22e>
 800240a:	e020      	b.n	800244e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 800240e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_RCC_OscConfig+0x27c>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fe22 	bl	8001064 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002422:	e00d      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fe1e 	bl	8001064 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d906      	bls.n	8002440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1ca      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002440:	4b8c      	ldr	r3, [pc, #560]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ea      	bne.n	8002424 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a6 	beq.w	80025a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002460:	4b84      	ldr	r3, [pc, #528]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_OscConfig+0x2b4>
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x2b6>
 8002470:	2300      	movs	r3, #0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	4a7e      	ldr	r2, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002480:	6593      	str	r3, [r2, #88]	@ 0x58
 8002482:	4b7c      	ldr	r3, [pc, #496]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002492:	4b79      	ldr	r3, [pc, #484]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d118      	bne.n	80024d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249e:	4b76      	ldr	r3, [pc, #472]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a75      	ldr	r2, [pc, #468]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 80024a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024aa:	f7fe fddb 	bl	8001064 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b2:	f7fe fdd7 	bl	8001064 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e183      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002678 <HAL_RCC_OscConfig+0x4bc>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d108      	bne.n	80024ea <HAL_RCC_OscConfig+0x32e>
 80024d8:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024de:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024e8:	e024      	b.n	8002534 <HAL_RCC_OscConfig+0x378>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d110      	bne.n	8002514 <HAL_RCC_OscConfig+0x358>
 80024f2:	4b60      	ldr	r3, [pc, #384]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002502:	4b5c      	ldr	r3, [pc, #368]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002508:	4a5a      	ldr	r2, [pc, #360]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002512:	e00f      	b.n	8002534 <HAL_RCC_OscConfig+0x378>
 8002514:	4b57      	ldr	r3, [pc, #348]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800251a:	4a56      	ldr	r2, [pc, #344]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002524:	4b53      	ldr	r3, [pc, #332]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	4a52      	ldr	r2, [pc, #328]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d016      	beq.n	800256a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fd92 	bl	8001064 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	e00a      	b.n	800255a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe fd8e 	bl	8001064 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e138      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255a:	4b46      	ldr	r3, [pc, #280]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ed      	beq.n	8002544 <HAL_RCC_OscConfig+0x388>
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fd7b 	bl	8001064 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fd77 	bl	8001064 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e121      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002588:	4b3a      	ldr	r3, [pc, #232]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ed      	bne.n	8002572 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002596:	7ffb      	ldrb	r3, [r7, #31]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b35      	ldr	r3, [pc, #212]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	4a34      	ldr	r2, [pc, #208]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d03c      	beq.n	800262e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fd4a 	bl	8001064 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d4:	f7fe fd46 	bl	8001064 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0f2      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e6:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ef      	beq.n	80025d4 <HAL_RCC_OscConfig+0x418>
 80025f4:	e01b      	b.n	800262e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe fd2d 	bl	8001064 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260e:	f7fe fd29 	bl	8001064 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0d5      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002622:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ef      	bne.n	800260e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80c9 	beq.w	80027ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b0c      	cmp	r3, #12
 8002642:	f000 8083 	beq.w	800274c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d15e      	bne.n	800270c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_RCC_OscConfig+0x4b8>)
 8002654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fd03 	bl	8001064 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	e00c      	b.n	800267c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fcff 	bl	8001064 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d905      	bls.n	800267c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0ab      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
 8002674:	40021000 	.word	0x40021000
 8002678:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267c:	4b55      	ldr	r3, [pc, #340]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ec      	bne.n	8002662 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002688:	4b52      	ldr	r3, [pc, #328]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <HAL_RCC_OscConfig+0x61c>)
 800268e:	4013      	ands	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6a11      	ldr	r1, [r2, #32]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002698:	3a01      	subs	r2, #1
 800269a:	0112      	lsls	r2, r2, #4
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80026a2:	0212      	lsls	r2, r2, #8
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0552      	lsls	r2, r2, #21
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026b6:	0852      	lsrs	r2, r2, #1
 80026b8:	3a01      	subs	r2, #1
 80026ba:	0652      	lsls	r2, r2, #25
 80026bc:	4311      	orrs	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026c2:	06d2      	lsls	r2, r2, #27
 80026c4:	430a      	orrs	r2, r1
 80026c6:	4943      	ldr	r1, [pc, #268]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026cc:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a40      	ldr	r2, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d8:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a3d      	ldr	r2, [pc, #244]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 80026de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fcbe 	bl	8001064 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ec:	f7fe fcba 	bl	8001064 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e066      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fe:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x530>
 800270a:	e05e      	b.n	80027ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a30      	ldr	r2, [pc, #192]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fca4 	bl	8001064 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe fca0 	bl	8001064 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04c      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002732:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	4924      	ldr	r1, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 8002744:	4b25      	ldr	r3, [pc, #148]	@ (80027dc <HAL_RCC_OscConfig+0x620>)
 8002746:	4013      	ands	r3, r2
 8002748:	60cb      	str	r3, [r1, #12]
 800274a:	e03e      	b.n	80027ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e039      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002758:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <HAL_RCC_OscConfig+0x618>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	429a      	cmp	r2, r3
 800276a:	d12c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	3b01      	subs	r3, #1
 8002778:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d123      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002788:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d11b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d113      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	3b01      	subs	r3, #1
 80027ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	3b01      	subs	r3, #1
 80027c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	019f800c 	.word	0x019f800c
 80027dc:	feeefffc 	.word	0xfeeefffc

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e11e      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b91      	ldr	r3, [pc, #580]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b8e      	ldr	r3, [pc, #568]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	498c      	ldr	r1, [pc, #560]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b8a      	ldr	r3, [pc, #552]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e106      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d073      	beq.n	800291c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d129      	bne.n	8002890 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283c:	4b81      	ldr	r3, [pc, #516]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0f4      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800284c:	f000 f99e 	bl	8002b8c <RCC_GetSysClockFreqFromPLLSource>
 8002850:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4a7c      	ldr	r2, [pc, #496]	@ (8002a48 <HAL_RCC_ClockConfig+0x268>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d93f      	bls.n	80028da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800285a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800286e:	2b00      	cmp	r3, #0
 8002870:	d033      	beq.n	80028da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d12f      	bne.n	80028da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800287a:	4b72      	ldr	r3, [pc, #456]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002882:	4a70      	ldr	r2, [pc, #448]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002888:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e024      	b.n	80028da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002898:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0c6      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a8:	4b66      	ldr	r3, [pc, #408]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0be      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028b8:	f000 f8ce 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 80028bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4a61      	ldr	r2, [pc, #388]	@ (8002a48 <HAL_RCC_ClockConfig+0x268>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d909      	bls.n	80028da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028d6:	2380      	movs	r3, #128	@ 0x80
 80028d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028da:	4b5a      	ldr	r3, [pc, #360]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 0203 	bic.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4957      	ldr	r1, [pc, #348]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ec:	f7fe fbba 	bl	8001064 <HAL_GetTick>
 80028f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	e00a      	b.n	800290a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f4:	f7fe fbb6 	bl	8001064 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002902:	4293      	cmp	r3, r2
 8002904:	d901      	bls.n	800290a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e095      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	4b4e      	ldr	r3, [pc, #312]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 020c 	and.w	r2, r3, #12
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	429a      	cmp	r2, r3
 800291a:	d1eb      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d023      	beq.n	8002970 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002934:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a42      	ldr	r2, [pc, #264]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800293a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800293e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800294c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002954:	4a3b      	ldr	r2, [pc, #236]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002956:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800295a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4936      	ldr	r1, [pc, #216]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
 800296e:	e008      	b.n	8002982 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b80      	cmp	r3, #128	@ 0x80
 8002974:	d105      	bne.n	8002982 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002976:	4b33      	ldr	r3, [pc, #204]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	4a32      	ldr	r2, [pc, #200]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 800297c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002980:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002982:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d21d      	bcs.n	80029cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 020f 	bic.w	r2, r3, #15
 8002998:	4929      	ldr	r1, [pc, #164]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fb60 	bl	8001064 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fb5c 	bl	8001064 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e03b      	b.n	8002a36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1ed      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4917      	ldr	r1, [pc, #92]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029f6:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	490f      	ldr	r1, [pc, #60]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a0a:	f000 f825 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b0c      	ldr	r3, [pc, #48]	@ (8002a44 <HAL_RCC_ClockConfig+0x264>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	490c      	ldr	r1, [pc, #48]	@ (8002a4c <HAL_RCC_ClockConfig+0x26c>)
 8002a1c:	5ccb      	ldrb	r3, [r1, r3]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_RCC_ClockConfig+0x270>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_RCC_ClockConfig+0x274>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe facc 	bl	8000fcc <HAL_InitTick>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
 8002a48:	04c4b400 	.word	0x04c4b400
 8002a4c:	080055cc 	.word	0x080055cc
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e047      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a70:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a7c:	4b26      	ldr	r3, [pc, #152]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	e03e      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d136      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d10c      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aac:	4a1a      	ldr	r2, [pc, #104]	@ (8002b18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	4a16      	ldr	r2, [pc, #88]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab6:	68d2      	ldr	r2, [r2, #12]
 8002ab8:	0a12      	lsrs	r2, r2, #8
 8002aba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
      break;
 8002ac4:	e00c      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4a10      	ldr	r2, [pc, #64]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	0a12      	lsrs	r2, r2, #8
 8002ad4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
      break;
 8002ade:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0e5b      	lsrs	r3, r3, #25
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	e001      	b.n	8002b00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b00:	693b      	ldr	r3, [r7, #16]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	00f42400 	.word	0x00f42400
 8002b18:	007a1200 	.word	0x007a1200

08002b1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000000 	.word	0x20000000

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b38:	f7ff fff0 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4904      	ldr	r1, [pc, #16]	@ (8002b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	080055dc 	.word	0x080055dc

08002b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b64:	f7ff ffda 	bl	8002b1c <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0adb      	lsrs	r3, r3, #11
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4904      	ldr	r1, [pc, #16]	@ (8002b88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	080055dc 	.word	0x080055dc

08002b8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b92:	4b1e      	ldr	r3, [pc, #120]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d10c      	bne.n	8002bca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb0:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb8:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bba:	68d2      	ldr	r2, [r2, #12]
 8002bbc:	0a12      	lsrs	r2, r2, #8
 8002bbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bc2:	fb02 f303 	mul.w	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
    break;
 8002bc8:	e00c      	b.n	8002be4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	0a12      	lsrs	r2, r2, #8
 8002bd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    break;
 8002be2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0e5b      	lsrs	r3, r3, #25
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bfe:	687b      	ldr	r3, [r7, #4]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	371c      	adds	r7, #28
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	007a1200 	.word	0x007a1200
 8002c14:	00f42400 	.word	0x00f42400

08002c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c20:	2300      	movs	r3, #0
 8002c22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8098 	beq.w	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b43      	ldr	r3, [pc, #268]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b40      	ldr	r3, [pc, #256]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c52:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c62:	4b3a      	ldr	r3, [pc, #232]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a39      	ldr	r2, [pc, #228]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c6e:	f7fe f9f9 	bl	8001064 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c74:	e009      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe f9f5 	bl	8001064 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d902      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	74fb      	strb	r3, [r7, #19]
        break;
 8002c88:	e005      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c8a:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0ef      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c96:	7cfb      	ldrb	r3, [r7, #19]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d159      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d019      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc4:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cda:	4a1b      	ldr	r2, [pc, #108]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce4:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe f9b5 	bl	8001064 <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfe:	f7fe f9b1 	bl	8001064 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	74fb      	strb	r3, [r7, #19]
            break;
 8002d14:	e006      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ec      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d38:	4903      	ldr	r1, [pc, #12]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d40:	e008      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	74bb      	strb	r3, [r7, #18]
 8002d46:	e005      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d54:	7c7b      	ldrb	r3, [r7, #17]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	4aa6      	ldr	r2, [pc, #664]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d72:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f023 0203 	bic.w	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	499d      	ldr	r1, [pc, #628]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d94:	4b98      	ldr	r3, [pc, #608]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f023 020c 	bic.w	r2, r3, #12
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4995      	ldr	r1, [pc, #596]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002db6:	4b90      	ldr	r3, [pc, #576]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	498c      	ldr	r1, [pc, #560]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dd8:	4b87      	ldr	r3, [pc, #540]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4984      	ldr	r1, [pc, #528]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dfa:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	497b      	ldr	r1, [pc, #492]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e1c:	4b76      	ldr	r3, [pc, #472]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	4973      	ldr	r1, [pc, #460]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	496a      	ldr	r1, [pc, #424]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e60:	4b65      	ldr	r3, [pc, #404]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4962      	ldr	r1, [pc, #392]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	4959      	ldr	r1, [pc, #356]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea4:	4b54      	ldr	r3, [pc, #336]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	4951      	ldr	r1, [pc, #324]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d015      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ecc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	4948      	ldr	r1, [pc, #288]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee6:	4b44      	ldr	r3, [pc, #272]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a43      	ldr	r2, [pc, #268]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ef0:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d015      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0c:	493a      	ldr	r1, [pc, #232]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	4a35      	ldr	r2, [pc, #212]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f28:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	492c      	ldr	r1, [pc, #176]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d105      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f60:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d015      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7c:	491e      	ldr	r1, [pc, #120]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f8c:	d105      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f98:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d015      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fa6:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	4910      	ldr	r1, [pc, #64]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc4:	d105      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d018      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	4902      	ldr	r1, [pc, #8]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	e001      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003004:	4b21      	ldr	r3, [pc, #132]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a20      	ldr	r2, [pc, #128]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800301c:	4b1b      	ldr	r3, [pc, #108]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	4918      	ldr	r1, [pc, #96]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d105      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800303c:	4b13      	ldr	r3, [pc, #76]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4a12      	ldr	r2, [pc, #72]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003046:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003054:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003056:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003062:	490a      	ldr	r1, [pc, #40]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003072:	d105      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a04      	ldr	r2, [pc, #16]	@ (800308c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800307a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003080:	7cbb      	ldrb	r3, [r7, #18]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e09d      	b.n	80031de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fd9c 	bl	8000c20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003108:	d902      	bls.n	8003110 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003114:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Init+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 0204 	and.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b088      	sub	sp, #32
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	603b      	str	r3, [r7, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f6:	f7fd ff35 	bl	8001064 <HAL_GetTick>
 80031fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
 800320e:	e15c      	b.n	80034ca <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_SPI_Transmit+0x36>
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e154      	b.n	80034ca <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_SPI_Transmit+0x48>
 800322a:	2302      	movs	r3, #2
 800322c:	e14d      	b.n	80034ca <HAL_SPI_Transmit+0x2e4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2203      	movs	r2, #3
 800323a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	d10f      	bne.n	80032a2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d007      	beq.n	80032c0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032c8:	d952      	bls.n	8003370 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_SPI_Transmit+0xf2>
 80032d2:	8b7b      	ldrh	r3, [r7, #26]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d145      	bne.n	8003364 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	881a      	ldrh	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032fc:	e032      	b.n	8003364 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d112      	bne.n	8003332 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003330:	e018      	b.n	8003364 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003332:	f7fd fe97 	bl	8001064 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d803      	bhi.n	800334a <HAL_SPI_Transmit+0x164>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d102      	bne.n	8003350 <HAL_SPI_Transmit+0x16a>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0b2      	b.n	80034ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1c7      	bne.n	80032fe <HAL_SPI_Transmit+0x118>
 800336e:	e083      	b.n	8003478 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_SPI_Transmit+0x198>
 8003378:	8b7b      	ldrh	r3, [r7, #26]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d177      	bne.n	800346e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d912      	bls.n	80033ae <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b02      	subs	r3, #2
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033ac:	e05f      	b.n	800346e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033d4:	e04b      	b.n	800346e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d12b      	bne.n	800343c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d912      	bls.n	8003414 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b02      	subs	r3, #2
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003412:	e02c      	b.n	800346e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800343a:	e018      	b.n	800346e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800343c:	f7fd fe12 	bl	8001064 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d803      	bhi.n	8003454 <HAL_SPI_Transmit+0x26e>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d102      	bne.n	800345a <HAL_SPI_Transmit+0x274>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e02d      	b.n	80034ca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1ae      	bne.n	80033d6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	6839      	ldr	r1, [r7, #0]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f947 	bl	8003710 <SPI_EndRxTxTransaction>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2220      	movs	r2, #32
 800348c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034e4:	f7fd fdbe 	bl	8001064 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034f4:	f7fd fdb6 	bl	8001064 <HAL_GetTick>
 80034f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034fa:	4b39      	ldr	r3, [pc, #228]	@ (80035e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	0d1b      	lsrs	r3, r3, #20
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350a:	e054      	b.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d050      	beq.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003514:	f7fd fda6 	bl	8001064 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	d902      	bls.n	800352a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d13d      	bne.n	80035a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003542:	d111      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800354c:	d004      	beq.n	8003558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003556:	d107      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003570:	d10f      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e017      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d19b      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000000 	.word	0x20000000

080035e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b08a      	sub	sp, #40	@ 0x28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035f6:	f7fd fd35 	bl	8001064 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	4413      	add	r3, r2
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003606:	f7fd fd2d 	bl	8001064 <HAL_GetTick>
 800360a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003614:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00da      	lsls	r2, r3, #3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	0d1b      	lsrs	r3, r3, #20
 8003624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800362c:	e060      	b.n	80036f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003634:	d107      	bne.n	8003646 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003644:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d050      	beq.n	80036f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800364e:	f7fd fd09 	bl	8001064 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365a:	429a      	cmp	r2, r3
 800365c:	d902      	bls.n	8003664 <SPI_WaitFifoStateUntilTimeout+0x80>
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d13d      	bne.n	80036e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003672:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800367c:	d111      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003686:	d004      	beq.n	8003692 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003690:	d107      	bne.n	80036a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036aa:	d10f      	bne.n	80036cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e010      	b.n	8003702 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d196      	bne.n	800362e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3728      	adds	r7, #40	@ 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000000 	.word	0x20000000

08003710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2200      	movs	r2, #0
 8003724:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7ff ff5b 	bl	80035e4 <SPI_WaitFifoStateUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	f043 0220 	orr.w	r2, r3, #32
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e027      	b.n	8003794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2200      	movs	r2, #0
 800374c:	2180      	movs	r1, #128	@ 0x80
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7ff fec0 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e014      	b.n	8003794 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff ff34 	bl	80035e4 <SPI_WaitFifoStateUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e000      	b.n	8003794 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e042      	b.n	8003834 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fa6f 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2224      	movs	r2, #36	@ 0x24
 80037ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fbb2 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8b3 	bl	8003958 <UART_SetConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e01b      	b.n	8003834 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800380a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800381a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fc31 	bl	8004094 <UART_CheckIdleState>
 8003832:	4603      	mov	r3, r0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	@ 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	2b20      	cmp	r3, #32
 8003854:	d17b      	bne.n	800394e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_UART_Transmit+0x26>
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e074      	b.n	8003950 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2221      	movs	r2, #33	@ 0x21
 8003872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003876:	f7fd fbf5 	bl	8001064 <HAL_GetTick>
 800387a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003894:	d108      	bne.n	80038a8 <HAL_UART_Transmit+0x6c>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	e003      	b.n	80038b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038b0:	e030      	b.n	8003914 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	2180      	movs	r1, #128	@ 0x80
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fc93 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03d      	b.n	8003950 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	3302      	adds	r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	e007      	b.n	8003902 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	781a      	ldrb	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	3301      	adds	r3, #1
 8003900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1c8      	bne.n	80038b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	2140      	movs	r1, #64	@ 0x40
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fc5c 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2220      	movs	r2, #32
 800393a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e006      	b.n	8003950 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b08c      	sub	sp, #48	@ 0x30
 800395e:	af00      	add	r7, sp, #0
 8003960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	431a      	orrs	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	431a      	orrs	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	4313      	orrs	r3, r2
 800397e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4baa      	ldr	r3, [pc, #680]	@ (8003c30 <UART_SetConfig+0x2d8>)
 8003988:	4013      	ands	r3, r2
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003990:	430b      	orrs	r3, r1
 8003992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	68da      	ldr	r2, [r3, #12]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c34 <UART_SetConfig+0x2dc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c0:	4313      	orrs	r3, r2
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039d8:	430b      	orrs	r3, r1
 80039da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	f023 010f 	bic.w	r1, r3, #15
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a90      	ldr	r2, [pc, #576]	@ (8003c38 <UART_SetConfig+0x2e0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d125      	bne.n	8003a48 <UART_SetConfig+0xf0>
 80039fc:	4b8f      	ldr	r3, [pc, #572]	@ (8003c3c <UART_SetConfig+0x2e4>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d81a      	bhi.n	8003a40 <UART_SetConfig+0xe8>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <UART_SetConfig+0xb8>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a31 	.word	0x08003a31
 8003a18:	08003a29 	.word	0x08003a29
 8003a1c:	08003a39 	.word	0x08003a39
 8003a20:	2301      	movs	r3, #1
 8003a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a26:	e116      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a2e:	e112      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a36:	e10e      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3e:	e10a      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a46:	e106      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c40 <UART_SetConfig+0x2e8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d138      	bne.n	8003ac4 <UART_SetConfig+0x16c>
 8003a52:	4b7a      	ldr	r3, [pc, #488]	@ (8003c3c <UART_SetConfig+0x2e4>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a58:	f003 030c 	and.w	r3, r3, #12
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d82d      	bhi.n	8003abc <UART_SetConfig+0x164>
 8003a60:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <UART_SetConfig+0x110>)
 8003a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a66:	bf00      	nop
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003abd 	.word	0x08003abd
 8003a70:	08003abd 	.word	0x08003abd
 8003a74:	08003abd 	.word	0x08003abd
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003abd 	.word	0x08003abd
 8003a80:	08003abd 	.word	0x08003abd
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003aa5 	.word	0x08003aa5
 8003a8c:	08003abd 	.word	0x08003abd
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	08003ab5 	.word	0x08003ab5
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aa2:	e0d8      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aaa:	e0d4      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003aac:	2304      	movs	r3, #4
 8003aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab2:	e0d0      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003ab4:	2308      	movs	r3, #8
 8003ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aba:	e0cc      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003abc:	2310      	movs	r3, #16
 8003abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac2:	e0c8      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c44 <UART_SetConfig+0x2ec>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d125      	bne.n	8003b1a <UART_SetConfig+0x1c2>
 8003ace:	4b5b      	ldr	r3, [pc, #364]	@ (8003c3c <UART_SetConfig+0x2e4>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ad8:	2b30      	cmp	r3, #48	@ 0x30
 8003ada:	d016      	beq.n	8003b0a <UART_SetConfig+0x1b2>
 8003adc:	2b30      	cmp	r3, #48	@ 0x30
 8003ade:	d818      	bhi.n	8003b12 <UART_SetConfig+0x1ba>
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d00a      	beq.n	8003afa <UART_SetConfig+0x1a2>
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d814      	bhi.n	8003b12 <UART_SetConfig+0x1ba>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <UART_SetConfig+0x19a>
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d008      	beq.n	8003b02 <UART_SetConfig+0x1aa>
 8003af0:	e00f      	b.n	8003b12 <UART_SetConfig+0x1ba>
 8003af2:	2300      	movs	r3, #0
 8003af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003af8:	e0ad      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003afa:	2302      	movs	r3, #2
 8003afc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b00:	e0a9      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b02:	2304      	movs	r3, #4
 8003b04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b08:	e0a5      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b10:	e0a1      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b12:	2310      	movs	r3, #16
 8003b14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b18:	e09d      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c48 <UART_SetConfig+0x2f0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d125      	bne.n	8003b70 <UART_SetConfig+0x218>
 8003b24:	4b45      	ldr	r3, [pc, #276]	@ (8003c3c <UART_SetConfig+0x2e4>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b30:	d016      	beq.n	8003b60 <UART_SetConfig+0x208>
 8003b32:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b34:	d818      	bhi.n	8003b68 <UART_SetConfig+0x210>
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d00a      	beq.n	8003b50 <UART_SetConfig+0x1f8>
 8003b3a:	2b80      	cmp	r3, #128	@ 0x80
 8003b3c:	d814      	bhi.n	8003b68 <UART_SetConfig+0x210>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <UART_SetConfig+0x1f0>
 8003b42:	2b40      	cmp	r3, #64	@ 0x40
 8003b44:	d008      	beq.n	8003b58 <UART_SetConfig+0x200>
 8003b46:	e00f      	b.n	8003b68 <UART_SetConfig+0x210>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b4e:	e082      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b56:	e07e      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5e:	e07a      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b66:	e076      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6e:	e072      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <UART_SetConfig+0x2f4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d12a      	bne.n	8003bd0 <UART_SetConfig+0x278>
 8003b7a:	4b30      	ldr	r3, [pc, #192]	@ (8003c3c <UART_SetConfig+0x2e4>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b88:	d01a      	beq.n	8003bc0 <UART_SetConfig+0x268>
 8003b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b8e:	d81b      	bhi.n	8003bc8 <UART_SetConfig+0x270>
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b94:	d00c      	beq.n	8003bb0 <UART_SetConfig+0x258>
 8003b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b9a:	d815      	bhi.n	8003bc8 <UART_SetConfig+0x270>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <UART_SetConfig+0x250>
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba4:	d008      	beq.n	8003bb8 <UART_SetConfig+0x260>
 8003ba6:	e00f      	b.n	8003bc8 <UART_SetConfig+0x270>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bae:	e052      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb6:	e04e      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bbe:	e04a      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc6:	e046      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bce:	e042      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <UART_SetConfig+0x2dc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d13a      	bne.n	8003c50 <UART_SetConfig+0x2f8>
 8003bda:	4b18      	ldr	r3, [pc, #96]	@ (8003c3c <UART_SetConfig+0x2e4>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003be8:	d01a      	beq.n	8003c20 <UART_SetConfig+0x2c8>
 8003bea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bee:	d81b      	bhi.n	8003c28 <UART_SetConfig+0x2d0>
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bf4:	d00c      	beq.n	8003c10 <UART_SetConfig+0x2b8>
 8003bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bfa:	d815      	bhi.n	8003c28 <UART_SetConfig+0x2d0>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <UART_SetConfig+0x2b0>
 8003c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c04:	d008      	beq.n	8003c18 <UART_SetConfig+0x2c0>
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x2d0>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0e:	e022      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003c10:	2302      	movs	r3, #2
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c16:	e01e      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c1e:	e01a      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003c20:	2308      	movs	r3, #8
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c26:	e016      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c2e:	e012      	b.n	8003c56 <UART_SetConfig+0x2fe>
 8003c30:	cfff69f3 	.word	0xcfff69f3
 8003c34:	40008000 	.word	0x40008000
 8003c38:	40013800 	.word	0x40013800
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40004400 	.word	0x40004400
 8003c44:	40004800 	.word	0x40004800
 8003c48:	40004c00 	.word	0x40004c00
 8003c4c:	40005000 	.word	0x40005000
 8003c50:	2310      	movs	r3, #16
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4aae      	ldr	r2, [pc, #696]	@ (8003f14 <UART_SetConfig+0x5bc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	f040 8097 	bne.w	8003d90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d823      	bhi.n	8003cb2 <UART_SetConfig+0x35a>
 8003c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <UART_SetConfig+0x318>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cb3 	.word	0x08003cb3
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003cb3 	.word	0x08003cb3
 8003c80:	08003ca3 	.word	0x08003ca3
 8003c84:	08003cb3 	.word	0x08003cb3
 8003c88:	08003cb3 	.word	0x08003cb3
 8003c8c:	08003cb3 	.word	0x08003cb3
 8003c90:	08003cab 	.word	0x08003cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe ff4e 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003c98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c9a:	e010      	b.n	8003cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8003f18 <UART_SetConfig+0x5c0>)
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ca0:	e00d      	b.n	8003cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca2:	f7fe fed9 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003ca6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ca8:	e009      	b.n	8003cbe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cb0:	e005      	b.n	8003cbe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003cbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8130 	beq.w	8003f26 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	4a94      	ldr	r2, [pc, #592]	@ (8003f1c <UART_SetConfig+0x5c4>)
 8003ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d305      	bcc.n	8003cf6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d903      	bls.n	8003cfe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003cfc:	e113      	b.n	8003f26 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	2200      	movs	r2, #0
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	60fa      	str	r2, [r7, #12]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	4a84      	ldr	r2, [pc, #528]	@ (8003f1c <UART_SetConfig+0x5c4>)
 8003d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2200      	movs	r2, #0
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d20:	f7fc face 	bl	80002c0 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	f04f 0300 	mov.w	r3, #0
 8003d34:	020b      	lsls	r3, r1, #8
 8003d36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d3a:	0202      	lsls	r2, r0, #8
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	6849      	ldr	r1, [r1, #4]
 8003d40:	0849      	lsrs	r1, r1, #1
 8003d42:	2000      	movs	r0, #0
 8003d44:	460c      	mov	r4, r1
 8003d46:	4605      	mov	r5, r0
 8003d48:	eb12 0804 	adds.w	r8, r2, r4
 8003d4c:	eb43 0905 	adc.w	r9, r3, r5
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	469a      	mov	sl, r3
 8003d58:	4693      	mov	fp, r2
 8003d5a:	4652      	mov	r2, sl
 8003d5c:	465b      	mov	r3, fp
 8003d5e:	4640      	mov	r0, r8
 8003d60:	4649      	mov	r1, r9
 8003d62:	f7fc faad 	bl	80002c0 <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d74:	d308      	bcc.n	8003d88 <UART_SetConfig+0x430>
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7c:	d204      	bcs.n	8003d88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a3a      	ldr	r2, [r7, #32]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	e0ce      	b.n	8003f26 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d8e:	e0ca      	b.n	8003f26 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d98:	d166      	bne.n	8003e68 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003d9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d827      	bhi.n	8003df2 <UART_SetConfig+0x49a>
 8003da2:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <UART_SetConfig+0x450>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003dcd 	.word	0x08003dcd
 8003dac:	08003dd5 	.word	0x08003dd5
 8003db0:	08003ddd 	.word	0x08003ddd
 8003db4:	08003df3 	.word	0x08003df3
 8003db8:	08003de3 	.word	0x08003de3
 8003dbc:	08003df3 	.word	0x08003df3
 8003dc0:	08003df3 	.word	0x08003df3
 8003dc4:	08003df3 	.word	0x08003df3
 8003dc8:	08003deb 	.word	0x08003deb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe feb2 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dd2:	e014      	b.n	8003dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd4:	f7fe fec4 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8003dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dda:	e010      	b.n	8003dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8003f18 <UART_SetConfig+0x5c0>)
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003de0:	e00d      	b.n	8003dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de2:	f7fe fe39 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003de8:	e009      	b.n	8003dfe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003df0:	e005      	b.n	8003dfe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8090 	beq.w	8003f26 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	4a44      	ldr	r2, [pc, #272]	@ (8003f1c <UART_SetConfig+0x5c4>)
 8003e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e10:	461a      	mov	r2, r3
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e18:	005a      	lsls	r2, r3, #1
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	441a      	add	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d916      	bls.n	8003e60 <UART_SetConfig+0x508>
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e38:	d212      	bcs.n	8003e60 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	8bfb      	ldrh	r3, [r7, #30]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	8bfa      	ldrh	r2, [r7, #30]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	e062      	b.n	8003f26 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e66:	e05e      	b.n	8003f26 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d828      	bhi.n	8003ec2 <UART_SetConfig+0x56a>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <UART_SetConfig+0x520>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	08003ead 	.word	0x08003ead
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003ec3 	.word	0x08003ec3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fe4a 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ea2:	e014      	b.n	8003ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea4:	f7fe fe5c 	bl	8002b60 <HAL_RCC_GetPCLK2Freq>
 8003ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eaa:	e010      	b.n	8003ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <UART_SetConfig+0x5c0>)
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fdd1 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eb8:	e009      	b.n	8003ece <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ec0:	e005      	b.n	8003ece <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d028      	beq.n	8003f26 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	4a10      	ldr	r2, [pc, #64]	@ (8003f1c <UART_SetConfig+0x5c4>)
 8003eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	441a      	add	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	d910      	bls.n	8003f20 <UART_SetConfig+0x5c8>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f04:	d20c      	bcs.n	8003f20 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e009      	b.n	8003f26 <UART_SetConfig+0x5ce>
 8003f12:	bf00      	nop
 8003f14:	40008000 	.word	0x40008000
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	080055f4 	.word	0x080055f4
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f42:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3730      	adds	r7, #48	@ 0x30
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b098      	sub	sp, #96	@ 0x60
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a4:	f7fc ffde 	bl	8001064 <HAL_GetTick>
 80040a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d12f      	bne.n	8004118 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f88e 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d022      	beq.n	8004118 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e6      	bne.n	80040d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e063      	b.n	80041e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0304 	and.w	r3, r3, #4
 8004122:	2b04      	cmp	r3, #4
 8004124:	d149      	bne.n	80041ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004126:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800412e:	2200      	movs	r2, #0
 8004130:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f857 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d03c      	beq.n	80041ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	623b      	str	r3, [r7, #32]
   return(result);
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004160:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e6      	bne.n	8004140 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3308      	adds	r3, #8
 8004178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	60fb      	str	r3, [r7, #12]
   return(result);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004192:	61fa      	str	r2, [r7, #28]
 8004194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	69b9      	ldr	r1, [r7, #24]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	617b      	str	r3, [r7, #20]
   return(result);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e012      	b.n	80041e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3758      	adds	r7, #88	@ 0x58
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	e04f      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d04b      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004202:	f7fc ff2f 	bl	8001064 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	429a      	cmp	r2, r3
 8004210:	d302      	bcc.n	8004218 <UART_WaitOnFlagUntilTimeout+0x30>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e04e      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d037      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b80      	cmp	r3, #128	@ 0x80
 800422e:	d034      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b40      	cmp	r3, #64	@ 0x40
 8004234:	d031      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d110      	bne.n	8004266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2208      	movs	r2, #8
 800424a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f838 	bl	80042c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2208      	movs	r2, #8
 8004256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e029      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004274:	d111      	bne.n	800429a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800427e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f81e 	bl	80042c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d0a0      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b095      	sub	sp, #84	@ 0x54
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	61fb      	str	r3, [r7, #28]
   return(result);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e3      	bne.n	80042fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d118      	bne.n	800436e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	60bb      	str	r3, [r7, #8]
   return(result);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f023 0310 	bic.w	r3, r3, #16
 8004350:	647b      	str	r3, [r7, #68]	@ 0x44
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6979      	ldr	r1, [r7, #20]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	613b      	str	r3, [r7, #16]
   return(result);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e6      	bne.n	800433c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004382:	bf00      	nop
 8004384:	3754      	adds	r7, #84	@ 0x54
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e027      	b.n	80043f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2224      	movs	r2, #36	@ 0x24
 80043b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80043d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004414:	2302      	movs	r3, #2
 8004416:	e02d      	b.n	8004474 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2224      	movs	r2, #36	@ 0x24
 8004424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f84f 	bl	80044f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004490:	2302      	movs	r3, #2
 8004492:	e02d      	b.n	80044f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	@ 0x24
 80044a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f811 	bl	80044f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004504:	2b00      	cmp	r3, #0
 8004506:	d108      	bne.n	800451a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004518:	e031      	b.n	800457e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800451a:	2308      	movs	r3, #8
 800451c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800451e:	2308      	movs	r3, #8
 8004520:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	0e5b      	lsrs	r3, r3, #25
 800452a:	b2db      	uxtb	r3, r3
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	0f5b      	lsrs	r3, r3, #29
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004542:	7bbb      	ldrb	r3, [r7, #14]
 8004544:	7b3a      	ldrb	r2, [r7, #12]
 8004546:	4911      	ldr	r1, [pc, #68]	@ (800458c <UARTEx_SetNbDataToProcess+0x94>)
 8004548:	5c8a      	ldrb	r2, [r1, r2]
 800454a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800454e:	7b3a      	ldrb	r2, [r7, #12]
 8004550:	490f      	ldr	r1, [pc, #60]	@ (8004590 <UARTEx_SetNbDataToProcess+0x98>)
 8004552:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004554:	fb93 f3f2 	sdiv	r3, r3, r2
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004560:	7bfb      	ldrb	r3, [r7, #15]
 8004562:	7b7a      	ldrb	r2, [r7, #13]
 8004564:	4909      	ldr	r1, [pc, #36]	@ (800458c <UARTEx_SetNbDataToProcess+0x94>)
 8004566:	5c8a      	ldrb	r2, [r1, r2]
 8004568:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800456c:	7b7a      	ldrb	r2, [r7, #13]
 800456e:	4908      	ldr	r1, [pc, #32]	@ (8004590 <UARTEx_SetNbDataToProcess+0x98>)
 8004570:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004572:	fb93 f3f2 	sdiv	r3, r3, r2
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	0800560c 	.word	0x0800560c
 8004590:	08005614 	.word	0x08005614

08004594 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045aa:	d10e      	bne.n	80045ca <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0201 	mvn.w	r2, #1
 80045c2:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f804 	bl	80045d2 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <std>:
 80045e8:	2300      	movs	r3, #0
 80045ea:	b510      	push	{r4, lr}
 80045ec:	4604      	mov	r4, r0
 80045ee:	e9c0 3300 	strd	r3, r3, [r0]
 80045f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045f6:	6083      	str	r3, [r0, #8]
 80045f8:	8181      	strh	r1, [r0, #12]
 80045fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80045fc:	81c2      	strh	r2, [r0, #14]
 80045fe:	6183      	str	r3, [r0, #24]
 8004600:	4619      	mov	r1, r3
 8004602:	2208      	movs	r2, #8
 8004604:	305c      	adds	r0, #92	@ 0x5c
 8004606:	f000 f9f9 	bl	80049fc <memset>
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <std+0x58>)
 800460c:	6263      	str	r3, [r4, #36]	@ 0x24
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <std+0x5c>)
 8004610:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <std+0x60>)
 8004614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <std+0x64>)
 8004618:	6323      	str	r3, [r4, #48]	@ 0x30
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <std+0x68>)
 800461c:	6224      	str	r4, [r4, #32]
 800461e:	429c      	cmp	r4, r3
 8004620:	d006      	beq.n	8004630 <std+0x48>
 8004622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004626:	4294      	cmp	r4, r2
 8004628:	d002      	beq.n	8004630 <std+0x48>
 800462a:	33d0      	adds	r3, #208	@ 0xd0
 800462c:	429c      	cmp	r4, r3
 800462e:	d105      	bne.n	800463c <std+0x54>
 8004630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004638:	f000 ba58 	b.w	8004aec <__retarget_lock_init_recursive>
 800463c:	bd10      	pop	{r4, pc}
 800463e:	bf00      	nop
 8004640:	0800484d 	.word	0x0800484d
 8004644:	0800486f 	.word	0x0800486f
 8004648:	080048a7 	.word	0x080048a7
 800464c:	080048cb 	.word	0x080048cb
 8004650:	20000260 	.word	0x20000260

08004654 <stdio_exit_handler>:
 8004654:	4a02      	ldr	r2, [pc, #8]	@ (8004660 <stdio_exit_handler+0xc>)
 8004656:	4903      	ldr	r1, [pc, #12]	@ (8004664 <stdio_exit_handler+0x10>)
 8004658:	4803      	ldr	r0, [pc, #12]	@ (8004668 <stdio_exit_handler+0x14>)
 800465a:	f000 b869 	b.w	8004730 <_fwalk_sglue>
 800465e:	bf00      	nop
 8004660:	2000000c 	.word	0x2000000c
 8004664:	08005389 	.word	0x08005389
 8004668:	2000001c 	.word	0x2000001c

0800466c <cleanup_stdio>:
 800466c:	6841      	ldr	r1, [r0, #4]
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <cleanup_stdio+0x34>)
 8004670:	4299      	cmp	r1, r3
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	d001      	beq.n	800467c <cleanup_stdio+0x10>
 8004678:	f000 fe86 	bl	8005388 <_fflush_r>
 800467c:	68a1      	ldr	r1, [r4, #8]
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <cleanup_stdio+0x38>)
 8004680:	4299      	cmp	r1, r3
 8004682:	d002      	beq.n	800468a <cleanup_stdio+0x1e>
 8004684:	4620      	mov	r0, r4
 8004686:	f000 fe7f 	bl	8005388 <_fflush_r>
 800468a:	68e1      	ldr	r1, [r4, #12]
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <cleanup_stdio+0x3c>)
 800468e:	4299      	cmp	r1, r3
 8004690:	d004      	beq.n	800469c <cleanup_stdio+0x30>
 8004692:	4620      	mov	r0, r4
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f000 be76 	b.w	8005388 <_fflush_r>
 800469c:	bd10      	pop	{r4, pc}
 800469e:	bf00      	nop
 80046a0:	20000260 	.word	0x20000260
 80046a4:	200002c8 	.word	0x200002c8
 80046a8:	20000330 	.word	0x20000330

080046ac <global_stdio_init.part.0>:
 80046ac:	b510      	push	{r4, lr}
 80046ae:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <global_stdio_init.part.0+0x30>)
 80046b0:	4c0b      	ldr	r4, [pc, #44]	@ (80046e0 <global_stdio_init.part.0+0x34>)
 80046b2:	4a0c      	ldr	r2, [pc, #48]	@ (80046e4 <global_stdio_init.part.0+0x38>)
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	4620      	mov	r0, r4
 80046b8:	2200      	movs	r2, #0
 80046ba:	2104      	movs	r1, #4
 80046bc:	f7ff ff94 	bl	80045e8 <std>
 80046c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046c4:	2201      	movs	r2, #1
 80046c6:	2109      	movs	r1, #9
 80046c8:	f7ff ff8e 	bl	80045e8 <std>
 80046cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046d0:	2202      	movs	r2, #2
 80046d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046d6:	2112      	movs	r1, #18
 80046d8:	f7ff bf86 	b.w	80045e8 <std>
 80046dc:	20000398 	.word	0x20000398
 80046e0:	20000260 	.word	0x20000260
 80046e4:	08004655 	.word	0x08004655

080046e8 <__sfp_lock_acquire>:
 80046e8:	4801      	ldr	r0, [pc, #4]	@ (80046f0 <__sfp_lock_acquire+0x8>)
 80046ea:	f000 ba00 	b.w	8004aee <__retarget_lock_acquire_recursive>
 80046ee:	bf00      	nop
 80046f0:	200003a1 	.word	0x200003a1

080046f4 <__sfp_lock_release>:
 80046f4:	4801      	ldr	r0, [pc, #4]	@ (80046fc <__sfp_lock_release+0x8>)
 80046f6:	f000 b9fb 	b.w	8004af0 <__retarget_lock_release_recursive>
 80046fa:	bf00      	nop
 80046fc:	200003a1 	.word	0x200003a1

08004700 <__sinit>:
 8004700:	b510      	push	{r4, lr}
 8004702:	4604      	mov	r4, r0
 8004704:	f7ff fff0 	bl	80046e8 <__sfp_lock_acquire>
 8004708:	6a23      	ldr	r3, [r4, #32]
 800470a:	b11b      	cbz	r3, 8004714 <__sinit+0x14>
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f7ff bff0 	b.w	80046f4 <__sfp_lock_release>
 8004714:	4b04      	ldr	r3, [pc, #16]	@ (8004728 <__sinit+0x28>)
 8004716:	6223      	str	r3, [r4, #32]
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <__sinit+0x2c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f5      	bne.n	800470c <__sinit+0xc>
 8004720:	f7ff ffc4 	bl	80046ac <global_stdio_init.part.0>
 8004724:	e7f2      	b.n	800470c <__sinit+0xc>
 8004726:	bf00      	nop
 8004728:	0800466d 	.word	0x0800466d
 800472c:	20000398 	.word	0x20000398

08004730 <_fwalk_sglue>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	4607      	mov	r7, r0
 8004736:	4688      	mov	r8, r1
 8004738:	4614      	mov	r4, r2
 800473a:	2600      	movs	r6, #0
 800473c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004740:	f1b9 0901 	subs.w	r9, r9, #1
 8004744:	d505      	bpl.n	8004752 <_fwalk_sglue+0x22>
 8004746:	6824      	ldr	r4, [r4, #0]
 8004748:	2c00      	cmp	r4, #0
 800474a:	d1f7      	bne.n	800473c <_fwalk_sglue+0xc>
 800474c:	4630      	mov	r0, r6
 800474e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004752:	89ab      	ldrh	r3, [r5, #12]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d907      	bls.n	8004768 <_fwalk_sglue+0x38>
 8004758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800475c:	3301      	adds	r3, #1
 800475e:	d003      	beq.n	8004768 <_fwalk_sglue+0x38>
 8004760:	4629      	mov	r1, r5
 8004762:	4638      	mov	r0, r7
 8004764:	47c0      	blx	r8
 8004766:	4306      	orrs	r6, r0
 8004768:	3568      	adds	r5, #104	@ 0x68
 800476a:	e7e9      	b.n	8004740 <_fwalk_sglue+0x10>

0800476c <iprintf>:
 800476c:	b40f      	push	{r0, r1, r2, r3}
 800476e:	b507      	push	{r0, r1, r2, lr}
 8004770:	4906      	ldr	r1, [pc, #24]	@ (800478c <iprintf+0x20>)
 8004772:	ab04      	add	r3, sp, #16
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	f853 2b04 	ldr.w	r2, [r3], #4
 800477a:	6881      	ldr	r1, [r0, #8]
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	f000 fadb 	bl	8004d38 <_vfiprintf_r>
 8004782:	b003      	add	sp, #12
 8004784:	f85d eb04 	ldr.w	lr, [sp], #4
 8004788:	b004      	add	sp, #16
 800478a:	4770      	bx	lr
 800478c:	20000018 	.word	0x20000018

08004790 <_puts_r>:
 8004790:	6a03      	ldr	r3, [r0, #32]
 8004792:	b570      	push	{r4, r5, r6, lr}
 8004794:	6884      	ldr	r4, [r0, #8]
 8004796:	4605      	mov	r5, r0
 8004798:	460e      	mov	r6, r1
 800479a:	b90b      	cbnz	r3, 80047a0 <_puts_r+0x10>
 800479c:	f7ff ffb0 	bl	8004700 <__sinit>
 80047a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047a2:	07db      	lsls	r3, r3, #31
 80047a4:	d405      	bmi.n	80047b2 <_puts_r+0x22>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	0598      	lsls	r0, r3, #22
 80047aa:	d402      	bmi.n	80047b2 <_puts_r+0x22>
 80047ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ae:	f000 f99e 	bl	8004aee <__retarget_lock_acquire_recursive>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	0719      	lsls	r1, r3, #28
 80047b6:	d502      	bpl.n	80047be <_puts_r+0x2e>
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d135      	bne.n	800482a <_puts_r+0x9a>
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f8c5 	bl	8004950 <__swsetup_r>
 80047c6:	b380      	cbz	r0, 800482a <_puts_r+0x9a>
 80047c8:	f04f 35ff 	mov.w	r5, #4294967295
 80047cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047ce:	07da      	lsls	r2, r3, #31
 80047d0:	d405      	bmi.n	80047de <_puts_r+0x4e>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	059b      	lsls	r3, r3, #22
 80047d6:	d402      	bmi.n	80047de <_puts_r+0x4e>
 80047d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047da:	f000 f989 	bl	8004af0 <__retarget_lock_release_recursive>
 80047de:	4628      	mov	r0, r5
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da04      	bge.n	80047f0 <_puts_r+0x60>
 80047e6:	69a2      	ldr	r2, [r4, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	dc17      	bgt.n	800481c <_puts_r+0x8c>
 80047ec:	290a      	cmp	r1, #10
 80047ee:	d015      	beq.n	800481c <_puts_r+0x8c>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047fe:	3b01      	subs	r3, #1
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	2900      	cmp	r1, #0
 8004804:	d1ed      	bne.n	80047e2 <_puts_r+0x52>
 8004806:	2b00      	cmp	r3, #0
 8004808:	da11      	bge.n	800482e <_puts_r+0x9e>
 800480a:	4622      	mov	r2, r4
 800480c:	210a      	movs	r1, #10
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f85f 	bl	80048d2 <__swbuf_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d0d7      	beq.n	80047c8 <_puts_r+0x38>
 8004818:	250a      	movs	r5, #10
 800481a:	e7d7      	b.n	80047cc <_puts_r+0x3c>
 800481c:	4622      	mov	r2, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 f857 	bl	80048d2 <__swbuf_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d1e7      	bne.n	80047f8 <_puts_r+0x68>
 8004828:	e7ce      	b.n	80047c8 <_puts_r+0x38>
 800482a:	3e01      	subs	r6, #1
 800482c:	e7e4      	b.n	80047f8 <_puts_r+0x68>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	220a      	movs	r2, #10
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e7ee      	b.n	8004818 <_puts_r+0x88>
	...

0800483c <puts>:
 800483c:	4b02      	ldr	r3, [pc, #8]	@ (8004848 <puts+0xc>)
 800483e:	4601      	mov	r1, r0
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f7ff bfa5 	b.w	8004790 <_puts_r>
 8004846:	bf00      	nop
 8004848:	20000018 	.word	0x20000018

0800484c <__sread>:
 800484c:	b510      	push	{r4, lr}
 800484e:	460c      	mov	r4, r1
 8004850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004854:	f000 f8fc 	bl	8004a50 <_read_r>
 8004858:	2800      	cmp	r0, #0
 800485a:	bfab      	itete	ge
 800485c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800485e:	89a3      	ldrhlt	r3, [r4, #12]
 8004860:	181b      	addge	r3, r3, r0
 8004862:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004866:	bfac      	ite	ge
 8004868:	6563      	strge	r3, [r4, #84]	@ 0x54
 800486a:	81a3      	strhlt	r3, [r4, #12]
 800486c:	bd10      	pop	{r4, pc}

0800486e <__swrite>:
 800486e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	461f      	mov	r7, r3
 8004874:	898b      	ldrh	r3, [r1, #12]
 8004876:	05db      	lsls	r3, r3, #23
 8004878:	4605      	mov	r5, r0
 800487a:	460c      	mov	r4, r1
 800487c:	4616      	mov	r6, r2
 800487e:	d505      	bpl.n	800488c <__swrite+0x1e>
 8004880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004884:	2302      	movs	r3, #2
 8004886:	2200      	movs	r2, #0
 8004888:	f000 f8d0 	bl	8004a2c <_lseek_r>
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004892:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004896:	81a3      	strh	r3, [r4, #12]
 8004898:	4632      	mov	r2, r6
 800489a:	463b      	mov	r3, r7
 800489c:	4628      	mov	r0, r5
 800489e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	f000 b8e7 	b.w	8004a74 <_write_r>

080048a6 <__sseek>:
 80048a6:	b510      	push	{r4, lr}
 80048a8:	460c      	mov	r4, r1
 80048aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ae:	f000 f8bd 	bl	8004a2c <_lseek_r>
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	bf15      	itete	ne
 80048b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048c2:	81a3      	strheq	r3, [r4, #12]
 80048c4:	bf18      	it	ne
 80048c6:	81a3      	strhne	r3, [r4, #12]
 80048c8:	bd10      	pop	{r4, pc}

080048ca <__sclose>:
 80048ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ce:	f000 b89d 	b.w	8004a0c <_close_r>

080048d2 <__swbuf_r>:
 80048d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d4:	460e      	mov	r6, r1
 80048d6:	4614      	mov	r4, r2
 80048d8:	4605      	mov	r5, r0
 80048da:	b118      	cbz	r0, 80048e4 <__swbuf_r+0x12>
 80048dc:	6a03      	ldr	r3, [r0, #32]
 80048de:	b90b      	cbnz	r3, 80048e4 <__swbuf_r+0x12>
 80048e0:	f7ff ff0e 	bl	8004700 <__sinit>
 80048e4:	69a3      	ldr	r3, [r4, #24]
 80048e6:	60a3      	str	r3, [r4, #8]
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	071a      	lsls	r2, r3, #28
 80048ec:	d501      	bpl.n	80048f2 <__swbuf_r+0x20>
 80048ee:	6923      	ldr	r3, [r4, #16]
 80048f0:	b943      	cbnz	r3, 8004904 <__swbuf_r+0x32>
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f82b 	bl	8004950 <__swsetup_r>
 80048fa:	b118      	cbz	r0, 8004904 <__swbuf_r+0x32>
 80048fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004900:	4638      	mov	r0, r7
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	6922      	ldr	r2, [r4, #16]
 8004908:	1a98      	subs	r0, r3, r2
 800490a:	6963      	ldr	r3, [r4, #20]
 800490c:	b2f6      	uxtb	r6, r6
 800490e:	4283      	cmp	r3, r0
 8004910:	4637      	mov	r7, r6
 8004912:	dc05      	bgt.n	8004920 <__swbuf_r+0x4e>
 8004914:	4621      	mov	r1, r4
 8004916:	4628      	mov	r0, r5
 8004918:	f000 fd36 	bl	8005388 <_fflush_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	d1ed      	bne.n	80048fc <__swbuf_r+0x2a>
 8004920:	68a3      	ldr	r3, [r4, #8]
 8004922:	3b01      	subs	r3, #1
 8004924:	60a3      	str	r3, [r4, #8]
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	6022      	str	r2, [r4, #0]
 800492c:	701e      	strb	r6, [r3, #0]
 800492e:	6962      	ldr	r2, [r4, #20]
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	429a      	cmp	r2, r3
 8004934:	d004      	beq.n	8004940 <__swbuf_r+0x6e>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	07db      	lsls	r3, r3, #31
 800493a:	d5e1      	bpl.n	8004900 <__swbuf_r+0x2e>
 800493c:	2e0a      	cmp	r6, #10
 800493e:	d1df      	bne.n	8004900 <__swbuf_r+0x2e>
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	f000 fd20 	bl	8005388 <_fflush_r>
 8004948:	2800      	cmp	r0, #0
 800494a:	d0d9      	beq.n	8004900 <__swbuf_r+0x2e>
 800494c:	e7d6      	b.n	80048fc <__swbuf_r+0x2a>
	...

08004950 <__swsetup_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4b29      	ldr	r3, [pc, #164]	@ (80049f8 <__swsetup_r+0xa8>)
 8004954:	4605      	mov	r5, r0
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	460c      	mov	r4, r1
 800495a:	b118      	cbz	r0, 8004964 <__swsetup_r+0x14>
 800495c:	6a03      	ldr	r3, [r0, #32]
 800495e:	b90b      	cbnz	r3, 8004964 <__swsetup_r+0x14>
 8004960:	f7ff fece 	bl	8004700 <__sinit>
 8004964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004968:	0719      	lsls	r1, r3, #28
 800496a:	d422      	bmi.n	80049b2 <__swsetup_r+0x62>
 800496c:	06da      	lsls	r2, r3, #27
 800496e:	d407      	bmi.n	8004980 <__swsetup_r+0x30>
 8004970:	2209      	movs	r2, #9
 8004972:	602a      	str	r2, [r5, #0]
 8004974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	f04f 30ff 	mov.w	r0, #4294967295
 800497e:	e033      	b.n	80049e8 <__swsetup_r+0x98>
 8004980:	0758      	lsls	r0, r3, #29
 8004982:	d512      	bpl.n	80049aa <__swsetup_r+0x5a>
 8004984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004986:	b141      	cbz	r1, 800499a <__swsetup_r+0x4a>
 8004988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800498c:	4299      	cmp	r1, r3
 800498e:	d002      	beq.n	8004996 <__swsetup_r+0x46>
 8004990:	4628      	mov	r0, r5
 8004992:	f000 f8af 	bl	8004af4 <_free_r>
 8004996:	2300      	movs	r3, #0
 8004998:	6363      	str	r3, [r4, #52]	@ 0x34
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049a0:	81a3      	strh	r3, [r4, #12]
 80049a2:	2300      	movs	r3, #0
 80049a4:	6063      	str	r3, [r4, #4]
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	f043 0308 	orr.w	r3, r3, #8
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	b94b      	cbnz	r3, 80049ca <__swsetup_r+0x7a>
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049c0:	d003      	beq.n	80049ca <__swsetup_r+0x7a>
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 fd2d 	bl	8005424 <__smakebuf_r>
 80049ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049ce:	f013 0201 	ands.w	r2, r3, #1
 80049d2:	d00a      	beq.n	80049ea <__swsetup_r+0x9a>
 80049d4:	2200      	movs	r2, #0
 80049d6:	60a2      	str	r2, [r4, #8]
 80049d8:	6962      	ldr	r2, [r4, #20]
 80049da:	4252      	negs	r2, r2
 80049dc:	61a2      	str	r2, [r4, #24]
 80049de:	6922      	ldr	r2, [r4, #16]
 80049e0:	b942      	cbnz	r2, 80049f4 <__swsetup_r+0xa4>
 80049e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80049e6:	d1c5      	bne.n	8004974 <__swsetup_r+0x24>
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
 80049ea:	0799      	lsls	r1, r3, #30
 80049ec:	bf58      	it	pl
 80049ee:	6962      	ldrpl	r2, [r4, #20]
 80049f0:	60a2      	str	r2, [r4, #8]
 80049f2:	e7f4      	b.n	80049de <__swsetup_r+0x8e>
 80049f4:	2000      	movs	r0, #0
 80049f6:	e7f7      	b.n	80049e8 <__swsetup_r+0x98>
 80049f8:	20000018 	.word	0x20000018

080049fc <memset>:
 80049fc:	4402      	add	r2, r0
 80049fe:	4603      	mov	r3, r0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d100      	bne.n	8004a06 <memset+0xa>
 8004a04:	4770      	bx	lr
 8004a06:	f803 1b01 	strb.w	r1, [r3], #1
 8004a0a:	e7f9      	b.n	8004a00 <memset+0x4>

08004a0c <_close_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	@ (8004a28 <_close_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc fa19 	bl	8000e4e <_close>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_close_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_close_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	2000039c 	.word	0x2000039c

08004a2c <_lseek_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4d07      	ldr	r5, [pc, #28]	@ (8004a4c <_lseek_r+0x20>)
 8004a30:	4604      	mov	r4, r0
 8004a32:	4608      	mov	r0, r1
 8004a34:	4611      	mov	r1, r2
 8004a36:	2200      	movs	r2, #0
 8004a38:	602a      	str	r2, [r5, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f7fc fa2e 	bl	8000e9c <_lseek>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_lseek_r+0x1e>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_lseek_r+0x1e>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	2000039c 	.word	0x2000039c

08004a50 <_read_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4d07      	ldr	r5, [pc, #28]	@ (8004a70 <_read_r+0x20>)
 8004a54:	4604      	mov	r4, r0
 8004a56:	4608      	mov	r0, r1
 8004a58:	4611      	mov	r1, r2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	602a      	str	r2, [r5, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f7fc f9bc 	bl	8000ddc <_read>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_read_r+0x1e>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_read_r+0x1e>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	2000039c 	.word	0x2000039c

08004a74 <_write_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	@ (8004a94 <_write_r+0x20>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fc f9c7 	bl	8000e16 <_write>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_write_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_write_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	2000039c 	.word	0x2000039c

08004a98 <__errno>:
 8004a98:	4b01      	ldr	r3, [pc, #4]	@ (8004aa0 <__errno+0x8>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000018 	.word	0x20000018

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8004adc <__libc_init_array+0x38>)
 8004aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae0 <__libc_init_array+0x3c>)
 8004aaa:	1b64      	subs	r4, r4, r5
 8004aac:	10a4      	asrs	r4, r4, #2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	42a6      	cmp	r6, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ae4 <__libc_init_array+0x40>)
 8004ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ae8 <__libc_init_array+0x44>)
 8004ab8:	f000 fd22 	bl	8005500 <_init>
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	2600      	movs	r6, #0
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004acc:	4798      	blx	r3
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad6:	4798      	blx	r3
 8004ad8:	3601      	adds	r6, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	08005658 	.word	0x08005658
 8004ae0:	08005658 	.word	0x08005658
 8004ae4:	08005658 	.word	0x08005658
 8004ae8:	0800565c 	.word	0x0800565c

08004aec <__retarget_lock_init_recursive>:
 8004aec:	4770      	bx	lr

08004aee <__retarget_lock_acquire_recursive>:
 8004aee:	4770      	bx	lr

08004af0 <__retarget_lock_release_recursive>:
 8004af0:	4770      	bx	lr
	...

08004af4 <_free_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4605      	mov	r5, r0
 8004af8:	2900      	cmp	r1, #0
 8004afa:	d041      	beq.n	8004b80 <_free_r+0x8c>
 8004afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b00:	1f0c      	subs	r4, r1, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfb8      	it	lt
 8004b06:	18e4      	addlt	r4, r4, r3
 8004b08:	f000 f8e0 	bl	8004ccc <__malloc_lock>
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <_free_r+0x90>)
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	b933      	cbnz	r3, 8004b20 <_free_r+0x2c>
 8004b12:	6063      	str	r3, [r4, #4]
 8004b14:	6014      	str	r4, [r2, #0]
 8004b16:	4628      	mov	r0, r5
 8004b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1c:	f000 b8dc 	b.w	8004cd8 <__malloc_unlock>
 8004b20:	42a3      	cmp	r3, r4
 8004b22:	d908      	bls.n	8004b36 <_free_r+0x42>
 8004b24:	6820      	ldr	r0, [r4, #0]
 8004b26:	1821      	adds	r1, r4, r0
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	bf01      	itttt	eq
 8004b2c:	6819      	ldreq	r1, [r3, #0]
 8004b2e:	685b      	ldreq	r3, [r3, #4]
 8004b30:	1809      	addeq	r1, r1, r0
 8004b32:	6021      	streq	r1, [r4, #0]
 8004b34:	e7ed      	b.n	8004b12 <_free_r+0x1e>
 8004b36:	461a      	mov	r2, r3
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b10b      	cbz	r3, 8004b40 <_free_r+0x4c>
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	d9fa      	bls.n	8004b36 <_free_r+0x42>
 8004b40:	6811      	ldr	r1, [r2, #0]
 8004b42:	1850      	adds	r0, r2, r1
 8004b44:	42a0      	cmp	r0, r4
 8004b46:	d10b      	bne.n	8004b60 <_free_r+0x6c>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	4401      	add	r1, r0
 8004b4c:	1850      	adds	r0, r2, r1
 8004b4e:	4283      	cmp	r3, r0
 8004b50:	6011      	str	r1, [r2, #0]
 8004b52:	d1e0      	bne.n	8004b16 <_free_r+0x22>
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	6053      	str	r3, [r2, #4]
 8004b5a:	4408      	add	r0, r1
 8004b5c:	6010      	str	r0, [r2, #0]
 8004b5e:	e7da      	b.n	8004b16 <_free_r+0x22>
 8004b60:	d902      	bls.n	8004b68 <_free_r+0x74>
 8004b62:	230c      	movs	r3, #12
 8004b64:	602b      	str	r3, [r5, #0]
 8004b66:	e7d6      	b.n	8004b16 <_free_r+0x22>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	1821      	adds	r1, r4, r0
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	bf04      	itt	eq
 8004b70:	6819      	ldreq	r1, [r3, #0]
 8004b72:	685b      	ldreq	r3, [r3, #4]
 8004b74:	6063      	str	r3, [r4, #4]
 8004b76:	bf04      	itt	eq
 8004b78:	1809      	addeq	r1, r1, r0
 8004b7a:	6021      	streq	r1, [r4, #0]
 8004b7c:	6054      	str	r4, [r2, #4]
 8004b7e:	e7ca      	b.n	8004b16 <_free_r+0x22>
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
 8004b82:	bf00      	nop
 8004b84:	200003a8 	.word	0x200003a8

08004b88 <sbrk_aligned>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8004bc8 <sbrk_aligned+0x40>)
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	6831      	ldr	r1, [r6, #0]
 8004b90:	4605      	mov	r5, r0
 8004b92:	b911      	cbnz	r1, 8004b9a <sbrk_aligned+0x12>
 8004b94:	f000 fca4 	bl	80054e0 <_sbrk_r>
 8004b98:	6030      	str	r0, [r6, #0]
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 fc9f 	bl	80054e0 <_sbrk_r>
 8004ba2:	1c43      	adds	r3, r0, #1
 8004ba4:	d103      	bne.n	8004bae <sbrk_aligned+0x26>
 8004ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8004baa:	4620      	mov	r0, r4
 8004bac:	bd70      	pop	{r4, r5, r6, pc}
 8004bae:	1cc4      	adds	r4, r0, #3
 8004bb0:	f024 0403 	bic.w	r4, r4, #3
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d0f8      	beq.n	8004baa <sbrk_aligned+0x22>
 8004bb8:	1a21      	subs	r1, r4, r0
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 fc90 	bl	80054e0 <_sbrk_r>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d1f2      	bne.n	8004baa <sbrk_aligned+0x22>
 8004bc4:	e7ef      	b.n	8004ba6 <sbrk_aligned+0x1e>
 8004bc6:	bf00      	nop
 8004bc8:	200003a4 	.word	0x200003a4

08004bcc <_malloc_r>:
 8004bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bd0:	1ccd      	adds	r5, r1, #3
 8004bd2:	f025 0503 	bic.w	r5, r5, #3
 8004bd6:	3508      	adds	r5, #8
 8004bd8:	2d0c      	cmp	r5, #12
 8004bda:	bf38      	it	cc
 8004bdc:	250c      	movcc	r5, #12
 8004bde:	2d00      	cmp	r5, #0
 8004be0:	4606      	mov	r6, r0
 8004be2:	db01      	blt.n	8004be8 <_malloc_r+0x1c>
 8004be4:	42a9      	cmp	r1, r5
 8004be6:	d904      	bls.n	8004bf2 <_malloc_r+0x26>
 8004be8:	230c      	movs	r3, #12
 8004bea:	6033      	str	r3, [r6, #0]
 8004bec:	2000      	movs	r0, #0
 8004bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004cc8 <_malloc_r+0xfc>
 8004bf6:	f000 f869 	bl	8004ccc <__malloc_lock>
 8004bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfe:	461c      	mov	r4, r3
 8004c00:	bb44      	cbnz	r4, 8004c54 <_malloc_r+0x88>
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff ffbf 	bl	8004b88 <sbrk_aligned>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	d158      	bne.n	8004cc2 <_malloc_r+0xf6>
 8004c10:	f8d8 4000 	ldr.w	r4, [r8]
 8004c14:	4627      	mov	r7, r4
 8004c16:	2f00      	cmp	r7, #0
 8004c18:	d143      	bne.n	8004ca2 <_malloc_r+0xd6>
 8004c1a:	2c00      	cmp	r4, #0
 8004c1c:	d04b      	beq.n	8004cb6 <_malloc_r+0xea>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	4639      	mov	r1, r7
 8004c22:	4630      	mov	r0, r6
 8004c24:	eb04 0903 	add.w	r9, r4, r3
 8004c28:	f000 fc5a 	bl	80054e0 <_sbrk_r>
 8004c2c:	4581      	cmp	r9, r0
 8004c2e:	d142      	bne.n	8004cb6 <_malloc_r+0xea>
 8004c30:	6821      	ldr	r1, [r4, #0]
 8004c32:	1a6d      	subs	r5, r5, r1
 8004c34:	4629      	mov	r1, r5
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff ffa6 	bl	8004b88 <sbrk_aligned>
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	d03a      	beq.n	8004cb6 <_malloc_r+0xea>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	442b      	add	r3, r5
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	f8d8 3000 	ldr.w	r3, [r8]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	bb62      	cbnz	r2, 8004ca8 <_malloc_r+0xdc>
 8004c4e:	f8c8 7000 	str.w	r7, [r8]
 8004c52:	e00f      	b.n	8004c74 <_malloc_r+0xa8>
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	1b52      	subs	r2, r2, r5
 8004c58:	d420      	bmi.n	8004c9c <_malloc_r+0xd0>
 8004c5a:	2a0b      	cmp	r2, #11
 8004c5c:	d917      	bls.n	8004c8e <_malloc_r+0xc2>
 8004c5e:	1961      	adds	r1, r4, r5
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	6025      	str	r5, [r4, #0]
 8004c64:	bf18      	it	ne
 8004c66:	6059      	strne	r1, [r3, #4]
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	bf08      	it	eq
 8004c6c:	f8c8 1000 	streq.w	r1, [r8]
 8004c70:	5162      	str	r2, [r4, r5]
 8004c72:	604b      	str	r3, [r1, #4]
 8004c74:	4630      	mov	r0, r6
 8004c76:	f000 f82f 	bl	8004cd8 <__malloc_unlock>
 8004c7a:	f104 000b 	add.w	r0, r4, #11
 8004c7e:	1d23      	adds	r3, r4, #4
 8004c80:	f020 0007 	bic.w	r0, r0, #7
 8004c84:	1ac2      	subs	r2, r0, r3
 8004c86:	bf1c      	itt	ne
 8004c88:	1a1b      	subne	r3, r3, r0
 8004c8a:	50a3      	strne	r3, [r4, r2]
 8004c8c:	e7af      	b.n	8004bee <_malloc_r+0x22>
 8004c8e:	6862      	ldr	r2, [r4, #4]
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	bf0c      	ite	eq
 8004c94:	f8c8 2000 	streq.w	r2, [r8]
 8004c98:	605a      	strne	r2, [r3, #4]
 8004c9a:	e7eb      	b.n	8004c74 <_malloc_r+0xa8>
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	6864      	ldr	r4, [r4, #4]
 8004ca0:	e7ae      	b.n	8004c00 <_malloc_r+0x34>
 8004ca2:	463c      	mov	r4, r7
 8004ca4:	687f      	ldr	r7, [r7, #4]
 8004ca6:	e7b6      	b.n	8004c16 <_malloc_r+0x4a>
 8004ca8:	461a      	mov	r2, r3
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d1fb      	bne.n	8004ca8 <_malloc_r+0xdc>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6053      	str	r3, [r2, #4]
 8004cb4:	e7de      	b.n	8004c74 <_malloc_r+0xa8>
 8004cb6:	230c      	movs	r3, #12
 8004cb8:	6033      	str	r3, [r6, #0]
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f000 f80c 	bl	8004cd8 <__malloc_unlock>
 8004cc0:	e794      	b.n	8004bec <_malloc_r+0x20>
 8004cc2:	6005      	str	r5, [r0, #0]
 8004cc4:	e7d6      	b.n	8004c74 <_malloc_r+0xa8>
 8004cc6:	bf00      	nop
 8004cc8:	200003a8 	.word	0x200003a8

08004ccc <__malloc_lock>:
 8004ccc:	4801      	ldr	r0, [pc, #4]	@ (8004cd4 <__malloc_lock+0x8>)
 8004cce:	f7ff bf0e 	b.w	8004aee <__retarget_lock_acquire_recursive>
 8004cd2:	bf00      	nop
 8004cd4:	200003a0 	.word	0x200003a0

08004cd8 <__malloc_unlock>:
 8004cd8:	4801      	ldr	r0, [pc, #4]	@ (8004ce0 <__malloc_unlock+0x8>)
 8004cda:	f7ff bf09 	b.w	8004af0 <__retarget_lock_release_recursive>
 8004cde:	bf00      	nop
 8004ce0:	200003a0 	.word	0x200003a0

08004ce4 <__sfputc_r>:
 8004ce4:	6893      	ldr	r3, [r2, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	b410      	push	{r4}
 8004cec:	6093      	str	r3, [r2, #8]
 8004cee:	da08      	bge.n	8004d02 <__sfputc_r+0x1e>
 8004cf0:	6994      	ldr	r4, [r2, #24]
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	db01      	blt.n	8004cfa <__sfputc_r+0x16>
 8004cf6:	290a      	cmp	r1, #10
 8004cf8:	d103      	bne.n	8004d02 <__sfputc_r+0x1e>
 8004cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cfe:	f7ff bde8 	b.w	80048d2 <__swbuf_r>
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	1c58      	adds	r0, r3, #1
 8004d06:	6010      	str	r0, [r2, #0]
 8004d08:	7019      	strb	r1, [r3, #0]
 8004d0a:	4608      	mov	r0, r1
 8004d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <__sfputs_r>:
 8004d12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d14:	4606      	mov	r6, r0
 8004d16:	460f      	mov	r7, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	18d5      	adds	r5, r2, r3
 8004d1c:	42ac      	cmp	r4, r5
 8004d1e:	d101      	bne.n	8004d24 <__sfputs_r+0x12>
 8004d20:	2000      	movs	r0, #0
 8004d22:	e007      	b.n	8004d34 <__sfputs_r+0x22>
 8004d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d28:	463a      	mov	r2, r7
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	f7ff ffda 	bl	8004ce4 <__sfputc_r>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d1f3      	bne.n	8004d1c <__sfputs_r+0xa>
 8004d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d38 <_vfiprintf_r>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	b09d      	sub	sp, #116	@ 0x74
 8004d40:	4614      	mov	r4, r2
 8004d42:	4698      	mov	r8, r3
 8004d44:	4606      	mov	r6, r0
 8004d46:	b118      	cbz	r0, 8004d50 <_vfiprintf_r+0x18>
 8004d48:	6a03      	ldr	r3, [r0, #32]
 8004d4a:	b90b      	cbnz	r3, 8004d50 <_vfiprintf_r+0x18>
 8004d4c:	f7ff fcd8 	bl	8004700 <__sinit>
 8004d50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	d405      	bmi.n	8004d62 <_vfiprintf_r+0x2a>
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	059a      	lsls	r2, r3, #22
 8004d5a:	d402      	bmi.n	8004d62 <_vfiprintf_r+0x2a>
 8004d5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d5e:	f7ff fec6 	bl	8004aee <__retarget_lock_acquire_recursive>
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	d501      	bpl.n	8004d6c <_vfiprintf_r+0x34>
 8004d68:	692b      	ldr	r3, [r5, #16]
 8004d6a:	b99b      	cbnz	r3, 8004d94 <_vfiprintf_r+0x5c>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f7ff fdee 	bl	8004950 <__swsetup_r>
 8004d74:	b170      	cbz	r0, 8004d94 <_vfiprintf_r+0x5c>
 8004d76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d78:	07dc      	lsls	r4, r3, #31
 8004d7a:	d504      	bpl.n	8004d86 <_vfiprintf_r+0x4e>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	b01d      	add	sp, #116	@ 0x74
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d86:	89ab      	ldrh	r3, [r5, #12]
 8004d88:	0598      	lsls	r0, r3, #22
 8004d8a:	d4f7      	bmi.n	8004d7c <_vfiprintf_r+0x44>
 8004d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d8e:	f7ff feaf 	bl	8004af0 <__retarget_lock_release_recursive>
 8004d92:	e7f3      	b.n	8004d7c <_vfiprintf_r+0x44>
 8004d94:	2300      	movs	r3, #0
 8004d96:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d98:	2320      	movs	r3, #32
 8004d9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004da2:	2330      	movs	r3, #48	@ 0x30
 8004da4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f54 <_vfiprintf_r+0x21c>
 8004da8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004dac:	f04f 0901 	mov.w	r9, #1
 8004db0:	4623      	mov	r3, r4
 8004db2:	469a      	mov	sl, r3
 8004db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004db8:	b10a      	cbz	r2, 8004dbe <_vfiprintf_r+0x86>
 8004dba:	2a25      	cmp	r2, #37	@ 0x25
 8004dbc:	d1f9      	bne.n	8004db2 <_vfiprintf_r+0x7a>
 8004dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8004dc2:	d00b      	beq.n	8004ddc <_vfiprintf_r+0xa4>
 8004dc4:	465b      	mov	r3, fp
 8004dc6:	4622      	mov	r2, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4630      	mov	r0, r6
 8004dcc:	f7ff ffa1 	bl	8004d12 <__sfputs_r>
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f000 80a7 	beq.w	8004f24 <_vfiprintf_r+0x1ec>
 8004dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004dd8:	445a      	add	r2, fp
 8004dda:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 809f 	beq.w	8004f24 <_vfiprintf_r+0x1ec>
 8004de6:	2300      	movs	r3, #0
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df0:	f10a 0a01 	add.w	sl, sl, #1
 8004df4:	9304      	str	r3, [sp, #16]
 8004df6:	9307      	str	r3, [sp, #28]
 8004df8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dfe:	4654      	mov	r4, sl
 8004e00:	2205      	movs	r2, #5
 8004e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e06:	4853      	ldr	r0, [pc, #332]	@ (8004f54 <_vfiprintf_r+0x21c>)
 8004e08:	f7fb fa0a 	bl	8000220 <memchr>
 8004e0c:	9a04      	ldr	r2, [sp, #16]
 8004e0e:	b9d8      	cbnz	r0, 8004e48 <_vfiprintf_r+0x110>
 8004e10:	06d1      	lsls	r1, r2, #27
 8004e12:	bf44      	itt	mi
 8004e14:	2320      	movmi	r3, #32
 8004e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e1a:	0713      	lsls	r3, r2, #28
 8004e1c:	bf44      	itt	mi
 8004e1e:	232b      	movmi	r3, #43	@ 0x2b
 8004e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e24:	f89a 3000 	ldrb.w	r3, [sl]
 8004e28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e2a:	d015      	beq.n	8004e58 <_vfiprintf_r+0x120>
 8004e2c:	9a07      	ldr	r2, [sp, #28]
 8004e2e:	4654      	mov	r4, sl
 8004e30:	2000      	movs	r0, #0
 8004e32:	f04f 0c0a 	mov.w	ip, #10
 8004e36:	4621      	mov	r1, r4
 8004e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e3c:	3b30      	subs	r3, #48	@ 0x30
 8004e3e:	2b09      	cmp	r3, #9
 8004e40:	d94b      	bls.n	8004eda <_vfiprintf_r+0x1a2>
 8004e42:	b1b0      	cbz	r0, 8004e72 <_vfiprintf_r+0x13a>
 8004e44:	9207      	str	r2, [sp, #28]
 8004e46:	e014      	b.n	8004e72 <_vfiprintf_r+0x13a>
 8004e48:	eba0 0308 	sub.w	r3, r0, r8
 8004e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e50:	4313      	orrs	r3, r2
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	46a2      	mov	sl, r4
 8004e56:	e7d2      	b.n	8004dfe <_vfiprintf_r+0xc6>
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	1d19      	adds	r1, r3, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	9103      	str	r1, [sp, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bfbb      	ittet	lt
 8004e64:	425b      	neglt	r3, r3
 8004e66:	f042 0202 	orrlt.w	r2, r2, #2
 8004e6a:	9307      	strge	r3, [sp, #28]
 8004e6c:	9307      	strlt	r3, [sp, #28]
 8004e6e:	bfb8      	it	lt
 8004e70:	9204      	strlt	r2, [sp, #16]
 8004e72:	7823      	ldrb	r3, [r4, #0]
 8004e74:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e76:	d10a      	bne.n	8004e8e <_vfiprintf_r+0x156>
 8004e78:	7863      	ldrb	r3, [r4, #1]
 8004e7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e7c:	d132      	bne.n	8004ee4 <_vfiprintf_r+0x1ac>
 8004e7e:	9b03      	ldr	r3, [sp, #12]
 8004e80:	1d1a      	adds	r2, r3, #4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	9203      	str	r2, [sp, #12]
 8004e86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e8a:	3402      	adds	r4, #2
 8004e8c:	9305      	str	r3, [sp, #20]
 8004e8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f64 <_vfiprintf_r+0x22c>
 8004e92:	7821      	ldrb	r1, [r4, #0]
 8004e94:	2203      	movs	r2, #3
 8004e96:	4650      	mov	r0, sl
 8004e98:	f7fb f9c2 	bl	8000220 <memchr>
 8004e9c:	b138      	cbz	r0, 8004eae <_vfiprintf_r+0x176>
 8004e9e:	9b04      	ldr	r3, [sp, #16]
 8004ea0:	eba0 000a 	sub.w	r0, r0, sl
 8004ea4:	2240      	movs	r2, #64	@ 0x40
 8004ea6:	4082      	lsls	r2, r0
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	3401      	adds	r4, #1
 8004eac:	9304      	str	r3, [sp, #16]
 8004eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eb2:	4829      	ldr	r0, [pc, #164]	@ (8004f58 <_vfiprintf_r+0x220>)
 8004eb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eb8:	2206      	movs	r2, #6
 8004eba:	f7fb f9b1 	bl	8000220 <memchr>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d03f      	beq.n	8004f42 <_vfiprintf_r+0x20a>
 8004ec2:	4b26      	ldr	r3, [pc, #152]	@ (8004f5c <_vfiprintf_r+0x224>)
 8004ec4:	bb1b      	cbnz	r3, 8004f0e <_vfiprintf_r+0x1d6>
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	3307      	adds	r3, #7
 8004eca:	f023 0307 	bic.w	r3, r3, #7
 8004ece:	3308      	adds	r3, #8
 8004ed0:	9303      	str	r3, [sp, #12]
 8004ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed4:	443b      	add	r3, r7
 8004ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ed8:	e76a      	b.n	8004db0 <_vfiprintf_r+0x78>
 8004eda:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ede:	460c      	mov	r4, r1
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	e7a8      	b.n	8004e36 <_vfiprintf_r+0xfe>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	3401      	adds	r4, #1
 8004ee8:	9305      	str	r3, [sp, #20]
 8004eea:	4619      	mov	r1, r3
 8004eec:	f04f 0c0a 	mov.w	ip, #10
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ef6:	3a30      	subs	r2, #48	@ 0x30
 8004ef8:	2a09      	cmp	r2, #9
 8004efa:	d903      	bls.n	8004f04 <_vfiprintf_r+0x1cc>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0c6      	beq.n	8004e8e <_vfiprintf_r+0x156>
 8004f00:	9105      	str	r1, [sp, #20]
 8004f02:	e7c4      	b.n	8004e8e <_vfiprintf_r+0x156>
 8004f04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f08:	4604      	mov	r4, r0
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e7f0      	b.n	8004ef0 <_vfiprintf_r+0x1b8>
 8004f0e:	ab03      	add	r3, sp, #12
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	462a      	mov	r2, r5
 8004f14:	4b12      	ldr	r3, [pc, #72]	@ (8004f60 <_vfiprintf_r+0x228>)
 8004f16:	a904      	add	r1, sp, #16
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f3af 8000 	nop.w
 8004f1e:	4607      	mov	r7, r0
 8004f20:	1c78      	adds	r0, r7, #1
 8004f22:	d1d6      	bne.n	8004ed2 <_vfiprintf_r+0x19a>
 8004f24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f26:	07d9      	lsls	r1, r3, #31
 8004f28:	d405      	bmi.n	8004f36 <_vfiprintf_r+0x1fe>
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	059a      	lsls	r2, r3, #22
 8004f2e:	d402      	bmi.n	8004f36 <_vfiprintf_r+0x1fe>
 8004f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f32:	f7ff fddd 	bl	8004af0 <__retarget_lock_release_recursive>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	065b      	lsls	r3, r3, #25
 8004f3a:	f53f af1f 	bmi.w	8004d7c <_vfiprintf_r+0x44>
 8004f3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f40:	e71e      	b.n	8004d80 <_vfiprintf_r+0x48>
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	462a      	mov	r2, r5
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <_vfiprintf_r+0x228>)
 8004f4a:	a904      	add	r1, sp, #16
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f879 	bl	8005044 <_printf_i>
 8004f52:	e7e4      	b.n	8004f1e <_vfiprintf_r+0x1e6>
 8004f54:	0800561c 	.word	0x0800561c
 8004f58:	08005626 	.word	0x08005626
 8004f5c:	00000000 	.word	0x00000000
 8004f60:	08004d13 	.word	0x08004d13
 8004f64:	08005622 	.word	0x08005622

08004f68 <_printf_common>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	4616      	mov	r6, r2
 8004f6e:	4698      	mov	r8, r3
 8004f70:	688a      	ldr	r2, [r1, #8]
 8004f72:	690b      	ldr	r3, [r1, #16]
 8004f74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	bfb8      	it	lt
 8004f7c:	4613      	movlt	r3, r2
 8004f7e:	6033      	str	r3, [r6, #0]
 8004f80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f84:	4607      	mov	r7, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	b10a      	cbz	r2, 8004f8e <_printf_common+0x26>
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	6033      	str	r3, [r6, #0]
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	0699      	lsls	r1, r3, #26
 8004f92:	bf42      	ittt	mi
 8004f94:	6833      	ldrmi	r3, [r6, #0]
 8004f96:	3302      	addmi	r3, #2
 8004f98:	6033      	strmi	r3, [r6, #0]
 8004f9a:	6825      	ldr	r5, [r4, #0]
 8004f9c:	f015 0506 	ands.w	r5, r5, #6
 8004fa0:	d106      	bne.n	8004fb0 <_printf_common+0x48>
 8004fa2:	f104 0a19 	add.w	sl, r4, #25
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	6832      	ldr	r2, [r6, #0]
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dc26      	bgt.n	8004ffe <_printf_common+0x96>
 8004fb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fb4:	6822      	ldr	r2, [r4, #0]
 8004fb6:	3b00      	subs	r3, #0
 8004fb8:	bf18      	it	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	0692      	lsls	r2, r2, #26
 8004fbe:	d42b      	bmi.n	8005018 <_printf_common+0xb0>
 8004fc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	47c8      	blx	r9
 8004fca:	3001      	adds	r0, #1
 8004fcc:	d01e      	beq.n	800500c <_printf_common+0xa4>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	6922      	ldr	r2, [r4, #16]
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	bf02      	ittt	eq
 8004fda:	68e5      	ldreq	r5, [r4, #12]
 8004fdc:	6833      	ldreq	r3, [r6, #0]
 8004fde:	1aed      	subeq	r5, r5, r3
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	bf0c      	ite	eq
 8004fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fe8:	2500      	movne	r5, #0
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bfc4      	itt	gt
 8004fee:	1a9b      	subgt	r3, r3, r2
 8004ff0:	18ed      	addgt	r5, r5, r3
 8004ff2:	2600      	movs	r6, #0
 8004ff4:	341a      	adds	r4, #26
 8004ff6:	42b5      	cmp	r5, r6
 8004ff8:	d11a      	bne.n	8005030 <_printf_common+0xc8>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e008      	b.n	8005010 <_printf_common+0xa8>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4652      	mov	r2, sl
 8005002:	4641      	mov	r1, r8
 8005004:	4638      	mov	r0, r7
 8005006:	47c8      	blx	r9
 8005008:	3001      	adds	r0, #1
 800500a:	d103      	bne.n	8005014 <_printf_common+0xac>
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005014:	3501      	adds	r5, #1
 8005016:	e7c6      	b.n	8004fa6 <_printf_common+0x3e>
 8005018:	18e1      	adds	r1, r4, r3
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	2030      	movs	r0, #48	@ 0x30
 800501e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005022:	4422      	add	r2, r4
 8005024:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005028:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800502c:	3302      	adds	r3, #2
 800502e:	e7c7      	b.n	8004fc0 <_printf_common+0x58>
 8005030:	2301      	movs	r3, #1
 8005032:	4622      	mov	r2, r4
 8005034:	4641      	mov	r1, r8
 8005036:	4638      	mov	r0, r7
 8005038:	47c8      	blx	r9
 800503a:	3001      	adds	r0, #1
 800503c:	d0e6      	beq.n	800500c <_printf_common+0xa4>
 800503e:	3601      	adds	r6, #1
 8005040:	e7d9      	b.n	8004ff6 <_printf_common+0x8e>
	...

08005044 <_printf_i>:
 8005044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005048:	7e0f      	ldrb	r7, [r1, #24]
 800504a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800504c:	2f78      	cmp	r7, #120	@ 0x78
 800504e:	4691      	mov	r9, r2
 8005050:	4680      	mov	r8, r0
 8005052:	460c      	mov	r4, r1
 8005054:	469a      	mov	sl, r3
 8005056:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800505a:	d807      	bhi.n	800506c <_printf_i+0x28>
 800505c:	2f62      	cmp	r7, #98	@ 0x62
 800505e:	d80a      	bhi.n	8005076 <_printf_i+0x32>
 8005060:	2f00      	cmp	r7, #0
 8005062:	f000 80d1 	beq.w	8005208 <_printf_i+0x1c4>
 8005066:	2f58      	cmp	r7, #88	@ 0x58
 8005068:	f000 80b8 	beq.w	80051dc <_printf_i+0x198>
 800506c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005070:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005074:	e03a      	b.n	80050ec <_printf_i+0xa8>
 8005076:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800507a:	2b15      	cmp	r3, #21
 800507c:	d8f6      	bhi.n	800506c <_printf_i+0x28>
 800507e:	a101      	add	r1, pc, #4	@ (adr r1, 8005084 <_printf_i+0x40>)
 8005080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005084:	080050dd 	.word	0x080050dd
 8005088:	080050f1 	.word	0x080050f1
 800508c:	0800506d 	.word	0x0800506d
 8005090:	0800506d 	.word	0x0800506d
 8005094:	0800506d 	.word	0x0800506d
 8005098:	0800506d 	.word	0x0800506d
 800509c:	080050f1 	.word	0x080050f1
 80050a0:	0800506d 	.word	0x0800506d
 80050a4:	0800506d 	.word	0x0800506d
 80050a8:	0800506d 	.word	0x0800506d
 80050ac:	0800506d 	.word	0x0800506d
 80050b0:	080051ef 	.word	0x080051ef
 80050b4:	0800511b 	.word	0x0800511b
 80050b8:	080051a9 	.word	0x080051a9
 80050bc:	0800506d 	.word	0x0800506d
 80050c0:	0800506d 	.word	0x0800506d
 80050c4:	08005211 	.word	0x08005211
 80050c8:	0800506d 	.word	0x0800506d
 80050cc:	0800511b 	.word	0x0800511b
 80050d0:	0800506d 	.word	0x0800506d
 80050d4:	0800506d 	.word	0x0800506d
 80050d8:	080051b1 	.word	0x080051b1
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6032      	str	r2, [r6, #0]
 80050e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050ec:	2301      	movs	r3, #1
 80050ee:	e09c      	b.n	800522a <_printf_i+0x1e6>
 80050f0:	6833      	ldr	r3, [r6, #0]
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	1d19      	adds	r1, r3, #4
 80050f6:	6031      	str	r1, [r6, #0]
 80050f8:	0606      	lsls	r6, r0, #24
 80050fa:	d501      	bpl.n	8005100 <_printf_i+0xbc>
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	e003      	b.n	8005108 <_printf_i+0xc4>
 8005100:	0645      	lsls	r5, r0, #25
 8005102:	d5fb      	bpl.n	80050fc <_printf_i+0xb8>
 8005104:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005108:	2d00      	cmp	r5, #0
 800510a:	da03      	bge.n	8005114 <_printf_i+0xd0>
 800510c:	232d      	movs	r3, #45	@ 0x2d
 800510e:	426d      	negs	r5, r5
 8005110:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005114:	4858      	ldr	r0, [pc, #352]	@ (8005278 <_printf_i+0x234>)
 8005116:	230a      	movs	r3, #10
 8005118:	e011      	b.n	800513e <_printf_i+0xfa>
 800511a:	6821      	ldr	r1, [r4, #0]
 800511c:	6833      	ldr	r3, [r6, #0]
 800511e:	0608      	lsls	r0, r1, #24
 8005120:	f853 5b04 	ldr.w	r5, [r3], #4
 8005124:	d402      	bmi.n	800512c <_printf_i+0xe8>
 8005126:	0649      	lsls	r1, r1, #25
 8005128:	bf48      	it	mi
 800512a:	b2ad      	uxthmi	r5, r5
 800512c:	2f6f      	cmp	r7, #111	@ 0x6f
 800512e:	4852      	ldr	r0, [pc, #328]	@ (8005278 <_printf_i+0x234>)
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	bf14      	ite	ne
 8005134:	230a      	movne	r3, #10
 8005136:	2308      	moveq	r3, #8
 8005138:	2100      	movs	r1, #0
 800513a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800513e:	6866      	ldr	r6, [r4, #4]
 8005140:	60a6      	str	r6, [r4, #8]
 8005142:	2e00      	cmp	r6, #0
 8005144:	db05      	blt.n	8005152 <_printf_i+0x10e>
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	432e      	orrs	r6, r5
 800514a:	f021 0104 	bic.w	r1, r1, #4
 800514e:	6021      	str	r1, [r4, #0]
 8005150:	d04b      	beq.n	80051ea <_printf_i+0x1a6>
 8005152:	4616      	mov	r6, r2
 8005154:	fbb5 f1f3 	udiv	r1, r5, r3
 8005158:	fb03 5711 	mls	r7, r3, r1, r5
 800515c:	5dc7      	ldrb	r7, [r0, r7]
 800515e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005162:	462f      	mov	r7, r5
 8005164:	42bb      	cmp	r3, r7
 8005166:	460d      	mov	r5, r1
 8005168:	d9f4      	bls.n	8005154 <_printf_i+0x110>
 800516a:	2b08      	cmp	r3, #8
 800516c:	d10b      	bne.n	8005186 <_printf_i+0x142>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	07df      	lsls	r7, r3, #31
 8005172:	d508      	bpl.n	8005186 <_printf_i+0x142>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	6861      	ldr	r1, [r4, #4]
 8005178:	4299      	cmp	r1, r3
 800517a:	bfde      	ittt	le
 800517c:	2330      	movle	r3, #48	@ 0x30
 800517e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005182:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005186:	1b92      	subs	r2, r2, r6
 8005188:	6122      	str	r2, [r4, #16]
 800518a:	f8cd a000 	str.w	sl, [sp]
 800518e:	464b      	mov	r3, r9
 8005190:	aa03      	add	r2, sp, #12
 8005192:	4621      	mov	r1, r4
 8005194:	4640      	mov	r0, r8
 8005196:	f7ff fee7 	bl	8004f68 <_printf_common>
 800519a:	3001      	adds	r0, #1
 800519c:	d14a      	bne.n	8005234 <_printf_i+0x1f0>
 800519e:	f04f 30ff 	mov.w	r0, #4294967295
 80051a2:	b004      	add	sp, #16
 80051a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	f043 0320 	orr.w	r3, r3, #32
 80051ae:	6023      	str	r3, [r4, #0]
 80051b0:	4832      	ldr	r0, [pc, #200]	@ (800527c <_printf_i+0x238>)
 80051b2:	2778      	movs	r7, #120	@ 0x78
 80051b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	6831      	ldr	r1, [r6, #0]
 80051bc:	061f      	lsls	r7, r3, #24
 80051be:	f851 5b04 	ldr.w	r5, [r1], #4
 80051c2:	d402      	bmi.n	80051ca <_printf_i+0x186>
 80051c4:	065f      	lsls	r7, r3, #25
 80051c6:	bf48      	it	mi
 80051c8:	b2ad      	uxthmi	r5, r5
 80051ca:	6031      	str	r1, [r6, #0]
 80051cc:	07d9      	lsls	r1, r3, #31
 80051ce:	bf44      	itt	mi
 80051d0:	f043 0320 	orrmi.w	r3, r3, #32
 80051d4:	6023      	strmi	r3, [r4, #0]
 80051d6:	b11d      	cbz	r5, 80051e0 <_printf_i+0x19c>
 80051d8:	2310      	movs	r3, #16
 80051da:	e7ad      	b.n	8005138 <_printf_i+0xf4>
 80051dc:	4826      	ldr	r0, [pc, #152]	@ (8005278 <_printf_i+0x234>)
 80051de:	e7e9      	b.n	80051b4 <_printf_i+0x170>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	f023 0320 	bic.w	r3, r3, #32
 80051e6:	6023      	str	r3, [r4, #0]
 80051e8:	e7f6      	b.n	80051d8 <_printf_i+0x194>
 80051ea:	4616      	mov	r6, r2
 80051ec:	e7bd      	b.n	800516a <_printf_i+0x126>
 80051ee:	6833      	ldr	r3, [r6, #0]
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	6961      	ldr	r1, [r4, #20]
 80051f4:	1d18      	adds	r0, r3, #4
 80051f6:	6030      	str	r0, [r6, #0]
 80051f8:	062e      	lsls	r6, r5, #24
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	d501      	bpl.n	8005202 <_printf_i+0x1be>
 80051fe:	6019      	str	r1, [r3, #0]
 8005200:	e002      	b.n	8005208 <_printf_i+0x1c4>
 8005202:	0668      	lsls	r0, r5, #25
 8005204:	d5fb      	bpl.n	80051fe <_printf_i+0x1ba>
 8005206:	8019      	strh	r1, [r3, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	4616      	mov	r6, r2
 800520e:	e7bc      	b.n	800518a <_printf_i+0x146>
 8005210:	6833      	ldr	r3, [r6, #0]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	6032      	str	r2, [r6, #0]
 8005216:	681e      	ldr	r6, [r3, #0]
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	2100      	movs	r1, #0
 800521c:	4630      	mov	r0, r6
 800521e:	f7fa ffff 	bl	8000220 <memchr>
 8005222:	b108      	cbz	r0, 8005228 <_printf_i+0x1e4>
 8005224:	1b80      	subs	r0, r0, r6
 8005226:	6060      	str	r0, [r4, #4]
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2300      	movs	r3, #0
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005232:	e7aa      	b.n	800518a <_printf_i+0x146>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	4632      	mov	r2, r6
 8005238:	4649      	mov	r1, r9
 800523a:	4640      	mov	r0, r8
 800523c:	47d0      	blx	sl
 800523e:	3001      	adds	r0, #1
 8005240:	d0ad      	beq.n	800519e <_printf_i+0x15a>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	079b      	lsls	r3, r3, #30
 8005246:	d413      	bmi.n	8005270 <_printf_i+0x22c>
 8005248:	68e0      	ldr	r0, [r4, #12]
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	4298      	cmp	r0, r3
 800524e:	bfb8      	it	lt
 8005250:	4618      	movlt	r0, r3
 8005252:	e7a6      	b.n	80051a2 <_printf_i+0x15e>
 8005254:	2301      	movs	r3, #1
 8005256:	4632      	mov	r2, r6
 8005258:	4649      	mov	r1, r9
 800525a:	4640      	mov	r0, r8
 800525c:	47d0      	blx	sl
 800525e:	3001      	adds	r0, #1
 8005260:	d09d      	beq.n	800519e <_printf_i+0x15a>
 8005262:	3501      	adds	r5, #1
 8005264:	68e3      	ldr	r3, [r4, #12]
 8005266:	9903      	ldr	r1, [sp, #12]
 8005268:	1a5b      	subs	r3, r3, r1
 800526a:	42ab      	cmp	r3, r5
 800526c:	dcf2      	bgt.n	8005254 <_printf_i+0x210>
 800526e:	e7eb      	b.n	8005248 <_printf_i+0x204>
 8005270:	2500      	movs	r5, #0
 8005272:	f104 0619 	add.w	r6, r4, #25
 8005276:	e7f5      	b.n	8005264 <_printf_i+0x220>
 8005278:	0800562d 	.word	0x0800562d
 800527c:	0800563e 	.word	0x0800563e

08005280 <__sflush_r>:
 8005280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	0716      	lsls	r6, r2, #28
 800528a:	4605      	mov	r5, r0
 800528c:	460c      	mov	r4, r1
 800528e:	d454      	bmi.n	800533a <__sflush_r+0xba>
 8005290:	684b      	ldr	r3, [r1, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	dc02      	bgt.n	800529c <__sflush_r+0x1c>
 8005296:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	dd48      	ble.n	800532e <__sflush_r+0xae>
 800529c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800529e:	2e00      	cmp	r6, #0
 80052a0:	d045      	beq.n	800532e <__sflush_r+0xae>
 80052a2:	2300      	movs	r3, #0
 80052a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052a8:	682f      	ldr	r7, [r5, #0]
 80052aa:	6a21      	ldr	r1, [r4, #32]
 80052ac:	602b      	str	r3, [r5, #0]
 80052ae:	d030      	beq.n	8005312 <__sflush_r+0x92>
 80052b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	0759      	lsls	r1, r3, #29
 80052b6:	d505      	bpl.n	80052c4 <__sflush_r+0x44>
 80052b8:	6863      	ldr	r3, [r4, #4]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052be:	b10b      	cbz	r3, 80052c4 <__sflush_r+0x44>
 80052c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	2300      	movs	r3, #0
 80052c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052c8:	6a21      	ldr	r1, [r4, #32]
 80052ca:	4628      	mov	r0, r5
 80052cc:	47b0      	blx	r6
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	89a3      	ldrh	r3, [r4, #12]
 80052d2:	d106      	bne.n	80052e2 <__sflush_r+0x62>
 80052d4:	6829      	ldr	r1, [r5, #0]
 80052d6:	291d      	cmp	r1, #29
 80052d8:	d82b      	bhi.n	8005332 <__sflush_r+0xb2>
 80052da:	4a2a      	ldr	r2, [pc, #168]	@ (8005384 <__sflush_r+0x104>)
 80052dc:	40ca      	lsrs	r2, r1
 80052de:	07d6      	lsls	r6, r2, #31
 80052e0:	d527      	bpl.n	8005332 <__sflush_r+0xb2>
 80052e2:	2200      	movs	r2, #0
 80052e4:	6062      	str	r2, [r4, #4]
 80052e6:	04d9      	lsls	r1, r3, #19
 80052e8:	6922      	ldr	r2, [r4, #16]
 80052ea:	6022      	str	r2, [r4, #0]
 80052ec:	d504      	bpl.n	80052f8 <__sflush_r+0x78>
 80052ee:	1c42      	adds	r2, r0, #1
 80052f0:	d101      	bne.n	80052f6 <__sflush_r+0x76>
 80052f2:	682b      	ldr	r3, [r5, #0]
 80052f4:	b903      	cbnz	r3, 80052f8 <__sflush_r+0x78>
 80052f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80052f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052fa:	602f      	str	r7, [r5, #0]
 80052fc:	b1b9      	cbz	r1, 800532e <__sflush_r+0xae>
 80052fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005302:	4299      	cmp	r1, r3
 8005304:	d002      	beq.n	800530c <__sflush_r+0x8c>
 8005306:	4628      	mov	r0, r5
 8005308:	f7ff fbf4 	bl	8004af4 <_free_r>
 800530c:	2300      	movs	r3, #0
 800530e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005310:	e00d      	b.n	800532e <__sflush_r+0xae>
 8005312:	2301      	movs	r3, #1
 8005314:	4628      	mov	r0, r5
 8005316:	47b0      	blx	r6
 8005318:	4602      	mov	r2, r0
 800531a:	1c50      	adds	r0, r2, #1
 800531c:	d1c9      	bne.n	80052b2 <__sflush_r+0x32>
 800531e:	682b      	ldr	r3, [r5, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0c6      	beq.n	80052b2 <__sflush_r+0x32>
 8005324:	2b1d      	cmp	r3, #29
 8005326:	d001      	beq.n	800532c <__sflush_r+0xac>
 8005328:	2b16      	cmp	r3, #22
 800532a:	d11e      	bne.n	800536a <__sflush_r+0xea>
 800532c:	602f      	str	r7, [r5, #0]
 800532e:	2000      	movs	r0, #0
 8005330:	e022      	b.n	8005378 <__sflush_r+0xf8>
 8005332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005336:	b21b      	sxth	r3, r3
 8005338:	e01b      	b.n	8005372 <__sflush_r+0xf2>
 800533a:	690f      	ldr	r7, [r1, #16]
 800533c:	2f00      	cmp	r7, #0
 800533e:	d0f6      	beq.n	800532e <__sflush_r+0xae>
 8005340:	0793      	lsls	r3, r2, #30
 8005342:	680e      	ldr	r6, [r1, #0]
 8005344:	bf08      	it	eq
 8005346:	694b      	ldreq	r3, [r1, #20]
 8005348:	600f      	str	r7, [r1, #0]
 800534a:	bf18      	it	ne
 800534c:	2300      	movne	r3, #0
 800534e:	eba6 0807 	sub.w	r8, r6, r7
 8005352:	608b      	str	r3, [r1, #8]
 8005354:	f1b8 0f00 	cmp.w	r8, #0
 8005358:	dde9      	ble.n	800532e <__sflush_r+0xae>
 800535a:	6a21      	ldr	r1, [r4, #32]
 800535c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800535e:	4643      	mov	r3, r8
 8005360:	463a      	mov	r2, r7
 8005362:	4628      	mov	r0, r5
 8005364:	47b0      	blx	r6
 8005366:	2800      	cmp	r0, #0
 8005368:	dc08      	bgt.n	800537c <__sflush_r+0xfc>
 800536a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800536e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005372:	81a3      	strh	r3, [r4, #12]
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	4407      	add	r7, r0
 800537e:	eba8 0800 	sub.w	r8, r8, r0
 8005382:	e7e7      	b.n	8005354 <__sflush_r+0xd4>
 8005384:	20400001 	.word	0x20400001

08005388 <_fflush_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	690b      	ldr	r3, [r1, #16]
 800538c:	4605      	mov	r5, r0
 800538e:	460c      	mov	r4, r1
 8005390:	b913      	cbnz	r3, 8005398 <_fflush_r+0x10>
 8005392:	2500      	movs	r5, #0
 8005394:	4628      	mov	r0, r5
 8005396:	bd38      	pop	{r3, r4, r5, pc}
 8005398:	b118      	cbz	r0, 80053a2 <_fflush_r+0x1a>
 800539a:	6a03      	ldr	r3, [r0, #32]
 800539c:	b90b      	cbnz	r3, 80053a2 <_fflush_r+0x1a>
 800539e:	f7ff f9af 	bl	8004700 <__sinit>
 80053a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f3      	beq.n	8005392 <_fflush_r+0xa>
 80053aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053ac:	07d0      	lsls	r0, r2, #31
 80053ae:	d404      	bmi.n	80053ba <_fflush_r+0x32>
 80053b0:	0599      	lsls	r1, r3, #22
 80053b2:	d402      	bmi.n	80053ba <_fflush_r+0x32>
 80053b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053b6:	f7ff fb9a 	bl	8004aee <__retarget_lock_acquire_recursive>
 80053ba:	4628      	mov	r0, r5
 80053bc:	4621      	mov	r1, r4
 80053be:	f7ff ff5f 	bl	8005280 <__sflush_r>
 80053c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053c4:	07da      	lsls	r2, r3, #31
 80053c6:	4605      	mov	r5, r0
 80053c8:	d4e4      	bmi.n	8005394 <_fflush_r+0xc>
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	059b      	lsls	r3, r3, #22
 80053ce:	d4e1      	bmi.n	8005394 <_fflush_r+0xc>
 80053d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053d2:	f7ff fb8d 	bl	8004af0 <__retarget_lock_release_recursive>
 80053d6:	e7dd      	b.n	8005394 <_fflush_r+0xc>

080053d8 <__swhatbuf_r>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	460c      	mov	r4, r1
 80053dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e0:	2900      	cmp	r1, #0
 80053e2:	b096      	sub	sp, #88	@ 0x58
 80053e4:	4615      	mov	r5, r2
 80053e6:	461e      	mov	r6, r3
 80053e8:	da0d      	bge.n	8005406 <__swhatbuf_r+0x2e>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	bf14      	ite	ne
 80053f6:	2340      	movne	r3, #64	@ 0x40
 80053f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053fc:	2000      	movs	r0, #0
 80053fe:	6031      	str	r1, [r6, #0]
 8005400:	602b      	str	r3, [r5, #0]
 8005402:	b016      	add	sp, #88	@ 0x58
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	466a      	mov	r2, sp
 8005408:	f000 f848 	bl	800549c <_fstat_r>
 800540c:	2800      	cmp	r0, #0
 800540e:	dbec      	blt.n	80053ea <__swhatbuf_r+0x12>
 8005410:	9901      	ldr	r1, [sp, #4]
 8005412:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005416:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800541a:	4259      	negs	r1, r3
 800541c:	4159      	adcs	r1, r3
 800541e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005422:	e7eb      	b.n	80053fc <__swhatbuf_r+0x24>

08005424 <__smakebuf_r>:
 8005424:	898b      	ldrh	r3, [r1, #12]
 8005426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005428:	079d      	lsls	r5, r3, #30
 800542a:	4606      	mov	r6, r0
 800542c:	460c      	mov	r4, r1
 800542e:	d507      	bpl.n	8005440 <__smakebuf_r+0x1c>
 8005430:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	2301      	movs	r3, #1
 800543a:	6163      	str	r3, [r4, #20]
 800543c:	b003      	add	sp, #12
 800543e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005440:	ab01      	add	r3, sp, #4
 8005442:	466a      	mov	r2, sp
 8005444:	f7ff ffc8 	bl	80053d8 <__swhatbuf_r>
 8005448:	9f00      	ldr	r7, [sp, #0]
 800544a:	4605      	mov	r5, r0
 800544c:	4639      	mov	r1, r7
 800544e:	4630      	mov	r0, r6
 8005450:	f7ff fbbc 	bl	8004bcc <_malloc_r>
 8005454:	b948      	cbnz	r0, 800546a <__smakebuf_r+0x46>
 8005456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800545a:	059a      	lsls	r2, r3, #22
 800545c:	d4ee      	bmi.n	800543c <__smakebuf_r+0x18>
 800545e:	f023 0303 	bic.w	r3, r3, #3
 8005462:	f043 0302 	orr.w	r3, r3, #2
 8005466:	81a3      	strh	r3, [r4, #12]
 8005468:	e7e2      	b.n	8005430 <__smakebuf_r+0xc>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	6020      	str	r0, [r4, #0]
 800546e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005472:	81a3      	strh	r3, [r4, #12]
 8005474:	9b01      	ldr	r3, [sp, #4]
 8005476:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800547a:	b15b      	cbz	r3, 8005494 <__smakebuf_r+0x70>
 800547c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005480:	4630      	mov	r0, r6
 8005482:	f000 f81d 	bl	80054c0 <_isatty_r>
 8005486:	b128      	cbz	r0, 8005494 <__smakebuf_r+0x70>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	f043 0301 	orr.w	r3, r3, #1
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	431d      	orrs	r5, r3
 8005498:	81a5      	strh	r5, [r4, #12]
 800549a:	e7cf      	b.n	800543c <__smakebuf_r+0x18>

0800549c <_fstat_r>:
 800549c:	b538      	push	{r3, r4, r5, lr}
 800549e:	4d07      	ldr	r5, [pc, #28]	@ (80054bc <_fstat_r+0x20>)
 80054a0:	2300      	movs	r3, #0
 80054a2:	4604      	mov	r4, r0
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	602b      	str	r3, [r5, #0]
 80054aa:	f7fb fcdc 	bl	8000e66 <_fstat>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	d102      	bne.n	80054b8 <_fstat_r+0x1c>
 80054b2:	682b      	ldr	r3, [r5, #0]
 80054b4:	b103      	cbz	r3, 80054b8 <_fstat_r+0x1c>
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	bd38      	pop	{r3, r4, r5, pc}
 80054ba:	bf00      	nop
 80054bc:	2000039c 	.word	0x2000039c

080054c0 <_isatty_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d06      	ldr	r5, [pc, #24]	@ (80054dc <_isatty_r+0x1c>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	f7fb fcdb 	bl	8000e86 <_isatty>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_isatty_r+0x1a>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_isatty_r+0x1a>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	2000039c 	.word	0x2000039c

080054e0 <_sbrk_r>:
 80054e0:	b538      	push	{r3, r4, r5, lr}
 80054e2:	4d06      	ldr	r5, [pc, #24]	@ (80054fc <_sbrk_r+0x1c>)
 80054e4:	2300      	movs	r3, #0
 80054e6:	4604      	mov	r4, r0
 80054e8:	4608      	mov	r0, r1
 80054ea:	602b      	str	r3, [r5, #0]
 80054ec:	f7fb fce4 	bl	8000eb8 <_sbrk>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_sbrk_r+0x1a>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_sbrk_r+0x1a>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	2000039c 	.word	0x2000039c

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
