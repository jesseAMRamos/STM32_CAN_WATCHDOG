
GOD_PLEASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003284  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800345c  0800345c  0000445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e4  080034e4  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080034e4  080034e4  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080034e4  080034e4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000044e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034e8  080034e8  000044e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080034ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000068  08003554  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003554  000052c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b9  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e38  00000000  00000000  00010251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00012090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ad  00000000  00000000  00012c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef8e  00000000  00000000  000134dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c63a  00000000  00000000  0003246b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0b27  00000000  00000000  0003eaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff5cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003518  00000000  00000000  000ff610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00102b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003444 	.word	0x08003444

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08003444 	.word	0x08003444

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021e:	f000 fbfa 	bl	8000a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000222:	f000 f8a3 	bl	800036c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_FDCAN1_Init();
 8000226:	f000 f8ed 	bl	8000404 <MX_FDCAN1_Init>
  HAL_FDCAN_Start(&hfdcan1);
 800022a:	4847      	ldr	r0, [pc, #284]	@ (8000348 <main+0x130>)
 800022c:	f000 fece 	bl	8000fcc <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	2101      	movs	r1, #1
 8000234:	4844      	ldr	r0, [pc, #272]	@ (8000348 <main+0x130>)
 8000236:	f000 fef1 	bl	800101c <HAL_FDCAN_ActivateNotification>
  lastCANMessageTick = HAL_GetTick();
 800023a:	f000 fc51 	bl	8000ae0 <HAL_GetTick>
 800023e:	4603      	mov	r3, r0
 8000240:	4a42      	ldr	r2, [pc, #264]	@ (800034c <main+0x134>)
 8000242:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000244:	f000 f984 	bl	8000550 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000248:	f000 f8dc 	bl	8000404 <MX_FDCAN1_Init>
  MX_WWDG_Init();
 800024c:	f000 f960 	bl	8000510 <MX_WWDG_Init>
  MX_SPI1_Init();
 8000250:	f000 f920 	bl	8000494 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t currentTick = HAL_GetTick();
 8000254:	f000 fc44 	bl	8000ae0 <HAL_GetTick>
 8000258:	60f8      	str	r0, [r7, #12]
	  uint32_t psr = hfdcan1.Instance->PSR;
 800025a:	4b3b      	ldr	r3, [pc, #236]	@ (8000348 <main+0x130>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000260:	60bb      	str	r3, [r7, #8]
	  uint8_t lec = psr & 0x7;
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	f003 0307 	and.w	r3, r3, #7
 800026a:	71fb      	strb	r3, [r7, #7]
	  if ((currentTick - lastCANMessageTick) > CAN_TIMEOUT_MS){
 800026c:	4b37      	ldr	r3, [pc, #220]	@ (800034c <main+0x134>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	1ad3      	subs	r3, r2, r3
 8000274:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000278:	4293      	cmp	r3, r2
 800027a:	d909      	bls.n	8000290 <main+0x78>
	          printf("CAN timeout occurred!\n");
 800027c:	4834      	ldr	r0, [pc, #208]	@ (8000350 <main+0x138>)
 800027e:	f002 fd4d 	bl	8002d1c <puts>
	          HAL_GPIO_WritePin(GPIOA,PIN3_Pin,GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028c:	f001 fb38 	bl	8001900 <HAL_GPIO_WritePin>
	          // Optional: Reset system
	          ///NVIC_SystemReset();
	  }
	  if ((hfdcan1.Instance->PSR & FDCAN_PSR_BO) != 0){
 8000290:	4b2d      	ldr	r3, [pc, #180]	@ (8000348 <main+0x130>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800029a:	2b00      	cmp	r3, #0
 800029c:	d006      	beq.n	80002ac <main+0x94>
	  	    // Bus Off = severe fault (e.g., shorted lines)
	  	    HAL_GPIO_WritePin(GPIOA, PIN3_Pin, GPIO_PIN_RESET); // Indicate fault
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f001 fb2a 	bl	8001900 <HAL_GPIO_WritePin>
	  }
	  if ((currentTick - lastRateCheckTick) > RATE_CHECK_WINDOW_MS) {
 80002ac:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <main+0x13c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	1ad3      	subs	r3, r2, r3
 80002b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d915      	bls.n	80002e8 <main+0xd0>
	      if (canMessageCount > MAX_EXPECTED_MSGS) {
 80002bc:	4b26      	ldr	r3, [pc, #152]	@ (8000358 <main+0x140>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d909      	bls.n	80002dc <main+0xc4>
	          printf("Blabbering idiot fault detected!\n");
 80002c8:	4824      	ldr	r0, [pc, #144]	@ (800035c <main+0x144>)
 80002ca:	f002 fd27 	bl	8002d1c <puts>
	          HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d8:	f001 fb12 	bl	8001900 <HAL_GPIO_WritePin>
	      }
	      canMessageCount = 0;
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <main+0x140>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
	      lastRateCheckTick = currentTick;
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <main+0x13c>)
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	6013      	str	r3, [r2, #0]
	  }
	  switch(lec){
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d01c      	beq.n	8000328 <main+0x110>
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	dc25      	bgt.n	800033e <main+0x126>
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d002      	beq.n	80002fc <main+0xe4>
 80002f6:	2b02      	cmp	r3, #2
 80002f8:	d00b      	beq.n	8000312 <main+0xfa>
 80002fa:	e020      	b.n	800033e <main+0x126>
	  	  case 0x1: printf("Stuff error\n"); HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_RESET);break;
 80002fc:	4818      	ldr	r0, [pc, #96]	@ (8000360 <main+0x148>)
 80002fe:	f002 fd0d 	bl	8002d1c <puts>
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800030c:	f001 faf8 	bl	8001900 <HAL_GPIO_WritePin>
 8000310:	e015      	b.n	800033e <main+0x126>
	  	  case 0x2: printf("Form error\n"); HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_RESET);break;
 8000312:	4814      	ldr	r0, [pc, #80]	@ (8000364 <main+0x14c>)
 8000314:	f002 fd02 	bl	8002d1c <puts>
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800031e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000322:	f001 faed 	bl	8001900 <HAL_GPIO_WritePin>
 8000326:	e00a      	b.n	800033e <main+0x126>
	  	  case 0x3: printf("ACK error (likely no other node)\n"); HAL_GPIO_WritePin(GPIOA, PIN8_Pin, GPIO_PIN_RESET);break;
 8000328:	480f      	ldr	r0, [pc, #60]	@ (8000368 <main+0x150>)
 800032a:	f002 fcf7 	bl	8002d1c <puts>
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000334:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000338:	f001 fae2 	bl	8001900 <HAL_GPIO_WritePin>
 800033c:	bf00      	nop
	  }
	  lastCANMessageTick = currentTick;
 800033e:	4a03      	ldr	r2, [pc, #12]	@ (800034c <main+0x134>)
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	6013      	str	r3, [r2, #0]
  {
 8000344:	e786      	b.n	8000254 <main+0x3c>
 8000346:	bf00      	nop
 8000348:	20000084 	.word	0x20000084
 800034c:	20000160 	.word	0x20000160
 8000350:	0800345c 	.word	0x0800345c
 8000354:	20000168 	.word	0x20000168
 8000358:	20000164 	.word	0x20000164
 800035c:	08003474 	.word	0x08003474
 8000360:	08003498 	.word	0x08003498
 8000364:	080034a4 	.word	0x080034a4
 8000368:	080034b0 	.word	0x080034b0

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b094      	sub	sp, #80	@ 0x50
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2238      	movs	r2, #56	@ 0x38
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f002 fdae 	bl	8002edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800038e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000392:	f001 facd 	bl	8001930 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000396:	2302      	movs	r3, #2
 8000398:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a0:	2340      	movs	r3, #64	@ 0x40
 80003a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a4:	2302      	movs	r3, #2
 80003a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003a8:	2302      	movs	r3, #2
 80003aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80003ac:	2301      	movs	r3, #1
 80003ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80003b0:	230a      	movs	r3, #10
 80003b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003b4:	2302      	movs	r3, #2
 80003b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80003b8:	2304      	movs	r3, #4
 80003ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003bc:	2302      	movs	r3, #2
 80003be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c0:	f107 0318 	add.w	r3, r7, #24
 80003c4:	4618      	mov	r0, r3
 80003c6:	f001 fb67 	bl	8001a98 <HAL_RCC_OscConfig>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80003d0:	f000 f8f8 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	230f      	movs	r3, #15
 80003d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d8:	2301      	movs	r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f001 fe65 	bl	80020bc <HAL_RCC_ClockConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003f8:	f000 f8e4 	bl	80005c4 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3750      	adds	r7, #80	@ 0x50
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000408:	4b20      	ldr	r3, [pc, #128]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800040a:	4a21      	ldr	r2, [pc, #132]	@ (8000490 <MX_FDCAN1_Init+0x8c>)
 800040c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800040e:	4b1f      	ldr	r3, [pc, #124]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000414:	4b1d      	ldr	r3, [pc, #116]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800041a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800041c:	4b1b      	ldr	r3, [pc, #108]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000422:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000424:	2200      	movs	r2, #0
 8000426:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000428:	4b18      	ldr	r3, [pc, #96]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800042a:	2200      	movs	r2, #0
 800042c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800042e:	4b17      	ldr	r3, [pc, #92]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000430:	2200      	movs	r2, #0
 8000432:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8000434:	4b15      	ldr	r3, [pc, #84]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000436:	2205      	movs	r2, #5
 8000438:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800043a:	4b14      	ldr	r3, [pc, #80]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800043c:	2201      	movs	r2, #1
 800043e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000440:	4b12      	ldr	r3, [pc, #72]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000442:	220d      	movs	r2, #13
 8000444:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000446:	4b11      	ldr	r3, [pc, #68]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000448:	2202      	movs	r2, #2
 800044a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800044c:	4b0f      	ldr	r3, [pc, #60]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800044e:	2201      	movs	r2, #1
 8000450:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000454:	2201      	movs	r2, #1
 8000456:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000458:	4b0c      	ldr	r3, [pc, #48]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800045a:	2201      	movs	r2, #1
 800045c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000460:	2201      	movs	r2, #1
 8000462:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0x000;
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000466:	2200      	movs	r2, #0
 8000468:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800046a:	4b08      	ldr	r3, [pc, #32]	@ (800048c <MX_FDCAN1_Init+0x88>)
 800046c:	2200      	movs	r2, #0
 800046e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000472:	2200      	movs	r2, #0
 8000474:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_FDCAN1_Init+0x88>)
 8000478:	f000 fc4e 	bl	8000d18 <HAL_FDCAN_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000482:	f000 f89f 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000084 	.word	0x20000084
 8000490:	40006400 	.word	0x40006400

08000494 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000498:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <MX_SPI1_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	@ (800050c <MX_SPI1_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049e:	4b1a      	ldr	r3, [pc, #104]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004a6:	4b18      	ldr	r3, [pc, #96]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004ac:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004e0:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004e2:	2207      	movs	r2, #7
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	@ (8000508 <MX_SPI1_Init+0x74>)
 80004f4:	f002 fa02 	bl	80028fc <HAL_SPI_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f861 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	200000e8 	.word	0x200000e8
 800050c:	40013000 	.word	0x40013000

08000510 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_WWDG_Init+0x38>)
 8000516:	4a0d      	ldr	r2, [pc, #52]	@ (800054c <MX_WWDG_Init+0x3c>)
 8000518:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800051a:	4b0b      	ldr	r3, [pc, #44]	@ (8000548 <MX_WWDG_Init+0x38>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000520:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_WWDG_Init+0x38>)
 8000522:	2240      	movs	r2, #64	@ 0x40
 8000524:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 8000526:	4b08      	ldr	r3, [pc, #32]	@ (8000548 <MX_WWDG_Init+0x38>)
 8000528:	2240      	movs	r2, #64	@ 0x40
 800052a:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_WWDG_Init+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000532:	4805      	ldr	r0, [pc, #20]	@ (8000548 <MX_WWDG_Init+0x38>)
 8000534:	f002 fa8d 	bl	8002a52 <HAL_WWDG_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 800053e:	f000 f841 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	2000014c 	.word	0x2000014c
 800054c:	40002c00 	.word	0x40002c00

08000550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b16      	ldr	r3, [pc, #88]	@ (80005c0 <MX_GPIO_Init+0x70>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000568:	4a15      	ldr	r2, [pc, #84]	@ (80005c0 <MX_GPIO_Init+0x70>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000570:	4b13      	ldr	r3, [pc, #76]	@ (80005c0 <MX_GPIO_Init+0x70>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN7_GPIO_Port, PIN7_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000582:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000586:	f001 f9bb 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PIN8_Pin|PIN3_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8000590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000594:	f001 f9b4 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIN7_Pin PIN8_Pin PIN3_Pin */
  GPIO_InitStruct.Pin = PIN7_Pin|PIN8_Pin|PIN3_Pin;
 8000598:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800059c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a6:	2303      	movs	r3, #3
 80005a8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4619      	mov	r1, r3
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b2:	f001 f823 	bl	80015fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <Error_Handler+0x8>

080005d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <HAL_MspInit+0x44>)
 80005d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <HAL_MspInit+0x44>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <HAL_MspInit+0x44>)
 80005e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <HAL_MspInit+0x44>)
 80005f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f2:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <HAL_MspInit+0x44>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <HAL_MspInit+0x44>)
 80005fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000606:	f001 fa37 	bl	8001a78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09e      	sub	sp, #120	@ 0x78
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	2250      	movs	r2, #80	@ 0x50
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fc4f 	bl	8002edc <memset>
  if(hfdcan->Instance==FDCAN1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a28      	ldr	r2, [pc, #160]	@ (80006e4 <HAL_FDCAN_MspInit+0xcc>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d149      	bne.n	80006dc <HAL_FDCAN_MspInit+0xc4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800064e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4618      	mov	r0, r3
 800065a:	f001 ff13 	bl	8002484 <HAL_RCCEx_PeriphCLKConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000664:	f7ff ffae 	bl	80005c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <HAL_FDCAN_MspInit+0xd0>)
 800066a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800066c:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <HAL_FDCAN_MspInit+0xd0>)
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000672:	6593      	str	r3, [r2, #88]	@ 0x58
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <HAL_FDCAN_MspInit+0xd0>)
 8000676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <HAL_FDCAN_MspInit+0xd0>)
 8000682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000684:	4a18      	ldr	r2, [pc, #96]	@ (80006e8 <HAL_FDCAN_MspInit+0xd0>)
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <HAL_FDCAN_MspInit+0xd0>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000698:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800069c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006aa:	2309      	movs	r3, #9
 80006ac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006b2:	4619      	mov	r1, r3
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b8:	f000 ffa0 	bl	80015fc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	2015      	movs	r0, #21
 80006c2:	f000 faf4 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80006c6:	2015      	movs	r0, #21
 80006c8:	f000 fb0b 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2016      	movs	r0, #22
 80006d2:	f000 faec 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80006d6:	2016      	movs	r0, #22
 80006d8:	f000 fb03 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80006dc:	bf00      	nop
 80006de:	3778      	adds	r7, #120	@ 0x78
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40006400 	.word	0x40006400
 80006e8:	40021000 	.word	0x40021000

080006ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a17      	ldr	r2, [pc, #92]	@ (8000768 <HAL_SPI_MspInit+0x7c>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d128      	bne.n	8000760 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <HAL_SPI_MspInit+0x80>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000712:	4a16      	ldr	r2, [pc, #88]	@ (800076c <HAL_SPI_MspInit+0x80>)
 8000714:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000718:	6613      	str	r3, [r2, #96]	@ 0x60
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_SPI_MspInit+0x80>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <HAL_SPI_MspInit+0x80>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a10      	ldr	r2, [pc, #64]	@ (800076c <HAL_SPI_MspInit+0x80>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <HAL_SPI_MspInit+0x80>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800073e:	23a0      	movs	r3, #160	@ 0xa0
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800074e:	2305      	movs	r3, #5
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075c:	f000 ff4e 	bl	80015fc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40013000 	.word	0x40013000
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_WWDG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hwwdg: WWDG handle pointer
  * @retval None
  */
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <HAL_WWDG_MspInit+0x44>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d113      	bne.n	80007aa <HAL_WWDG_MspInit+0x3a>
  {
    /* USER CODE BEGIN WWDG_MspInit 0 */

    /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <HAL_WWDG_MspInit+0x48>)
 8000784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000786:	4a0c      	ldr	r2, [pc, #48]	@ (80007b8 <HAL_WWDG_MspInit+0x48>)
 8000788:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800078c:	6593      	str	r3, [r2, #88]	@ 0x58
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <HAL_WWDG_MspInit+0x48>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 fa85 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 fa9c 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END WWDG_MspInit 1 */

  }

}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40002c00 	.word	0x40002c00
 80007b8:	40021000 	.word	0x40021000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <NMI_Handler+0x4>

080007c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <HardFault_Handler+0x4>

080007cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <MemManage_Handler+0x4>

080007d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000812:	f000 f953 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8000820:	4802      	ldr	r0, [pc, #8]	@ (800082c <WWDG_IRQHandler+0x10>)
 8000822:	f002 f93a 	bl	8002a9a <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000014c 	.word	0x2000014c

08000830 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <FDCAN1_IT0_IRQHandler+0x10>)
 8000836:	f000 fcd7 	bl	80011e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000084 	.word	0x20000084

08000844 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000848:	4802      	ldr	r0, [pc, #8]	@ (8000854 <FDCAN1_IT1_IRQHandler+0x10>)
 800084a:	f000 fccd 	bl	80011e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000084 	.word	0x20000084

08000858 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e00a      	b.n	8000880 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800086a:	f3af 8000 	nop.w
 800086e:	4601      	mov	r1, r0
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	b2ca      	uxtb	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf0      	blt.n	800086a <_read+0x12>
  }

  return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e009      	b.n	80008b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf1      	blt.n	80008a4 <_write+0x12>
  }
  return len;
 80008c0:	687b      	ldr	r3, [r7, #4]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_close>:

int _close(int file)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008f2:	605a      	str	r2, [r3, #4]
  return 0;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_isatty>:

int _isatty(int file)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f002 fb08 	bl	8002f78 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2001c000 	.word	0x2001c000
 8000994:	00000400 	.word	0x00000400
 8000998:	2000016c 	.word	0x2000016c
 800099c:	200002c0 	.word	0x200002c0

080009a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c4:	480d      	ldr	r0, [pc, #52]	@ (80009fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c8:	f7ff ffea 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009cc:	480c      	ldr	r0, [pc, #48]	@ (8000a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ce:	490d      	ldr	r1, [pc, #52]	@ (8000a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <LoopForever+0xe>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009d4:	e002      	b.n	80009dc <LoopCopyDataInit>

080009d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009da:	3304      	adds	r3, #4

080009dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e0:	d3f9      	bcc.n	80009d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a10 <LoopForever+0x16>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e8:	e001      	b.n	80009ee <LoopFillZerobss>

080009ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ec:	3204      	adds	r2, #4

080009ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f0:	d3fb      	bcc.n	80009ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009f2:	f002 fac7 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f6:	f7ff fc0f 	bl	8000218 <main>

080009fa <LoopForever>:

LoopForever:
    b LoopForever
 80009fa:	e7fe      	b.n	80009fa <LoopForever>
  ldr   r0, =_estack
 80009fc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a08:	080034ec 	.word	0x080034ec
  ldr r2, =_sbss
 8000a0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a10:	200002c0 	.word	0x200002c0

08000a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC1_2_IRQHandler>

08000a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f000 f939 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a26:	200f      	movs	r0, #15
 8000a28:	f000 f80e 	bl	8000a48 <HAL_InitTick>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	71fb      	strb	r3, [r7, #7]
 8000a36:	e001      	b.n	8000a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a38:	f7ff fdca 	bl	80005d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a3c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a54:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <HAL_InitTick+0x68>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d022      	beq.n	8000aa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <HAL_InitTick+0x6c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <HAL_InitTick+0x68>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f944 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10f      	bne.n	8000a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d809      	bhi.n	8000a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a82:	2200      	movs	r2, #0
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8a:	f000 f910 	bl	8000cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_InitTick+0x70>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e007      	b.n	8000aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e004      	b.n	8000aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e001      	b.n	8000aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a03      	ldr	r2, [pc, #12]	@ (8000ad8 <HAL_IncTick+0x1c>)
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	20000170 	.word	0x20000170
 8000adc:	20000008 	.word	0x20000008

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000170 	.word	0x20000170

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff40 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff33 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa4 	bl	8000c54 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e147      	b.n	8000fba <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d106      	bne.n	8000d44 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fc6a 	bl	8000618 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0210 	bic.w	r2, r2, #16
 8000d52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d54:	f7ff fec4 	bl	8000ae0 <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d5a:	e012      	b.n	8000d82 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d5c:	f7ff fec0 	bl	8000ae0 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d90b      	bls.n	8000d82 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e11b      	b.n	8000fba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d0e5      	beq.n	8000d5c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	699a      	ldr	r2, [r3, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f042 0201 	orr.w	r2, r2, #1
 8000d9e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da0:	f7ff fe9e 	bl	8000ae0 <HAL_GetTick>
 8000da4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000da6:	e012      	b.n	8000dce <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000da8:	f7ff fe9a 	bl	8000ae0 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d90b      	bls.n	8000dce <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	f043 0201 	orr.w	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e0f5      	b.n	8000fba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0e5      	beq.n	8000da8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	699a      	ldr	r2, [r3, #24]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0202 	orr.w	r2, r2, #2
 8000dea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a74      	ldr	r2, [pc, #464]	@ (8000fc4 <HAL_FDCAN_Init+0x2ac>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d103      	bne.n	8000dfe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000df6:	4a74      	ldr	r2, [pc, #464]	@ (8000fc8 <HAL_FDCAN_Init+0x2b0>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7c1b      	ldrb	r3, [r3, #16]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d108      	bne.n	8000e18 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	699a      	ldr	r2, [r3, #24]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e14:	619a      	str	r2, [r3, #24]
 8000e16:	e007      	b.n	8000e28 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e26:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7c5b      	ldrb	r3, [r3, #17]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d108      	bne.n	8000e42 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	e007      	b.n	8000e52 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e50:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7c9b      	ldrb	r3, [r3, #18]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	e007      	b.n	8000e7c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e7a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689a      	ldr	r2, [r3, #8]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000ea0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0210 	bic.w	r2, r2, #16
 8000eb0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d108      	bne.n	8000ecc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	699a      	ldr	r2, [r3, #24]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0204 	orr.w	r2, r2, #4
 8000ec8:	619a      	str	r2, [r3, #24]
 8000eca:	e02c      	b.n	8000f26 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d028      	beq.n	8000f26 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d01c      	beq.n	8000f16 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0210 	orr.w	r2, r2, #16
 8000efa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d110      	bne.n	8000f26 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	699a      	ldr	r2, [r3, #24]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0220 	orr.w	r2, r2, #32
 8000f12:	619a      	str	r2, [r3, #24]
 8000f14:	e007      	b.n	8000f26 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	699a      	ldr	r2, [r3, #24]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0220 	orr.w	r2, r2, #32
 8000f24:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f36:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f3e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f4e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f50:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f5a:	d115      	bne.n	8000f88 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f60:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f66:	3b01      	subs	r3, #1
 8000f68:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f6a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	3b01      	subs	r3, #1
 8000f72:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f74:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f84:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f86:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 faca 	bl	8001538 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40006400 	.word	0x40006400
 8000fc8:	40006500 	.word	0x40006500

08000fcc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d110      	bne.n	8001002 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	699a      	ldr	r2, [r3, #24]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e006      	b.n	8001010 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	f043 0204 	orr.w	r2, r3, #4
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800101c:	b480      	push	{r7}
 800101e:	b087      	sub	sp, #28
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800102e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d003      	beq.n	800103e <HAL_FDCAN_ActivateNotification+0x22>
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b02      	cmp	r3, #2
 800103a:	f040 80c8 	bne.w	80011ce <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	2b00      	cmp	r3, #0
 800104e:	d004      	beq.n	800105a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d03b      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d031      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001074:	2b00      	cmp	r3, #0
 8001076:	d004      	beq.n	8001082 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d027      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01d      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	f003 0310 	and.w	r3, r3, #16
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d013      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d009      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00c      	beq.n	80010e2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d13b      	bne.n	800116e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d131      	bne.n	800116e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d127      	bne.n	800116e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d11d      	bne.n	800116e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	f003 0310 	and.w	r3, r3, #16
 8001142:	2b00      	cmp	r3, #0
 8001144:	d113      	bne.n	800116e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00c      	beq.n	800117e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800116a:	2b00      	cmp	r3, #0
 800116c:	d007      	beq.n	800117e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0202 	orr.w	r2, r2, #2
 800117c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001184:	2b00      	cmp	r3, #0
 8001186:	d009      	beq.n	800119c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	430a      	orrs	r2, r1
 8001198:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d009      	beq.n	80011ba <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e006      	b.n	80011dc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d2:	f043 0202 	orr.w	r2, r3, #2
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
  }
}
 80011dc:	4618      	mov	r0, r3
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	@ 0x30
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011f6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001204:	4013      	ands	r3, r2
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800121a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800121c:	4013      	ands	r3, r2
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001234:	4013      	ands	r3, r2
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001242:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	4013      	ands	r3, r2
 800124e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001256:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800125a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	4013      	ands	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800126e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001276:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	099b      	lsrs	r3, r3, #6
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00c      	beq.n	800129e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	099b      	lsrs	r3, r3, #6
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2240      	movs	r2, #64	@ 0x40
 8001296:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f92d 	bl	80014f8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d01a      	beq.n	80012e0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d014      	beq.n	80012e0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80012be:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f8ed 	bl	80014ba <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80012e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80012ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f8ac 	bl	800144e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80012f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001302:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f8ac 	bl	8001464 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800130c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130e:	2b00      	cmp	r3, #0
 8001310:	d007      	beq.n	8001322 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001318:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800131a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f8ac 	bl	800147a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	0a5b      	lsrs	r3, r3, #9
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00d      	beq.n	800134a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	0a5b      	lsrs	r3, r3, #9
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001342:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f8a3 	bl	8001490 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	09db      	lsrs	r3, r3, #7
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d019      	beq.n	800138a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	09db      	lsrs	r3, r3, #7
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d013      	beq.n	800138a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800136a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2280      	movs	r2, #128	@ 0x80
 8001380:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f88d 	bl	80014a4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	0b5b      	lsrs	r3, r3, #13
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00d      	beq.n	80013b2 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	0b5b      	lsrs	r3, r3, #13
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f88f 	bl	80014d0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	0bdb      	lsrs	r3, r3, #15
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00d      	beq.n	80013da <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	0bdb      	lsrs	r3, r3, #15
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f885 	bl	80014e4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	0b9b      	lsrs	r3, r3, #14
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d010      	beq.n	8001408 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	0b9b      	lsrs	r3, r3, #14
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00a      	beq.n	8001408 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001400:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001416:	69f9      	ldr	r1, [r7, #28]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f881 	bl	8001520 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d009      	beq.n	8001438 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6a3a      	ldr	r2, [r7, #32]
 800142a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143c:	2b00      	cmp	r3, #0
 800143e:	d002      	beq.n	8001446 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f863 	bl	800150c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001446:	bf00      	nop
 8001448:	3730      	adds	r7, #48	@ 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001540:	4b2c      	ldr	r3, [pc, #176]	@ (80015f4 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001542:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a2b      	ldr	r2, [pc, #172]	@ (80015f8 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d103      	bne.n	8001556 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001554:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001564:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800158a:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001592:	061a      	lsls	r2, r3, #24
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	e005      	b.n	80015d8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f3      	bcc.n	80015cc <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	4000a400 	.word	0x4000a400
 80015f8:	40006800 	.word	0x40006800

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800160a:	e15a      	b.n	80018c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 814c 	beq.w	80018bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d017      	beq.n	80016da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d123      	bne.n	800172e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0203 	and.w	r2, r3, #3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80a6 	beq.w	80018bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <HAL_GPIO_Init+0x2e4>)
 8001772:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001774:	4a5a      	ldr	r2, [pc, #360]	@ (80018e0 <HAL_GPIO_Init+0x2e4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6613      	str	r3, [r2, #96]	@ 0x60
 800177c:	4b58      	ldr	r3, [pc, #352]	@ (80018e0 <HAL_GPIO_Init+0x2e4>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001788:	4a56      	ldr	r2, [pc, #344]	@ (80018e4 <HAL_GPIO_Init+0x2e8>)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017b2:	d01f      	beq.n	80017f4 <HAL_GPIO_Init+0x1f8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a4c      	ldr	r2, [pc, #304]	@ (80018e8 <HAL_GPIO_Init+0x2ec>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d019      	beq.n	80017f0 <HAL_GPIO_Init+0x1f4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a4b      	ldr	r2, [pc, #300]	@ (80018ec <HAL_GPIO_Init+0x2f0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d013      	beq.n	80017ec <HAL_GPIO_Init+0x1f0>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a4a      	ldr	r2, [pc, #296]	@ (80018f0 <HAL_GPIO_Init+0x2f4>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d00d      	beq.n	80017e8 <HAL_GPIO_Init+0x1ec>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a49      	ldr	r2, [pc, #292]	@ (80018f4 <HAL_GPIO_Init+0x2f8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x1e8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a48      	ldr	r2, [pc, #288]	@ (80018f8 <HAL_GPIO_Init+0x2fc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017dc:	2305      	movs	r3, #5
 80017de:	e00a      	b.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017e0:	2306      	movs	r3, #6
 80017e2:	e008      	b.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017e4:	2304      	movs	r3, #4
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017e8:	2303      	movs	r3, #3
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_GPIO_Init+0x1fa>
 80017f4:	2300      	movs	r3, #0
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001806:	4937      	ldr	r1, [pc, #220]	@ (80018e4 <HAL_GPIO_Init+0x2e8>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001814:	4b39      	ldr	r3, [pc, #228]	@ (80018fc <HAL_GPIO_Init+0x300>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	43db      	mvns	r3, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001838:	4a30      	ldr	r2, [pc, #192]	@ (80018fc <HAL_GPIO_Init+0x300>)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800183e:	4b2f      	ldr	r3, [pc, #188]	@ (80018fc <HAL_GPIO_Init+0x300>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001862:	4a26      	ldr	r2, [pc, #152]	@ (80018fc <HAL_GPIO_Init+0x300>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001868:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <HAL_GPIO_Init+0x300>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <HAL_GPIO_Init+0x300>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001892:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <HAL_GPIO_Init+0x300>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b6:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_GPIO_Init+0x300>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f47f ae9d 	bne.w	800160c <HAL_GPIO_Init+0x10>
  }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	48000800 	.word	0x48000800
 80018f0:	48000c00 	.word	0x48000c00
 80018f4:	48001000 	.word	0x48001000
 80018f8:	48001400 	.word	0x48001400
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d141      	bne.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800193e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800194a:	d131      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800194c:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001952:	4a46      	ldr	r2, [pc, #280]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001958:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001964:	4a41      	ldr	r2, [pc, #260]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800196a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800196c:	4b40      	ldr	r3, [pc, #256]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2232      	movs	r2, #50	@ 0x32
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a3f      	ldr	r2, [pc, #252]	@ (8001a74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001982:	e002      	b.n	800198a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3b01      	subs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198a:	4b38      	ldr	r3, [pc, #224]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001996:	d102      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f2      	bne.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199e:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d158      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e057      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80019c0:	e04d      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019c8:	d141      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ca:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d6:	d131      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d8:	4b24      	ldr	r3, [pc, #144]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019f0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2232      	movs	r2, #50	@ 0x32
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	4a1c      	ldr	r2, [pc, #112]	@ (8001a74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0c9b      	lsrs	r3, r3, #18
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0e:	e002      	b.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a22:	d102      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f2      	bne.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a36:	d112      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e011      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a42:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a4c:	e007      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a86:	6093      	str	r3, [r2, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e2fe      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d075      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	4b97      	ldr	r3, [pc, #604]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac0:	4b94      	ldr	r3, [pc, #592]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3e>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_OscConfig+0x44>
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d10b      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	4b8d      	ldr	r3, [pc, #564]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d05b      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x108>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d157      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e2d9      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001afc:	d106      	bne.n	8001b0c <HAL_RCC_OscConfig+0x74>
 8001afe:	4b85      	ldr	r3, [pc, #532]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a84      	ldr	r2, [pc, #528]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e01d      	b.n	8001b48 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b7f      	ldr	r3, [pc, #508]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b7c      	ldr	r3, [pc, #496]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7b      	ldr	r2, [pc, #492]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0xb0>
 8001b30:	4b78      	ldr	r3, [pc, #480]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a77      	ldr	r2, [pc, #476]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a74      	ldr	r2, [pc, #464]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7fe ffc6 	bl	8000ae0 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7fe ffc2 	bl	8000ae0 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	@ 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e29e      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0xc0>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7fe ffb2 	bl	8000ae0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7fe ffae 	bl	8000ae0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e28a      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	4b60      	ldr	r3, [pc, #384]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0xe8>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bae:	4b59      	ldr	r3, [pc, #356]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb8:	4b56      	ldr	r3, [pc, #344]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0x136>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x13c>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d11f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x154>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e25d      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	4946      	ldr	r1, [pc, #280]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c00:	4b45      	ldr	r3, [pc, #276]	@ (8001d18 <HAL_RCC_OscConfig+0x280>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe ff1f 	bl	8000a48 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d043      	beq.n	8001c98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e249      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a3c      	ldr	r2, [pc, #240]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7fe ff5a 	bl	8000ae0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c30:	f7fe ff56 	bl	8000ae0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e232      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c42:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	492d      	ldr	r1, [pc, #180]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
 8001c62:	e01a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c64:	4b2b      	ldr	r3, [pc, #172]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2a      	ldr	r2, [pc, #168]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe ff36 	bl	8000ae0 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7fe ff32 	bl	8000ae0 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e20e      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e0>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d041      	beq.n	8001d2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ff0f 	bl	8000ae0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7fe ff0b 	bl	8000ae0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1e7      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ef      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x22e>
 8001ce6:	e020      	b.n	8001d2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fef2 	bl	8000ae0 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfe:	e00d      	b.n	8001d1c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7fe feee 	bl	8000ae0 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d906      	bls.n	8001d1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1ca      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ea      	bne.n	8001d00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80a6 	beq.w	8001e84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d3c:	4b84      	ldr	r3, [pc, #528]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2b4>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x2b6>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b7f      	ldr	r3, [pc, #508]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d56:	4a7e      	ldr	r2, [pc, #504]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6e:	4b79      	ldr	r3, [pc, #484]	@ (8001f54 <HAL_RCC_OscConfig+0x4bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7a:	4b76      	ldr	r3, [pc, #472]	@ (8001f54 <HAL_RCC_OscConfig+0x4bc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a75      	ldr	r2, [pc, #468]	@ (8001f54 <HAL_RCC_OscConfig+0x4bc>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe feab 	bl	8000ae0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7fe fea7 	bl	8000ae0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e183      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f54 <HAL_RCC_OscConfig+0x4bc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d108      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x32e>
 8001db4:	4b66      	ldr	r3, [pc, #408]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dba:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dc4:	e024      	b.n	8001e10 <HAL_RCC_OscConfig+0x378>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d110      	bne.n	8001df0 <HAL_RCC_OscConfig+0x358>
 8001dce:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd4:	4a5e      	ldr	r2, [pc, #376]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dde:	4b5c      	ldr	r3, [pc, #368]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de4:	4a5a      	ldr	r2, [pc, #360]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x378>
 8001df0:	4b57      	ldr	r3, [pc, #348]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df6:	4a56      	ldr	r2, [pc, #344]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e00:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	4a52      	ldr	r2, [pc, #328]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d016      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7fe fe62 	bl	8000ae0 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7fe fe5e 	bl	8000ae0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e138      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b46      	ldr	r3, [pc, #280]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ed      	beq.n	8001e20 <HAL_RCC_OscConfig+0x388>
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7fe fe4b 	bl	8000ae0 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7fe fe47 	bl	8000ae0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e121      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e64:	4b3a      	ldr	r3, [pc, #232]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ed      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b35      	ldr	r3, [pc, #212]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	4a34      	ldr	r2, [pc, #208]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7fe fe1a 	bl	8000ae0 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb0:	f7fe fe16 	bl	8000ae0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0f2      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ef      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x418>
 8001ed0:	e01b      	b.n	8001f0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fdfd 	bl	8000ae0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eea:	f7fe fdf9 	bl	8000ae0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0d5      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ef      	bne.n	8001eea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80c9 	beq.w	80020a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f14:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	f000 8083 	beq.w	8002028 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d15e      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7fe fdd3 	bl	8000ae0 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	e00c      	b.n	8001f58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe fdcf 	bl	8000ae0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d905      	bls.n	8001f58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0ab      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f58:	4b55      	ldr	r3, [pc, #340]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ec      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4b52      	ldr	r3, [pc, #328]	@ (80020b4 <HAL_RCC_OscConfig+0x61c>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6a11      	ldr	r1, [r2, #32]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f74:	3a01      	subs	r2, #1
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001f7e:	0212      	lsls	r2, r2, #8
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f86:	0852      	lsrs	r2, r2, #1
 8001f88:	3a01      	subs	r2, #1
 8001f8a:	0552      	lsls	r2, r2, #21
 8001f8c:	4311      	orrs	r1, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f92:	0852      	lsrs	r2, r2, #1
 8001f94:	3a01      	subs	r2, #1
 8001f96:	0652      	lsls	r2, r2, #25
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f9e:	06d2      	lsls	r2, r2, #27
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	4943      	ldr	r1, [pc, #268]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a40      	ldr	r2, [pc, #256]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fd8e 	bl	8000ae0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7fe fd8a 	bl	8000ae0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e066      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	4b35      	ldr	r3, [pc, #212]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x530>
 8001fe6:	e05e      	b.n	80020a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a30      	ldr	r2, [pc, #192]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8001fee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fd74 	bl	8000ae0 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fd70 	bl	8000ae0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04c      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	4b28      	ldr	r3, [pc, #160]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800201a:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	4924      	ldr	r1, [pc, #144]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_OscConfig+0x620>)
 8002022:	4013      	ands	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
 8002026:	e03e      	b.n	80020a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e039      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <HAL_RCC_OscConfig+0x618>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0203 	and.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d12c      	bne.n	80020a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	3b01      	subs	r3, #1
 8002054:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d123      	bne.n	80020a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002064:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d11b      	bne.n	80020a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002074:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d113      	bne.n	80020a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	3b01      	subs	r3, #1
 8002088:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3720      	adds	r7, #32
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	019f800c 	.word	0x019f800c
 80020b8:	feeefffc 	.word	0xfeeefffc

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e11e      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b91      	ldr	r3, [pc, #580]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d910      	bls.n	8002104 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b8e      	ldr	r3, [pc, #568]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 020f 	bic.w	r2, r3, #15
 80020ea:	498c      	ldr	r1, [pc, #560]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b8a      	ldr	r3, [pc, #552]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e106      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	d073      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d129      	bne.n	800216c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002118:	4b81      	ldr	r3, [pc, #516]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0f4      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002128:	f000 f966 	bl	80023f8 <RCC_GetSysClockFreqFromPLLSource>
 800212c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4a7c      	ldr	r2, [pc, #496]	@ (8002324 <HAL_RCC_ClockConfig+0x268>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d93f      	bls.n	80021b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002136:	4b7a      	ldr	r3, [pc, #488]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800214a:	2b00      	cmp	r3, #0
 800214c:	d033      	beq.n	80021b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002152:	2b00      	cmp	r3, #0
 8002154:	d12f      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002156:	4b72      	ldr	r3, [pc, #456]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800215e:	4a70      	ldr	r2, [pc, #448]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e024      	b.n	80021b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d107      	bne.n	8002184 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002174:	4b6a      	ldr	r3, [pc, #424]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0c6      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002184:	4b66      	ldr	r3, [pc, #408]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0be      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002194:	f000 f8ce 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8002198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4a61      	ldr	r2, [pc, #388]	@ (8002324 <HAL_RCC_ClockConfig+0x268>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d909      	bls.n	80021b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4957      	ldr	r1, [pc, #348]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fc8a 	bl	8000ae0 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d0:	f7fe fc86 	bl	8000ae0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e095      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 020c 	and.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1eb      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b43      	ldr	r3, [pc, #268]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a42      	ldr	r2, [pc, #264]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002216:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800221a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002228:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002230:	4a3b      	ldr	r2, [pc, #236]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002232:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002236:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002238:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4936      	ldr	r1, [pc, #216]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
 800224a:	e008      	b.n	800225e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b80      	cmp	r3, #128	@ 0x80
 8002250:	d105      	bne.n	800225e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002252:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a32      	ldr	r2, [pc, #200]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 8002258:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800225c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800225e:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d21d      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226c:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 020f 	bic.w	r2, r3, #15
 8002274:	4929      	ldr	r1, [pc, #164]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800227c:	f7fe fc30 	bl	8000ae0 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7fe fc2c 	bl	8000ae0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e03b      	b.n	8002312 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <HAL_RCC_ClockConfig+0x260>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1ed      	bne.n	8002284 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4917      	ldr	r1, [pc, #92]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d2:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	490f      	ldr	r1, [pc, #60]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e6:	f000 f825 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022ea:	4602      	mov	r2, r0
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	490c      	ldr	r1, [pc, #48]	@ (8002328 <HAL_RCC_ClockConfig+0x26c>)
 80022f8:	5ccb      	ldrb	r3, [r1, r3]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002302:	4a0a      	ldr	r2, [pc, #40]	@ (800232c <HAL_RCC_ClockConfig+0x270>)
 8002304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_RCC_ClockConfig+0x274>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fb9c 	bl	8000a48 <HAL_InitTick>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40022000 	.word	0x40022000
 8002320:	40021000 	.word	0x40021000
 8002324:	04c4b400 	.word	0x04c4b400
 8002328:	080034d4 	.word	0x080034d4
 800232c:	20000000 	.word	0x20000000
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800233a:	4b2c      	ldr	r3, [pc, #176]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b04      	cmp	r3, #4
 8002344:	d102      	bne.n	800234c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002346:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	e047      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800234c:	4b27      	ldr	r3, [pc, #156]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d102      	bne.n	800235e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002358:	4b26      	ldr	r3, [pc, #152]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	e03e      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800235e:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d136      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800236a:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002374:	4b1d      	ldr	r3, [pc, #116]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3301      	adds	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002388:	4a1a      	ldr	r2, [pc, #104]	@ (80023f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	4a16      	ldr	r2, [pc, #88]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002392:	68d2      	ldr	r2, [r2, #12]
 8002394:	0a12      	lsrs	r2, r2, #8
 8002396:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
      break;
 80023a0:	e00c      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023a2:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	4a10      	ldr	r2, [pc, #64]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ac:	68d2      	ldr	r2, [r2, #12]
 80023ae:	0a12      	lsrs	r2, r2, #8
 80023b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
      break;
 80023ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0e5b      	lsrs	r3, r3, #25
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	e001      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023dc:	693b      	ldr	r3, [r7, #16]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	371c      	adds	r7, #28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3301      	adds	r3, #1
 8002414:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d10c      	bne.n	8002436 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800241c:	4a17      	ldr	r2, [pc, #92]	@ (800247c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	4a14      	ldr	r2, [pc, #80]	@ (8002478 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002426:	68d2      	ldr	r2, [r2, #12]
 8002428:	0a12      	lsrs	r2, r2, #8
 800242a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
    break;
 8002434:	e00c      	b.n	8002450 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002436:	4a12      	ldr	r2, [pc, #72]	@ (8002480 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002440:	68d2      	ldr	r2, [r2, #12]
 8002442:	0a12      	lsrs	r2, r2, #8
 8002444:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    break;
 800244e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	0e5b      	lsrs	r3, r3, #25
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800246a:	687b      	ldr	r3, [r7, #4]
}
 800246c:	4618      	mov	r0, r3
 800246e:	371c      	adds	r7, #28
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000
 800247c:	007a1200 	.word	0x007a1200
 8002480:	00f42400 	.word	0x00f42400

08002484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800248c:	2300      	movs	r3, #0
 800248e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002490:	2300      	movs	r3, #0
 8002492:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8098 	beq.w	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b43      	ldr	r3, [pc, #268]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b40      	ldr	r3, [pc, #256]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	4a3f      	ldr	r2, [pc, #252]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ce:	4b3a      	ldr	r3, [pc, #232]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a39      	ldr	r2, [pc, #228]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024da:	f7fe fb01 	bl	8000ae0 <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024e0:	e009      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e2:	f7fe fafd 	bl	8000ae0 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d902      	bls.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	74fb      	strb	r3, [r7, #19]
        break;
 80024f4:	e005      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024f6:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0ef      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d159      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002508:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002512:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01e      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	d019      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002524:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002536:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002540:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	4a1b      	ldr	r2, [pc, #108]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002550:	4a18      	ldr	r2, [pc, #96]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fabd 	bl	8000ae0 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002568:	e00b      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fab9 	bl	8000ae0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d902      	bls.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	74fb      	strb	r3, [r7, #19]
            break;
 8002580:	e006      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002582:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ec      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10b      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002596:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a4:	4903      	ldr	r1, [pc, #12]	@ (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ac:	e008      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	74bb      	strb	r3, [r7, #18]
 80025b2:	e005      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c0:	7c7b      	ldrb	r3, [r7, #17]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c6:	4ba7      	ldr	r3, [pc, #668]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4aa6      	ldr	r2, [pc, #664]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025de:	4ba1      	ldr	r3, [pc, #644]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f023 0203 	bic.w	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	499d      	ldr	r1, [pc, #628]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002600:	4b98      	ldr	r3, [pc, #608]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002606:	f023 020c 	bic.w	r2, r3, #12
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	4995      	ldr	r1, [pc, #596]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002622:	4b90      	ldr	r3, [pc, #576]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002628:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	498c      	ldr	r1, [pc, #560]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002644:	4b87      	ldr	r3, [pc, #540]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4984      	ldr	r1, [pc, #528]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002666:	4b7f      	ldr	r3, [pc, #508]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	497b      	ldr	r1, [pc, #492]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002688:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4973      	ldr	r1, [pc, #460]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	496a      	ldr	r1, [pc, #424]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026cc:	4b65      	ldr	r3, [pc, #404]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4962      	ldr	r1, [pc, #392]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fc:	4959      	ldr	r1, [pc, #356]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002710:	4b54      	ldr	r3, [pc, #336]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002716:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	4951      	ldr	r1, [pc, #324]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d015      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002732:	4b4c      	ldr	r3, [pc, #304]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002740:	4948      	ldr	r1, [pc, #288]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002750:	d105      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002752:	4b44      	ldr	r3, [pc, #272]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275c:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002766:	2b00      	cmp	r3, #0
 8002768:	d015      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800276a:	4b3e      	ldr	r3, [pc, #248]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	493a      	ldr	r1, [pc, #232]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002788:	d105      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800278a:	4b36      	ldr	r3, [pc, #216]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a35      	ldr	r2, [pc, #212]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002794:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d015      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027a2:	4b30      	ldr	r3, [pc, #192]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b0:	492c      	ldr	r1, [pc, #176]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c2:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a27      	ldr	r2, [pc, #156]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027cc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e8:	491e      	ldr	r1, [pc, #120]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a19      	ldr	r2, [pc, #100]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002800:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002804:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002812:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002820:	4910      	ldr	r1, [pc, #64]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a0b      	ldr	r2, [pc, #44]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d018      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	4902      	ldr	r1, [pc, #8]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	e001      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002864:	40021000 	.word	0x40021000
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a20      	ldr	r2, [pc, #128]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	4918      	ldr	r1, [pc, #96]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ce:	490a      	ldr	r1, [pc, #40]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e09d      	b.n	8002a4a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800291e:	d009      	beq.n	8002934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
 8002926:	e005      	b.n	8002934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd fecc 	bl	80006ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800296a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002974:	d902      	bls.n	800297c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e002      	b.n	8002982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800297c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800298a:	d007      	beq.n	800299c <HAL_SPI_Init+0xa0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002994:	d002      	beq.n	800299c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	ea42 0103 	orr.w	r1, r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	f003 0204 	and.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a18:	ea42 0103 	orr.w	r1, r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e016      	b.n	8002a92 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fd fe83 	bl	8000770 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a76:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	ea42 0103 	orr.w	r1, r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0201 	mvn.w	r2, #1
 8002ac8:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f804 	bl	8002ad8 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <std>:
 8002aec:	2300      	movs	r3, #0
 8002aee:	b510      	push	{r4, lr}
 8002af0:	4604      	mov	r4, r0
 8002af2:	e9c0 3300 	strd	r3, r3, [r0]
 8002af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002afa:	6083      	str	r3, [r0, #8]
 8002afc:	8181      	strh	r1, [r0, #12]
 8002afe:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b00:	81c2      	strh	r2, [r0, #14]
 8002b02:	6183      	str	r3, [r0, #24]
 8002b04:	4619      	mov	r1, r3
 8002b06:	2208      	movs	r2, #8
 8002b08:	305c      	adds	r0, #92	@ 0x5c
 8002b0a:	f000 f9e7 	bl	8002edc <memset>
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b44 <std+0x58>)
 8002b10:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <std+0x5c>)
 8002b14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b16:	4b0d      	ldr	r3, [pc, #52]	@ (8002b4c <std+0x60>)
 8002b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <std+0x64>)
 8002b1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <std+0x68>)
 8002b20:	6224      	str	r4, [r4, #32]
 8002b22:	429c      	cmp	r4, r3
 8002b24:	d006      	beq.n	8002b34 <std+0x48>
 8002b26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b2a:	4294      	cmp	r4, r2
 8002b2c:	d002      	beq.n	8002b34 <std+0x48>
 8002b2e:	33d0      	adds	r3, #208	@ 0xd0
 8002b30:	429c      	cmp	r4, r3
 8002b32:	d105      	bne.n	8002b40 <std+0x54>
 8002b34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b3c:	f000 ba46 	b.w	8002fcc <__retarget_lock_init_recursive>
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	bf00      	nop
 8002b44:	08002d2d 	.word	0x08002d2d
 8002b48:	08002d4f 	.word	0x08002d4f
 8002b4c:	08002d87 	.word	0x08002d87
 8002b50:	08002dab 	.word	0x08002dab
 8002b54:	20000174 	.word	0x20000174

08002b58 <stdio_exit_handler>:
 8002b58:	4a02      	ldr	r2, [pc, #8]	@ (8002b64 <stdio_exit_handler+0xc>)
 8002b5a:	4903      	ldr	r1, [pc, #12]	@ (8002b68 <stdio_exit_handler+0x10>)
 8002b5c:	4803      	ldr	r0, [pc, #12]	@ (8002b6c <stdio_exit_handler+0x14>)
 8002b5e:	f000 b869 	b.w	8002c34 <_fwalk_sglue>
 8002b62:	bf00      	nop
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	080032cd 	.word	0x080032cd
 8002b6c:	2000001c 	.word	0x2000001c

08002b70 <cleanup_stdio>:
 8002b70:	6841      	ldr	r1, [r0, #4]
 8002b72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <cleanup_stdio+0x34>)
 8002b74:	4299      	cmp	r1, r3
 8002b76:	b510      	push	{r4, lr}
 8002b78:	4604      	mov	r4, r0
 8002b7a:	d001      	beq.n	8002b80 <cleanup_stdio+0x10>
 8002b7c:	f000 fba6 	bl	80032cc <_fflush_r>
 8002b80:	68a1      	ldr	r1, [r4, #8]
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <cleanup_stdio+0x38>)
 8002b84:	4299      	cmp	r1, r3
 8002b86:	d002      	beq.n	8002b8e <cleanup_stdio+0x1e>
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f000 fb9f 	bl	80032cc <_fflush_r>
 8002b8e:	68e1      	ldr	r1, [r4, #12]
 8002b90:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <cleanup_stdio+0x3c>)
 8002b92:	4299      	cmp	r1, r3
 8002b94:	d004      	beq.n	8002ba0 <cleanup_stdio+0x30>
 8002b96:	4620      	mov	r0, r4
 8002b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b9c:	f000 bb96 	b.w	80032cc <_fflush_r>
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000174 	.word	0x20000174
 8002ba8:	200001dc 	.word	0x200001dc
 8002bac:	20000244 	.word	0x20000244

08002bb0 <global_stdio_init.part.0>:
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <global_stdio_init.part.0+0x30>)
 8002bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8002be4 <global_stdio_init.part.0+0x34>)
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8002be8 <global_stdio_init.part.0+0x38>)
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	4620      	mov	r0, r4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	f7ff ff94 	bl	8002aec <std>
 8002bc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2109      	movs	r1, #9
 8002bcc:	f7ff ff8e 	bl	8002aec <std>
 8002bd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bda:	2112      	movs	r1, #18
 8002bdc:	f7ff bf86 	b.w	8002aec <std>
 8002be0:	200002ac 	.word	0x200002ac
 8002be4:	20000174 	.word	0x20000174
 8002be8:	08002b59 	.word	0x08002b59

08002bec <__sfp_lock_acquire>:
 8002bec:	4801      	ldr	r0, [pc, #4]	@ (8002bf4 <__sfp_lock_acquire+0x8>)
 8002bee:	f000 b9ee 	b.w	8002fce <__retarget_lock_acquire_recursive>
 8002bf2:	bf00      	nop
 8002bf4:	200002b5 	.word	0x200002b5

08002bf8 <__sfp_lock_release>:
 8002bf8:	4801      	ldr	r0, [pc, #4]	@ (8002c00 <__sfp_lock_release+0x8>)
 8002bfa:	f000 b9e9 	b.w	8002fd0 <__retarget_lock_release_recursive>
 8002bfe:	bf00      	nop
 8002c00:	200002b5 	.word	0x200002b5

08002c04 <__sinit>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
 8002c08:	f7ff fff0 	bl	8002bec <__sfp_lock_acquire>
 8002c0c:	6a23      	ldr	r3, [r4, #32]
 8002c0e:	b11b      	cbz	r3, 8002c18 <__sinit+0x14>
 8002c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c14:	f7ff bff0 	b.w	8002bf8 <__sfp_lock_release>
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <__sinit+0x28>)
 8002c1a:	6223      	str	r3, [r4, #32]
 8002c1c:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <__sinit+0x2c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f5      	bne.n	8002c10 <__sinit+0xc>
 8002c24:	f7ff ffc4 	bl	8002bb0 <global_stdio_init.part.0>
 8002c28:	e7f2      	b.n	8002c10 <__sinit+0xc>
 8002c2a:	bf00      	nop
 8002c2c:	08002b71 	.word	0x08002b71
 8002c30:	200002ac 	.word	0x200002ac

08002c34 <_fwalk_sglue>:
 8002c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c38:	4607      	mov	r7, r0
 8002c3a:	4688      	mov	r8, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	2600      	movs	r6, #0
 8002c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c44:	f1b9 0901 	subs.w	r9, r9, #1
 8002c48:	d505      	bpl.n	8002c56 <_fwalk_sglue+0x22>
 8002c4a:	6824      	ldr	r4, [r4, #0]
 8002c4c:	2c00      	cmp	r4, #0
 8002c4e:	d1f7      	bne.n	8002c40 <_fwalk_sglue+0xc>
 8002c50:	4630      	mov	r0, r6
 8002c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c56:	89ab      	ldrh	r3, [r5, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d907      	bls.n	8002c6c <_fwalk_sglue+0x38>
 8002c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c60:	3301      	adds	r3, #1
 8002c62:	d003      	beq.n	8002c6c <_fwalk_sglue+0x38>
 8002c64:	4629      	mov	r1, r5
 8002c66:	4638      	mov	r0, r7
 8002c68:	47c0      	blx	r8
 8002c6a:	4306      	orrs	r6, r0
 8002c6c:	3568      	adds	r5, #104	@ 0x68
 8002c6e:	e7e9      	b.n	8002c44 <_fwalk_sglue+0x10>

08002c70 <_puts_r>:
 8002c70:	6a03      	ldr	r3, [r0, #32]
 8002c72:	b570      	push	{r4, r5, r6, lr}
 8002c74:	6884      	ldr	r4, [r0, #8]
 8002c76:	4605      	mov	r5, r0
 8002c78:	460e      	mov	r6, r1
 8002c7a:	b90b      	cbnz	r3, 8002c80 <_puts_r+0x10>
 8002c7c:	f7ff ffc2 	bl	8002c04 <__sinit>
 8002c80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c82:	07db      	lsls	r3, r3, #31
 8002c84:	d405      	bmi.n	8002c92 <_puts_r+0x22>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	0598      	lsls	r0, r3, #22
 8002c8a:	d402      	bmi.n	8002c92 <_puts_r+0x22>
 8002c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c8e:	f000 f99e 	bl	8002fce <__retarget_lock_acquire_recursive>
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	0719      	lsls	r1, r3, #28
 8002c96:	d502      	bpl.n	8002c9e <_puts_r+0x2e>
 8002c98:	6923      	ldr	r3, [r4, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d135      	bne.n	8002d0a <_puts_r+0x9a>
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f000 f8c5 	bl	8002e30 <__swsetup_r>
 8002ca6:	b380      	cbz	r0, 8002d0a <_puts_r+0x9a>
 8002ca8:	f04f 35ff 	mov.w	r5, #4294967295
 8002cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cae:	07da      	lsls	r2, r3, #31
 8002cb0:	d405      	bmi.n	8002cbe <_puts_r+0x4e>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	059b      	lsls	r3, r3, #22
 8002cb6:	d402      	bmi.n	8002cbe <_puts_r+0x4e>
 8002cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cba:	f000 f989 	bl	8002fd0 <__retarget_lock_release_recursive>
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da04      	bge.n	8002cd0 <_puts_r+0x60>
 8002cc6:	69a2      	ldr	r2, [r4, #24]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dc17      	bgt.n	8002cfc <_puts_r+0x8c>
 8002ccc:	290a      	cmp	r1, #10
 8002cce:	d015      	beq.n	8002cfc <_puts_r+0x8c>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	1c5a      	adds	r2, r3, #1
 8002cd4:	6022      	str	r2, [r4, #0]
 8002cd6:	7019      	strb	r1, [r3, #0]
 8002cd8:	68a3      	ldr	r3, [r4, #8]
 8002cda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	60a3      	str	r3, [r4, #8]
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	d1ed      	bne.n	8002cc2 <_puts_r+0x52>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da11      	bge.n	8002d0e <_puts_r+0x9e>
 8002cea:	4622      	mov	r2, r4
 8002cec:	210a      	movs	r1, #10
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f000 f85f 	bl	8002db2 <__swbuf_r>
 8002cf4:	3001      	adds	r0, #1
 8002cf6:	d0d7      	beq.n	8002ca8 <_puts_r+0x38>
 8002cf8:	250a      	movs	r5, #10
 8002cfa:	e7d7      	b.n	8002cac <_puts_r+0x3c>
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 f857 	bl	8002db2 <__swbuf_r>
 8002d04:	3001      	adds	r0, #1
 8002d06:	d1e7      	bne.n	8002cd8 <_puts_r+0x68>
 8002d08:	e7ce      	b.n	8002ca8 <_puts_r+0x38>
 8002d0a:	3e01      	subs	r6, #1
 8002d0c:	e7e4      	b.n	8002cd8 <_puts_r+0x68>
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	6022      	str	r2, [r4, #0]
 8002d14:	220a      	movs	r2, #10
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e7ee      	b.n	8002cf8 <_puts_r+0x88>
	...

08002d1c <puts>:
 8002d1c:	4b02      	ldr	r3, [pc, #8]	@ (8002d28 <puts+0xc>)
 8002d1e:	4601      	mov	r1, r0
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	f7ff bfa5 	b.w	8002c70 <_puts_r>
 8002d26:	bf00      	nop
 8002d28:	20000018 	.word	0x20000018

08002d2c <__sread>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	460c      	mov	r4, r1
 8002d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d34:	f000 f8fc 	bl	8002f30 <_read_r>
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	bfab      	itete	ge
 8002d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d40:	181b      	addge	r3, r3, r0
 8002d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d46:	bfac      	ite	ge
 8002d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d4a:	81a3      	strhlt	r3, [r4, #12]
 8002d4c:	bd10      	pop	{r4, pc}

08002d4e <__swrite>:
 8002d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d52:	461f      	mov	r7, r3
 8002d54:	898b      	ldrh	r3, [r1, #12]
 8002d56:	05db      	lsls	r3, r3, #23
 8002d58:	4605      	mov	r5, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4616      	mov	r6, r2
 8002d5e:	d505      	bpl.n	8002d6c <__swrite+0x1e>
 8002d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d64:	2302      	movs	r3, #2
 8002d66:	2200      	movs	r2, #0
 8002d68:	f000 f8d0 	bl	8002f0c <_lseek_r>
 8002d6c:	89a3      	ldrh	r3, [r4, #12]
 8002d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d76:	81a3      	strh	r3, [r4, #12]
 8002d78:	4632      	mov	r2, r6
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d82:	f000 b8e7 	b.w	8002f54 <_write_r>

08002d86 <__sseek>:
 8002d86:	b510      	push	{r4, lr}
 8002d88:	460c      	mov	r4, r1
 8002d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d8e:	f000 f8bd 	bl	8002f0c <_lseek_r>
 8002d92:	1c43      	adds	r3, r0, #1
 8002d94:	89a3      	ldrh	r3, [r4, #12]
 8002d96:	bf15      	itete	ne
 8002d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002da2:	81a3      	strheq	r3, [r4, #12]
 8002da4:	bf18      	it	ne
 8002da6:	81a3      	strhne	r3, [r4, #12]
 8002da8:	bd10      	pop	{r4, pc}

08002daa <__sclose>:
 8002daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dae:	f000 b89d 	b.w	8002eec <_close_r>

08002db2 <__swbuf_r>:
 8002db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db4:	460e      	mov	r6, r1
 8002db6:	4614      	mov	r4, r2
 8002db8:	4605      	mov	r5, r0
 8002dba:	b118      	cbz	r0, 8002dc4 <__swbuf_r+0x12>
 8002dbc:	6a03      	ldr	r3, [r0, #32]
 8002dbe:	b90b      	cbnz	r3, 8002dc4 <__swbuf_r+0x12>
 8002dc0:	f7ff ff20 	bl	8002c04 <__sinit>
 8002dc4:	69a3      	ldr	r3, [r4, #24]
 8002dc6:	60a3      	str	r3, [r4, #8]
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	071a      	lsls	r2, r3, #28
 8002dcc:	d501      	bpl.n	8002dd2 <__swbuf_r+0x20>
 8002dce:	6923      	ldr	r3, [r4, #16]
 8002dd0:	b943      	cbnz	r3, 8002de4 <__swbuf_r+0x32>
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f000 f82b 	bl	8002e30 <__swsetup_r>
 8002dda:	b118      	cbz	r0, 8002de4 <__swbuf_r+0x32>
 8002ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8002de0:	4638      	mov	r0, r7
 8002de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	6922      	ldr	r2, [r4, #16]
 8002de8:	1a98      	subs	r0, r3, r2
 8002dea:	6963      	ldr	r3, [r4, #20]
 8002dec:	b2f6      	uxtb	r6, r6
 8002dee:	4283      	cmp	r3, r0
 8002df0:	4637      	mov	r7, r6
 8002df2:	dc05      	bgt.n	8002e00 <__swbuf_r+0x4e>
 8002df4:	4621      	mov	r1, r4
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 fa68 	bl	80032cc <_fflush_r>
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d1ed      	bne.n	8002ddc <__swbuf_r+0x2a>
 8002e00:	68a3      	ldr	r3, [r4, #8]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60a3      	str	r3, [r4, #8]
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	6022      	str	r2, [r4, #0]
 8002e0c:	701e      	strb	r6, [r3, #0]
 8002e0e:	6962      	ldr	r2, [r4, #20]
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d004      	beq.n	8002e20 <__swbuf_r+0x6e>
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	07db      	lsls	r3, r3, #31
 8002e1a:	d5e1      	bpl.n	8002de0 <__swbuf_r+0x2e>
 8002e1c:	2e0a      	cmp	r6, #10
 8002e1e:	d1df      	bne.n	8002de0 <__swbuf_r+0x2e>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 fa52 	bl	80032cc <_fflush_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d0d9      	beq.n	8002de0 <__swbuf_r+0x2e>
 8002e2c:	e7d6      	b.n	8002ddc <__swbuf_r+0x2a>
	...

08002e30 <__swsetup_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <__swsetup_r+0xa8>)
 8002e34:	4605      	mov	r5, r0
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	460c      	mov	r4, r1
 8002e3a:	b118      	cbz	r0, 8002e44 <__swsetup_r+0x14>
 8002e3c:	6a03      	ldr	r3, [r0, #32]
 8002e3e:	b90b      	cbnz	r3, 8002e44 <__swsetup_r+0x14>
 8002e40:	f7ff fee0 	bl	8002c04 <__sinit>
 8002e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e48:	0719      	lsls	r1, r3, #28
 8002e4a:	d422      	bmi.n	8002e92 <__swsetup_r+0x62>
 8002e4c:	06da      	lsls	r2, r3, #27
 8002e4e:	d407      	bmi.n	8002e60 <__swsetup_r+0x30>
 8002e50:	2209      	movs	r2, #9
 8002e52:	602a      	str	r2, [r5, #0]
 8002e54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5e:	e033      	b.n	8002ec8 <__swsetup_r+0x98>
 8002e60:	0758      	lsls	r0, r3, #29
 8002e62:	d512      	bpl.n	8002e8a <__swsetup_r+0x5a>
 8002e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e66:	b141      	cbz	r1, 8002e7a <__swsetup_r+0x4a>
 8002e68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e6c:	4299      	cmp	r1, r3
 8002e6e:	d002      	beq.n	8002e76 <__swsetup_r+0x46>
 8002e70:	4628      	mov	r0, r5
 8002e72:	f000 f8af 	bl	8002fd4 <_free_r>
 8002e76:	2300      	movs	r3, #0
 8002e78:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002e80:	81a3      	strh	r3, [r4, #12]
 8002e82:	2300      	movs	r3, #0
 8002e84:	6063      	str	r3, [r4, #4]
 8002e86:	6923      	ldr	r3, [r4, #16]
 8002e88:	6023      	str	r3, [r4, #0]
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	81a3      	strh	r3, [r4, #12]
 8002e92:	6923      	ldr	r3, [r4, #16]
 8002e94:	b94b      	cbnz	r3, 8002eaa <__swsetup_r+0x7a>
 8002e96:	89a3      	ldrh	r3, [r4, #12]
 8002e98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ea0:	d003      	beq.n	8002eaa <__swsetup_r+0x7a>
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f000 fa5f 	bl	8003368 <__smakebuf_r>
 8002eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eae:	f013 0201 	ands.w	r2, r3, #1
 8002eb2:	d00a      	beq.n	8002eca <__swsetup_r+0x9a>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60a2      	str	r2, [r4, #8]
 8002eb8:	6962      	ldr	r2, [r4, #20]
 8002eba:	4252      	negs	r2, r2
 8002ebc:	61a2      	str	r2, [r4, #24]
 8002ebe:	6922      	ldr	r2, [r4, #16]
 8002ec0:	b942      	cbnz	r2, 8002ed4 <__swsetup_r+0xa4>
 8002ec2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ec6:	d1c5      	bne.n	8002e54 <__swsetup_r+0x24>
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
 8002eca:	0799      	lsls	r1, r3, #30
 8002ecc:	bf58      	it	pl
 8002ece:	6962      	ldrpl	r2, [r4, #20]
 8002ed0:	60a2      	str	r2, [r4, #8]
 8002ed2:	e7f4      	b.n	8002ebe <__swsetup_r+0x8e>
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e7f7      	b.n	8002ec8 <__swsetup_r+0x98>
 8002ed8:	20000018 	.word	0x20000018

08002edc <memset>:
 8002edc:	4402      	add	r2, r0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <memset+0xa>
 8002ee4:	4770      	bx	lr
 8002ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eea:	e7f9      	b.n	8002ee0 <memset+0x4>

08002eec <_close_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4d06      	ldr	r5, [pc, #24]	@ (8002f08 <_close_r+0x1c>)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	4608      	mov	r0, r1
 8002ef6:	602b      	str	r3, [r5, #0]
 8002ef8:	f7fd fce7 	bl	80008ca <_close>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_close_r+0x1a>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_close_r+0x1a>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	200002b0 	.word	0x200002b0

08002f0c <_lseek_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	4d07      	ldr	r5, [pc, #28]	@ (8002f2c <_lseek_r+0x20>)
 8002f10:	4604      	mov	r4, r0
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f7fd fcfc 	bl	8000918 <_lseek>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d102      	bne.n	8002f2a <_lseek_r+0x1e>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	b103      	cbz	r3, 8002f2a <_lseek_r+0x1e>
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	200002b0 	.word	0x200002b0

08002f30 <_read_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4d07      	ldr	r5, [pc, #28]	@ (8002f50 <_read_r+0x20>)
 8002f34:	4604      	mov	r4, r0
 8002f36:	4608      	mov	r0, r1
 8002f38:	4611      	mov	r1, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	602a      	str	r2, [r5, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f7fd fc8a 	bl	8000858 <_read>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_read_r+0x1e>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_read_r+0x1e>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	200002b0 	.word	0x200002b0

08002f54 <_write_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4d07      	ldr	r5, [pc, #28]	@ (8002f74 <_write_r+0x20>)
 8002f58:	4604      	mov	r4, r0
 8002f5a:	4608      	mov	r0, r1
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	602a      	str	r2, [r5, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7fd fc95 	bl	8000892 <_write>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d102      	bne.n	8002f72 <_write_r+0x1e>
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	b103      	cbz	r3, 8002f72 <_write_r+0x1e>
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	200002b0 	.word	0x200002b0

08002f78 <__errno>:
 8002f78:	4b01      	ldr	r3, [pc, #4]	@ (8002f80 <__errno+0x8>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000018 	.word	0x20000018

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	4d0d      	ldr	r5, [pc, #52]	@ (8002fbc <__libc_init_array+0x38>)
 8002f88:	4c0d      	ldr	r4, [pc, #52]	@ (8002fc0 <__libc_init_array+0x3c>)
 8002f8a:	1b64      	subs	r4, r4, r5
 8002f8c:	10a4      	asrs	r4, r4, #2
 8002f8e:	2600      	movs	r6, #0
 8002f90:	42a6      	cmp	r6, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	4d0b      	ldr	r5, [pc, #44]	@ (8002fc4 <__libc_init_array+0x40>)
 8002f96:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc8 <__libc_init_array+0x44>)
 8002f98:	f000 fa54 	bl	8003444 <_init>
 8002f9c:	1b64      	subs	r4, r4, r5
 8002f9e:	10a4      	asrs	r4, r4, #2
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	42a6      	cmp	r6, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fac:	4798      	blx	r3
 8002fae:	3601      	adds	r6, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb6:	4798      	blx	r3
 8002fb8:	3601      	adds	r6, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	080034e4 	.word	0x080034e4
 8002fc0:	080034e4 	.word	0x080034e4
 8002fc4:	080034e4 	.word	0x080034e4
 8002fc8:	080034e8 	.word	0x080034e8

08002fcc <__retarget_lock_init_recursive>:
 8002fcc:	4770      	bx	lr

08002fce <__retarget_lock_acquire_recursive>:
 8002fce:	4770      	bx	lr

08002fd0 <__retarget_lock_release_recursive>:
 8002fd0:	4770      	bx	lr
	...

08002fd4 <_free_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d041      	beq.n	8003060 <_free_r+0x8c>
 8002fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe0:	1f0c      	subs	r4, r1, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	bfb8      	it	lt
 8002fe6:	18e4      	addlt	r4, r4, r3
 8002fe8:	f000 f8e0 	bl	80031ac <__malloc_lock>
 8002fec:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <_free_r+0x90>)
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	b933      	cbnz	r3, 8003000 <_free_r+0x2c>
 8002ff2:	6063      	str	r3, [r4, #4]
 8002ff4:	6014      	str	r4, [r2, #0]
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ffc:	f000 b8dc 	b.w	80031b8 <__malloc_unlock>
 8003000:	42a3      	cmp	r3, r4
 8003002:	d908      	bls.n	8003016 <_free_r+0x42>
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	1821      	adds	r1, r4, r0
 8003008:	428b      	cmp	r3, r1
 800300a:	bf01      	itttt	eq
 800300c:	6819      	ldreq	r1, [r3, #0]
 800300e:	685b      	ldreq	r3, [r3, #4]
 8003010:	1809      	addeq	r1, r1, r0
 8003012:	6021      	streq	r1, [r4, #0]
 8003014:	e7ed      	b.n	8002ff2 <_free_r+0x1e>
 8003016:	461a      	mov	r2, r3
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	b10b      	cbz	r3, 8003020 <_free_r+0x4c>
 800301c:	42a3      	cmp	r3, r4
 800301e:	d9fa      	bls.n	8003016 <_free_r+0x42>
 8003020:	6811      	ldr	r1, [r2, #0]
 8003022:	1850      	adds	r0, r2, r1
 8003024:	42a0      	cmp	r0, r4
 8003026:	d10b      	bne.n	8003040 <_free_r+0x6c>
 8003028:	6820      	ldr	r0, [r4, #0]
 800302a:	4401      	add	r1, r0
 800302c:	1850      	adds	r0, r2, r1
 800302e:	4283      	cmp	r3, r0
 8003030:	6011      	str	r1, [r2, #0]
 8003032:	d1e0      	bne.n	8002ff6 <_free_r+0x22>
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	6053      	str	r3, [r2, #4]
 800303a:	4408      	add	r0, r1
 800303c:	6010      	str	r0, [r2, #0]
 800303e:	e7da      	b.n	8002ff6 <_free_r+0x22>
 8003040:	d902      	bls.n	8003048 <_free_r+0x74>
 8003042:	230c      	movs	r3, #12
 8003044:	602b      	str	r3, [r5, #0]
 8003046:	e7d6      	b.n	8002ff6 <_free_r+0x22>
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	1821      	adds	r1, r4, r0
 800304c:	428b      	cmp	r3, r1
 800304e:	bf04      	itt	eq
 8003050:	6819      	ldreq	r1, [r3, #0]
 8003052:	685b      	ldreq	r3, [r3, #4]
 8003054:	6063      	str	r3, [r4, #4]
 8003056:	bf04      	itt	eq
 8003058:	1809      	addeq	r1, r1, r0
 800305a:	6021      	streq	r1, [r4, #0]
 800305c:	6054      	str	r4, [r2, #4]
 800305e:	e7ca      	b.n	8002ff6 <_free_r+0x22>
 8003060:	bd38      	pop	{r3, r4, r5, pc}
 8003062:	bf00      	nop
 8003064:	200002bc 	.word	0x200002bc

08003068 <sbrk_aligned>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	4e0f      	ldr	r6, [pc, #60]	@ (80030a8 <sbrk_aligned+0x40>)
 800306c:	460c      	mov	r4, r1
 800306e:	6831      	ldr	r1, [r6, #0]
 8003070:	4605      	mov	r5, r0
 8003072:	b911      	cbnz	r1, 800307a <sbrk_aligned+0x12>
 8003074:	f000 f9d6 	bl	8003424 <_sbrk_r>
 8003078:	6030      	str	r0, [r6, #0]
 800307a:	4621      	mov	r1, r4
 800307c:	4628      	mov	r0, r5
 800307e:	f000 f9d1 	bl	8003424 <_sbrk_r>
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	d103      	bne.n	800308e <sbrk_aligned+0x26>
 8003086:	f04f 34ff 	mov.w	r4, #4294967295
 800308a:	4620      	mov	r0, r4
 800308c:	bd70      	pop	{r4, r5, r6, pc}
 800308e:	1cc4      	adds	r4, r0, #3
 8003090:	f024 0403 	bic.w	r4, r4, #3
 8003094:	42a0      	cmp	r0, r4
 8003096:	d0f8      	beq.n	800308a <sbrk_aligned+0x22>
 8003098:	1a21      	subs	r1, r4, r0
 800309a:	4628      	mov	r0, r5
 800309c:	f000 f9c2 	bl	8003424 <_sbrk_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d1f2      	bne.n	800308a <sbrk_aligned+0x22>
 80030a4:	e7ef      	b.n	8003086 <sbrk_aligned+0x1e>
 80030a6:	bf00      	nop
 80030a8:	200002b8 	.word	0x200002b8

080030ac <_malloc_r>:
 80030ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b0:	1ccd      	adds	r5, r1, #3
 80030b2:	f025 0503 	bic.w	r5, r5, #3
 80030b6:	3508      	adds	r5, #8
 80030b8:	2d0c      	cmp	r5, #12
 80030ba:	bf38      	it	cc
 80030bc:	250c      	movcc	r5, #12
 80030be:	2d00      	cmp	r5, #0
 80030c0:	4606      	mov	r6, r0
 80030c2:	db01      	blt.n	80030c8 <_malloc_r+0x1c>
 80030c4:	42a9      	cmp	r1, r5
 80030c6:	d904      	bls.n	80030d2 <_malloc_r+0x26>
 80030c8:	230c      	movs	r3, #12
 80030ca:	6033      	str	r3, [r6, #0]
 80030cc:	2000      	movs	r0, #0
 80030ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031a8 <_malloc_r+0xfc>
 80030d6:	f000 f869 	bl	80031ac <__malloc_lock>
 80030da:	f8d8 3000 	ldr.w	r3, [r8]
 80030de:	461c      	mov	r4, r3
 80030e0:	bb44      	cbnz	r4, 8003134 <_malloc_r+0x88>
 80030e2:	4629      	mov	r1, r5
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff ffbf 	bl	8003068 <sbrk_aligned>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	4604      	mov	r4, r0
 80030ee:	d158      	bne.n	80031a2 <_malloc_r+0xf6>
 80030f0:	f8d8 4000 	ldr.w	r4, [r8]
 80030f4:	4627      	mov	r7, r4
 80030f6:	2f00      	cmp	r7, #0
 80030f8:	d143      	bne.n	8003182 <_malloc_r+0xd6>
 80030fa:	2c00      	cmp	r4, #0
 80030fc:	d04b      	beq.n	8003196 <_malloc_r+0xea>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	4639      	mov	r1, r7
 8003102:	4630      	mov	r0, r6
 8003104:	eb04 0903 	add.w	r9, r4, r3
 8003108:	f000 f98c 	bl	8003424 <_sbrk_r>
 800310c:	4581      	cmp	r9, r0
 800310e:	d142      	bne.n	8003196 <_malloc_r+0xea>
 8003110:	6821      	ldr	r1, [r4, #0]
 8003112:	1a6d      	subs	r5, r5, r1
 8003114:	4629      	mov	r1, r5
 8003116:	4630      	mov	r0, r6
 8003118:	f7ff ffa6 	bl	8003068 <sbrk_aligned>
 800311c:	3001      	adds	r0, #1
 800311e:	d03a      	beq.n	8003196 <_malloc_r+0xea>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	442b      	add	r3, r5
 8003124:	6023      	str	r3, [r4, #0]
 8003126:	f8d8 3000 	ldr.w	r3, [r8]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	bb62      	cbnz	r2, 8003188 <_malloc_r+0xdc>
 800312e:	f8c8 7000 	str.w	r7, [r8]
 8003132:	e00f      	b.n	8003154 <_malloc_r+0xa8>
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	1b52      	subs	r2, r2, r5
 8003138:	d420      	bmi.n	800317c <_malloc_r+0xd0>
 800313a:	2a0b      	cmp	r2, #11
 800313c:	d917      	bls.n	800316e <_malloc_r+0xc2>
 800313e:	1961      	adds	r1, r4, r5
 8003140:	42a3      	cmp	r3, r4
 8003142:	6025      	str	r5, [r4, #0]
 8003144:	bf18      	it	ne
 8003146:	6059      	strne	r1, [r3, #4]
 8003148:	6863      	ldr	r3, [r4, #4]
 800314a:	bf08      	it	eq
 800314c:	f8c8 1000 	streq.w	r1, [r8]
 8003150:	5162      	str	r2, [r4, r5]
 8003152:	604b      	str	r3, [r1, #4]
 8003154:	4630      	mov	r0, r6
 8003156:	f000 f82f 	bl	80031b8 <__malloc_unlock>
 800315a:	f104 000b 	add.w	r0, r4, #11
 800315e:	1d23      	adds	r3, r4, #4
 8003160:	f020 0007 	bic.w	r0, r0, #7
 8003164:	1ac2      	subs	r2, r0, r3
 8003166:	bf1c      	itt	ne
 8003168:	1a1b      	subne	r3, r3, r0
 800316a:	50a3      	strne	r3, [r4, r2]
 800316c:	e7af      	b.n	80030ce <_malloc_r+0x22>
 800316e:	6862      	ldr	r2, [r4, #4]
 8003170:	42a3      	cmp	r3, r4
 8003172:	bf0c      	ite	eq
 8003174:	f8c8 2000 	streq.w	r2, [r8]
 8003178:	605a      	strne	r2, [r3, #4]
 800317a:	e7eb      	b.n	8003154 <_malloc_r+0xa8>
 800317c:	4623      	mov	r3, r4
 800317e:	6864      	ldr	r4, [r4, #4]
 8003180:	e7ae      	b.n	80030e0 <_malloc_r+0x34>
 8003182:	463c      	mov	r4, r7
 8003184:	687f      	ldr	r7, [r7, #4]
 8003186:	e7b6      	b.n	80030f6 <_malloc_r+0x4a>
 8003188:	461a      	mov	r2, r3
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	42a3      	cmp	r3, r4
 800318e:	d1fb      	bne.n	8003188 <_malloc_r+0xdc>
 8003190:	2300      	movs	r3, #0
 8003192:	6053      	str	r3, [r2, #4]
 8003194:	e7de      	b.n	8003154 <_malloc_r+0xa8>
 8003196:	230c      	movs	r3, #12
 8003198:	6033      	str	r3, [r6, #0]
 800319a:	4630      	mov	r0, r6
 800319c:	f000 f80c 	bl	80031b8 <__malloc_unlock>
 80031a0:	e794      	b.n	80030cc <_malloc_r+0x20>
 80031a2:	6005      	str	r5, [r0, #0]
 80031a4:	e7d6      	b.n	8003154 <_malloc_r+0xa8>
 80031a6:	bf00      	nop
 80031a8:	200002bc 	.word	0x200002bc

080031ac <__malloc_lock>:
 80031ac:	4801      	ldr	r0, [pc, #4]	@ (80031b4 <__malloc_lock+0x8>)
 80031ae:	f7ff bf0e 	b.w	8002fce <__retarget_lock_acquire_recursive>
 80031b2:	bf00      	nop
 80031b4:	200002b4 	.word	0x200002b4

080031b8 <__malloc_unlock>:
 80031b8:	4801      	ldr	r0, [pc, #4]	@ (80031c0 <__malloc_unlock+0x8>)
 80031ba:	f7ff bf09 	b.w	8002fd0 <__retarget_lock_release_recursive>
 80031be:	bf00      	nop
 80031c0:	200002b4 	.word	0x200002b4

080031c4 <__sflush_r>:
 80031c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031cc:	0716      	lsls	r6, r2, #28
 80031ce:	4605      	mov	r5, r0
 80031d0:	460c      	mov	r4, r1
 80031d2:	d454      	bmi.n	800327e <__sflush_r+0xba>
 80031d4:	684b      	ldr	r3, [r1, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dc02      	bgt.n	80031e0 <__sflush_r+0x1c>
 80031da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dd48      	ble.n	8003272 <__sflush_r+0xae>
 80031e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031e2:	2e00      	cmp	r6, #0
 80031e4:	d045      	beq.n	8003272 <__sflush_r+0xae>
 80031e6:	2300      	movs	r3, #0
 80031e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031ec:	682f      	ldr	r7, [r5, #0]
 80031ee:	6a21      	ldr	r1, [r4, #32]
 80031f0:	602b      	str	r3, [r5, #0]
 80031f2:	d030      	beq.n	8003256 <__sflush_r+0x92>
 80031f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031f6:	89a3      	ldrh	r3, [r4, #12]
 80031f8:	0759      	lsls	r1, r3, #29
 80031fa:	d505      	bpl.n	8003208 <__sflush_r+0x44>
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003202:	b10b      	cbz	r3, 8003208 <__sflush_r+0x44>
 8003204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	2300      	movs	r3, #0
 800320a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800320c:	6a21      	ldr	r1, [r4, #32]
 800320e:	4628      	mov	r0, r5
 8003210:	47b0      	blx	r6
 8003212:	1c43      	adds	r3, r0, #1
 8003214:	89a3      	ldrh	r3, [r4, #12]
 8003216:	d106      	bne.n	8003226 <__sflush_r+0x62>
 8003218:	6829      	ldr	r1, [r5, #0]
 800321a:	291d      	cmp	r1, #29
 800321c:	d82b      	bhi.n	8003276 <__sflush_r+0xb2>
 800321e:	4a2a      	ldr	r2, [pc, #168]	@ (80032c8 <__sflush_r+0x104>)
 8003220:	40ca      	lsrs	r2, r1
 8003222:	07d6      	lsls	r6, r2, #31
 8003224:	d527      	bpl.n	8003276 <__sflush_r+0xb2>
 8003226:	2200      	movs	r2, #0
 8003228:	6062      	str	r2, [r4, #4]
 800322a:	04d9      	lsls	r1, r3, #19
 800322c:	6922      	ldr	r2, [r4, #16]
 800322e:	6022      	str	r2, [r4, #0]
 8003230:	d504      	bpl.n	800323c <__sflush_r+0x78>
 8003232:	1c42      	adds	r2, r0, #1
 8003234:	d101      	bne.n	800323a <__sflush_r+0x76>
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	b903      	cbnz	r3, 800323c <__sflush_r+0x78>
 800323a:	6560      	str	r0, [r4, #84]	@ 0x54
 800323c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800323e:	602f      	str	r7, [r5, #0]
 8003240:	b1b9      	cbz	r1, 8003272 <__sflush_r+0xae>
 8003242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003246:	4299      	cmp	r1, r3
 8003248:	d002      	beq.n	8003250 <__sflush_r+0x8c>
 800324a:	4628      	mov	r0, r5
 800324c:	f7ff fec2 	bl	8002fd4 <_free_r>
 8003250:	2300      	movs	r3, #0
 8003252:	6363      	str	r3, [r4, #52]	@ 0x34
 8003254:	e00d      	b.n	8003272 <__sflush_r+0xae>
 8003256:	2301      	movs	r3, #1
 8003258:	4628      	mov	r0, r5
 800325a:	47b0      	blx	r6
 800325c:	4602      	mov	r2, r0
 800325e:	1c50      	adds	r0, r2, #1
 8003260:	d1c9      	bne.n	80031f6 <__sflush_r+0x32>
 8003262:	682b      	ldr	r3, [r5, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0c6      	beq.n	80031f6 <__sflush_r+0x32>
 8003268:	2b1d      	cmp	r3, #29
 800326a:	d001      	beq.n	8003270 <__sflush_r+0xac>
 800326c:	2b16      	cmp	r3, #22
 800326e:	d11e      	bne.n	80032ae <__sflush_r+0xea>
 8003270:	602f      	str	r7, [r5, #0]
 8003272:	2000      	movs	r0, #0
 8003274:	e022      	b.n	80032bc <__sflush_r+0xf8>
 8003276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800327a:	b21b      	sxth	r3, r3
 800327c:	e01b      	b.n	80032b6 <__sflush_r+0xf2>
 800327e:	690f      	ldr	r7, [r1, #16]
 8003280:	2f00      	cmp	r7, #0
 8003282:	d0f6      	beq.n	8003272 <__sflush_r+0xae>
 8003284:	0793      	lsls	r3, r2, #30
 8003286:	680e      	ldr	r6, [r1, #0]
 8003288:	bf08      	it	eq
 800328a:	694b      	ldreq	r3, [r1, #20]
 800328c:	600f      	str	r7, [r1, #0]
 800328e:	bf18      	it	ne
 8003290:	2300      	movne	r3, #0
 8003292:	eba6 0807 	sub.w	r8, r6, r7
 8003296:	608b      	str	r3, [r1, #8]
 8003298:	f1b8 0f00 	cmp.w	r8, #0
 800329c:	dde9      	ble.n	8003272 <__sflush_r+0xae>
 800329e:	6a21      	ldr	r1, [r4, #32]
 80032a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80032a2:	4643      	mov	r3, r8
 80032a4:	463a      	mov	r2, r7
 80032a6:	4628      	mov	r0, r5
 80032a8:	47b0      	blx	r6
 80032aa:	2800      	cmp	r0, #0
 80032ac:	dc08      	bgt.n	80032c0 <__sflush_r+0xfc>
 80032ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c0:	4407      	add	r7, r0
 80032c2:	eba8 0800 	sub.w	r8, r8, r0
 80032c6:	e7e7      	b.n	8003298 <__sflush_r+0xd4>
 80032c8:	20400001 	.word	0x20400001

080032cc <_fflush_r>:
 80032cc:	b538      	push	{r3, r4, r5, lr}
 80032ce:	690b      	ldr	r3, [r1, #16]
 80032d0:	4605      	mov	r5, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	b913      	cbnz	r3, 80032dc <_fflush_r+0x10>
 80032d6:	2500      	movs	r5, #0
 80032d8:	4628      	mov	r0, r5
 80032da:	bd38      	pop	{r3, r4, r5, pc}
 80032dc:	b118      	cbz	r0, 80032e6 <_fflush_r+0x1a>
 80032de:	6a03      	ldr	r3, [r0, #32]
 80032e0:	b90b      	cbnz	r3, 80032e6 <_fflush_r+0x1a>
 80032e2:	f7ff fc8f 	bl	8002c04 <__sinit>
 80032e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f3      	beq.n	80032d6 <_fflush_r+0xa>
 80032ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032f0:	07d0      	lsls	r0, r2, #31
 80032f2:	d404      	bmi.n	80032fe <_fflush_r+0x32>
 80032f4:	0599      	lsls	r1, r3, #22
 80032f6:	d402      	bmi.n	80032fe <_fflush_r+0x32>
 80032f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032fa:	f7ff fe68 	bl	8002fce <__retarget_lock_acquire_recursive>
 80032fe:	4628      	mov	r0, r5
 8003300:	4621      	mov	r1, r4
 8003302:	f7ff ff5f 	bl	80031c4 <__sflush_r>
 8003306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003308:	07da      	lsls	r2, r3, #31
 800330a:	4605      	mov	r5, r0
 800330c:	d4e4      	bmi.n	80032d8 <_fflush_r+0xc>
 800330e:	89a3      	ldrh	r3, [r4, #12]
 8003310:	059b      	lsls	r3, r3, #22
 8003312:	d4e1      	bmi.n	80032d8 <_fflush_r+0xc>
 8003314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003316:	f7ff fe5b 	bl	8002fd0 <__retarget_lock_release_recursive>
 800331a:	e7dd      	b.n	80032d8 <_fflush_r+0xc>

0800331c <__swhatbuf_r>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	460c      	mov	r4, r1
 8003320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003324:	2900      	cmp	r1, #0
 8003326:	b096      	sub	sp, #88	@ 0x58
 8003328:	4615      	mov	r5, r2
 800332a:	461e      	mov	r6, r3
 800332c:	da0d      	bge.n	800334a <__swhatbuf_r+0x2e>
 800332e:	89a3      	ldrh	r3, [r4, #12]
 8003330:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	bf14      	ite	ne
 800333a:	2340      	movne	r3, #64	@ 0x40
 800333c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003340:	2000      	movs	r0, #0
 8003342:	6031      	str	r1, [r6, #0]
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	b016      	add	sp, #88	@ 0x58
 8003348:	bd70      	pop	{r4, r5, r6, pc}
 800334a:	466a      	mov	r2, sp
 800334c:	f000 f848 	bl	80033e0 <_fstat_r>
 8003350:	2800      	cmp	r0, #0
 8003352:	dbec      	blt.n	800332e <__swhatbuf_r+0x12>
 8003354:	9901      	ldr	r1, [sp, #4]
 8003356:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800335a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800335e:	4259      	negs	r1, r3
 8003360:	4159      	adcs	r1, r3
 8003362:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003366:	e7eb      	b.n	8003340 <__swhatbuf_r+0x24>

08003368 <__smakebuf_r>:
 8003368:	898b      	ldrh	r3, [r1, #12]
 800336a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800336c:	079d      	lsls	r5, r3, #30
 800336e:	4606      	mov	r6, r0
 8003370:	460c      	mov	r4, r1
 8003372:	d507      	bpl.n	8003384 <__smakebuf_r+0x1c>
 8003374:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	6123      	str	r3, [r4, #16]
 800337c:	2301      	movs	r3, #1
 800337e:	6163      	str	r3, [r4, #20]
 8003380:	b003      	add	sp, #12
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003384:	ab01      	add	r3, sp, #4
 8003386:	466a      	mov	r2, sp
 8003388:	f7ff ffc8 	bl	800331c <__swhatbuf_r>
 800338c:	9f00      	ldr	r7, [sp, #0]
 800338e:	4605      	mov	r5, r0
 8003390:	4639      	mov	r1, r7
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff fe8a 	bl	80030ac <_malloc_r>
 8003398:	b948      	cbnz	r0, 80033ae <__smakebuf_r+0x46>
 800339a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800339e:	059a      	lsls	r2, r3, #22
 80033a0:	d4ee      	bmi.n	8003380 <__smakebuf_r+0x18>
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	81a3      	strh	r3, [r4, #12]
 80033ac:	e7e2      	b.n	8003374 <__smakebuf_r+0xc>
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	6020      	str	r0, [r4, #0]
 80033b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	9b01      	ldr	r3, [sp, #4]
 80033ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033be:	b15b      	cbz	r3, 80033d8 <__smakebuf_r+0x70>
 80033c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033c4:	4630      	mov	r0, r6
 80033c6:	f000 f81d 	bl	8003404 <_isatty_r>
 80033ca:	b128      	cbz	r0, 80033d8 <__smakebuf_r+0x70>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	81a3      	strh	r3, [r4, #12]
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	431d      	orrs	r5, r3
 80033dc:	81a5      	strh	r5, [r4, #12]
 80033de:	e7cf      	b.n	8003380 <__smakebuf_r+0x18>

080033e0 <_fstat_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4d07      	ldr	r5, [pc, #28]	@ (8003400 <_fstat_r+0x20>)
 80033e4:	2300      	movs	r3, #0
 80033e6:	4604      	mov	r4, r0
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	f7fd fa78 	bl	80008e2 <_fstat>
 80033f2:	1c43      	adds	r3, r0, #1
 80033f4:	d102      	bne.n	80033fc <_fstat_r+0x1c>
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	b103      	cbz	r3, 80033fc <_fstat_r+0x1c>
 80033fa:	6023      	str	r3, [r4, #0]
 80033fc:	bd38      	pop	{r3, r4, r5, pc}
 80033fe:	bf00      	nop
 8003400:	200002b0 	.word	0x200002b0

08003404 <_isatty_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d06      	ldr	r5, [pc, #24]	@ (8003420 <_isatty_r+0x1c>)
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	f7fd fa77 	bl	8000902 <_isatty>
 8003414:	1c43      	adds	r3, r0, #1
 8003416:	d102      	bne.n	800341e <_isatty_r+0x1a>
 8003418:	682b      	ldr	r3, [r5, #0]
 800341a:	b103      	cbz	r3, 800341e <_isatty_r+0x1a>
 800341c:	6023      	str	r3, [r4, #0]
 800341e:	bd38      	pop	{r3, r4, r5, pc}
 8003420:	200002b0 	.word	0x200002b0

08003424 <_sbrk_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	4d06      	ldr	r5, [pc, #24]	@ (8003440 <_sbrk_r+0x1c>)
 8003428:	2300      	movs	r3, #0
 800342a:	4604      	mov	r4, r0
 800342c:	4608      	mov	r0, r1
 800342e:	602b      	str	r3, [r5, #0]
 8003430:	f7fd fa80 	bl	8000934 <_sbrk>
 8003434:	1c43      	adds	r3, r0, #1
 8003436:	d102      	bne.n	800343e <_sbrk_r+0x1a>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	b103      	cbz	r3, 800343e <_sbrk_r+0x1a>
 800343c:	6023      	str	r3, [r4, #0]
 800343e:	bd38      	pop	{r3, r4, r5, pc}
 8003440:	200002b0 	.word	0x200002b0

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
