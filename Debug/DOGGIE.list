
DOGGIE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004e54  08004e54  00005e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f18  08004f18  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f18  08004f18  00005f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f20  08004f20  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f20  08004f20  00005f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f24  08004f24  00005f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  20000068  08004f90  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08004f90  00006370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eae  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236e  00000000  00000000  00016f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000192b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  0001a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8bb  00000000  00000000  0001ac05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102d7  00000000  00000000  0003a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6725  00000000  00000000  0004a797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004384  00000000  00000000  00110f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00115284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e3c 	.word	0x08004e3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004e3c 	.word	0x08004e3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fc26 	bl	8000e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f865 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f973 	bl	80008e4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80005fe:	f000 f8a1 	bl	8000744 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f923 	bl	800084c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000606:	f000 f8e3 	bl	80007d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_FDCAN_Start(&hfdcan1);
 800060a:	4827      	ldr	r0, [pc, #156]	@ (80006a8 <main+0xbc>)
 800060c:	f000 ff16 	bl	800143c <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	4824      	ldr	r0, [pc, #144]	@ (80006a8 <main+0xbc>)
 8000616:	f001 f841 	bl	800169c <HAL_FDCAN_ActivateNotification>
  printf("UART TEST\r\n");
 800061a:	4824      	ldr	r0, [pc, #144]	@ (80006ac <main+0xc0>)
 800061c:	f003 fdac 	bl	8004178 <puts>
  static int heartbeat = 0;
  const char *msg = "HELLO FROM STM32 UART\r\n";
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <main+0xc4>)
 8000622:	60fb      	str	r3, [r7, #12]
  lastCANMessage = HAL_GetTick();
 8000624:	f000 fc72 	bl	8000f0c <HAL_GetTick>
 8000628:	4603      	mov	r3, r0
 800062a:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <main+0xc8>)
 800062c:	6013      	str	r3, [r2, #0]
  currentTick = HAL_GetTick();
 800062e:	f000 fc6d 	bl	8000f0c <HAL_GetTick>
 8000632:	4603      	mov	r3, r0
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <main+0xcc>)
 8000636:	6013      	str	r3, [r2, #0]
  uint8_t lastErrorCode = 0x00;
 8000638:	2300      	movs	r3, #0
 800063a:	72fb      	strb	r3, [r7, #11]
  uint8_t errorcode = 0x00;
 800063c:	2300      	movs	r3, #0
 800063e:	72bb      	strb	r3, [r7, #10]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	currentTick = HAL_GetTick();
 8000640:	f000 fc64 	bl	8000f0c <HAL_GetTick>
 8000644:	4603      	mov	r3, r0
 8000646:	4a1c      	ldr	r2, [pc, #112]	@ (80006b8 <main+0xcc>)
 8000648:	6013      	str	r3, [r2, #0]
	//printf("ID: 0x%03X, DLC: %lu, Data: %02X %02X %02X ...\r\n", rxHeader.Identifier,rxHeader.DataLength, rxData[0], rxData[1], rxData[2] /*...*/);
	 	  HAL_Delay(50);
 800064a:	2032      	movs	r0, #50	@ 0x32
 800064c:	f000 fc6a 	bl	8000f24 <HAL_Delay>
	if (lastCANMessage - currentTick > TIMEOUT){
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0xc8>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <main+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800065e:	4293      	cmp	r3, r2
 8000660:	d90a      	bls.n	8000678 <main+0x8c>
		printf("STM32 HAS TIMEOUT");
 8000662:	4816      	ldr	r0, [pc, #88]	@ (80006bc <main+0xd0>)
 8000664:	f003 fd20 	bl	80040a8 <iprintf>
		HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800066e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000672:	f001 fc79 	bl	8001f68 <HAL_GPIO_WritePin>
 8000676:	e006      	b.n	8000686 <main+0x9a>
	}
	else{HAL_GPIO_WritePin(GPIOA, PIN7_Pin, GPIO_PIN_RESET);}
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000682:	f001 fc71 	bl	8001f68 <HAL_GPIO_WritePin>

	currentTick = HAL_GetTick();
 8000686:	f000 fc41 	bl	8000f0c <HAL_GetTick>
 800068a:	4603      	mov	r3, r0
 800068c:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <main+0xcc>)
 800068e:	6013      	str	r3, [r2, #0]
	  uint32_t psr = hfdcan1.Instance->PSR;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <main+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	607b      	str	r3, [r7, #4]
	  lec = psr & 0x7;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f003 0307 	and.w	r3, r3, #7
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <main+0xd4>)
 80006a4:	701a      	strb	r2, [r3, #0]
  {
 80006a6:	e7cb      	b.n	8000640 <main+0x54>
 80006a8:	20000084 	.word	0x20000084
 80006ac:	08004e54 	.word	0x08004e54
 80006b0:	08004e60 	.word	0x08004e60
 80006b4:	200001e0 	.word	0x200001e0
 80006b8:	200001e8 	.word	0x200001e8
 80006bc:	08004e78 	.word	0x08004e78
 80006c0:	200001e4 	.word	0x200001e4

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0318 	add.w	r3, r7, #24
 80006ce:	2238      	movs	r2, #56	@ 0x38
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fe30 	bl	8004338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ea:	f001 fc55 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2340      	movs	r3, #64	@ 0x40
 80006fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fcfb 	bl	8002100 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000710:	f000 f958 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2301      	movs	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2100      	movs	r1, #0
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fff9 	bl	8002724 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000738:	f000 f944 	bl	80009c4 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	@ 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 800074a:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <MX_FDCAN1_Init+0x88>)
 800074c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000760:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000762:	2200      	movs	r2, #0
 8000764:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800076c:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 800076e:	2200      	movs	r2, #0
 8000770:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000774:	2204      	movs	r2, #4
 8000776:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 800077a:	2201      	movs	r2, #1
 800077c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000780:	220d      	movs	r2, #13
 8000782:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000786:	2202      	movs	r2, #2
 8000788:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 800078c:	2201      	movs	r2, #1
 800078e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000790:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000792:	2201      	movs	r2, #1
 8000794:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 8000798:	2201      	movs	r2, #1
 800079a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 800079e:	2201      	movs	r2, #1
 80007a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007a8:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_FDCAN1_Init+0x84>)
 80007b6:	f000 fce7 	bl	8001188 <HAL_FDCAN_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80007c0:	f000 f900 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000084 	.word	0x20000084
 80007cc:	40006400 	.word	0x40006400

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <MX_SPI1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007ea:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SPI1_Init+0x74>)
 800081e:	2207      	movs	r2, #7
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SPI1_Init+0x74>)
 800082a:	2208      	movs	r2, #8
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000830:	f002 fbd0 	bl	8002fd4 <HAL_SPI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 f8c3 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000e8 	.word	0x200000e8
 8000848:	40013000 	.word	0x40013000

0800084c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000852:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <MX_USART2_UART_Init+0x94>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 8000896:	f002 fc48 	bl	800312a <HAL_UART_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f890 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 80008a8:	f003 fa72 	bl	8003d90 <HAL_UARTEx_SetTxFifoThreshold>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f887 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 80008ba:	f003 faa7 	bl	8003e0c <HAL_UARTEx_SetRxFifoThreshold>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f87e 	bl	80009c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_USART2_UART_Init+0x90>)
 80008ca:	f003 fa28 	bl	8003d1e <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f876 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2000014c 	.word	0x2000014c
 80008e0:	40004400 	.word	0x40004400

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_GPIO_Init+0x60>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fc:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <MX_GPIO_Init+0x60>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_GPIO_Init+0x60>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN7_GPIO_Port, PIN7_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f001 fb25 	bl	8001f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIN7_Pin */
  GPIO_InitStruct.Pin = PIN7_Pin;
 800091e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000922:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PIN7_GPIO_Port, &GPIO_InitStruct);
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f001 f994 	bl	8001c64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d014      	beq.n	8000986 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800095e:	4a0d      	ldr	r2, [pc, #52]	@ (8000994 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 fd92 	bl	800148c <HAL_FDCAN_GetRxMessage>
        //printf("Received CAN msg: ID=0x%03lX, DLC=%lu\r\n", rxHeader.Identifier, rxHeader.DataLength);
        lastCANMessage = HAL_GetTick();
 8000968:	f000 fad0 	bl	8000f0c <HAL_GetTick>
 800096c:	4603      	mov	r3, r0
 800096e:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000970:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < rxHeader.DataLength; i++) {
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	bf00      	nop
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800097a:	68da      	ldr	r2, [r3, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	429a      	cmp	r2, r3
            //printf("Data[%d] = 0x%02X\r\n", i, rxData[i]);
        	break;
        }
        printf("----\r\n");
 8000980:	4806      	ldr	r0, [pc, #24]	@ (800099c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8000982:	f003 fbf9 	bl	8004178 <puts>
    }
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000214 	.word	0x20000214
 8000994:	200001ec 	.word	0x200001ec
 8000998:	200001e0 	.word	0x200001e0
 800099c:	08004e8c 	.word	0x08004e8c

080009a0 <__io_putchar>:


int __io_putchar(int ch)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009a8:	1d39      	adds	r1, r7, #4
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295
 80009ae:	2201      	movs	r2, #1
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <__io_putchar+0x20>)
 80009b2:	f002 fc0a 	bl	80031ca <HAL_UART_Transmit>
    return ch;
 80009b6:	687b      	ldr	r3, [r7, #4]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000014c 	.word	0x2000014c

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <Error_Handler+0x8>

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a06:	f001 fb6b 	bl	80020e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b09e      	sub	sp, #120	@ 0x78
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2250      	movs	r2, #80	@ 0x50
 8000a36:	2100      	movs	r1, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 fc7d 	bl	8004338 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a24      	ldr	r2, [pc, #144]	@ (8000ad4 <HAL_FDCAN_MspInit+0xbc>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d141      	bne.n	8000acc <HAL_FDCAN_MspInit+0xb4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a52:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 f87f 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a64:	f7ff ffae 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <HAL_FDCAN_MspInit+0xc0>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ad8 <HAL_FDCAN_MspInit+0xc0>)
 8000a6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a72:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_FDCAN_MspInit+0xc0>)
 8000a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_FDCAN_MspInit+0xc0>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	4a14      	ldr	r2, [pc, #80]	@ (8000ad8 <HAL_FDCAN_MspInit+0xc0>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_FDCAN_MspInit+0xc0>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a98:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000aaa:	2309      	movs	r3, #9
 8000aac:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab8:	f001 f8d4 	bl	8001c64 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2015      	movs	r0, #21
 8000ac2:	f000 fb2c 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ac6:	2015      	movs	r0, #21
 8000ac8:	f000 fb43 	bl	8001152 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000acc:	bf00      	nop
 8000ace:	3778      	adds	r7, #120	@ 0x78
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40006400 	.word	0x40006400
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a17      	ldr	r2, [pc, #92]	@ (8000b58 <HAL_SPI_MspInit+0x7c>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d128      	bne.n	8000b50 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <HAL_SPI_MspInit+0x80>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b02:	4a16      	ldr	r2, [pc, #88]	@ (8000b5c <HAL_SPI_MspInit+0x80>)
 8000b04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <HAL_SPI_MspInit+0x80>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <HAL_SPI_MspInit+0x80>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <HAL_SPI_MspInit+0x80>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_SPI_MspInit+0x80>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b2e:	23a0      	movs	r3, #160	@ 0xa0
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4c:	f001 f88a 	bl	8001c64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09e      	sub	sp, #120	@ 0x78
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2250      	movs	r2, #80	@ 0x50
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fbd9 	bl	8004338 <memset>
  if(huart->Instance==USART2)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c08 <HAL_UART_MspInit+0xa8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d136      	bne.n	8000bfe <HAL_UART_MspInit+0x9e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f001 ffdd 	bl	8002b5c <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba8:	f7ff ff0c 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <HAL_UART_MspInit+0xac>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb0:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <HAL_UART_MspInit+0xac>)
 8000bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <HAL_UART_MspInit+0xac>)
 8000bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_UART_MspInit+0xac>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc8:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_UART_MspInit+0xac>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_UART_MspInit+0xac>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd4:	f003 0301 	and.w	r3, r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bdc:	230c      	movs	r3, #12
 8000bde:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bec:	2307      	movs	r3, #7
 8000bee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f001 f833 	bl	8001c64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bfe:	bf00      	nop
 8000c00:	3778      	adds	r7, #120	@ 0x78
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f93f 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <FDCAN1_IT0_IRQHandler+0x10>)
 8000c76:	f000 fdf7 	bl	8001868 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000084 	.word	0x20000084

08000c84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
  }

  return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe61 	bl	80009a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
  }
  return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f003 fb20 	bl	80043d4 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	@ (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2001c000 	.word	0x2001c000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000021c 	.word	0x2000021c
 8000dc8:	20000370 	.word	0x20000370

08000dcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df4:	f7ff ffea 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	@ (8000e2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	@ (8000e30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <LoopForever+0xe>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	@ (8000e3c <LoopForever+0x16>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f003 fadf 	bl	80043e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e22:	f7ff fbe3 	bl	80005ec <main>

08000e26 <LoopForever>:

LoopForever:
    b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   r0, =_estack
 8000e28:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e34:	08004f28 	.word	0x08004f28
  ldr r2, =_sbss
 8000e38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e3c:	20000370 	.word	0x20000370

08000e40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC1_2_IRQHandler>

08000e42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f95b 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	200f      	movs	r0, #15
 8000e54:	f000 f80e 	bl	8000e74 <HAL_InitTick>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	71fb      	strb	r3, [r7, #7]
 8000e62:	e001      	b.n	8000e68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e64:	f7ff fdb4 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e68:	79fb      	ldrb	r3, [r7, #7]

}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <HAL_InitTick+0x68>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d022      	beq.n	8000ece <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_InitTick+0x6c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <HAL_InitTick+0x68>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f966 	bl	800116e <HAL_SYSTICK_Config>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10f      	bne.n	8000ec8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d809      	bhi.n	8000ec2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb6:	f000 f932 	bl	800111e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <HAL_InitTick+0x70>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e004      	b.n	8000ed2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e001      	b.n	8000ed2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_IncTick+0x1c>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b05      	ldr	r3, [pc, #20]	@ (8000f08 <HAL_IncTick+0x20>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a03      	ldr	r2, [pc, #12]	@ (8000f04 <HAL_IncTick+0x1c>)
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20000220 	.word	0x20000220
 8000f08:	20000008 	.word	0x20000008

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000220 	.word	0x20000220

08000f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f2c:	f7ff ffee 	bl	8000f0c <HAL_GetTick>
 8000f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f3c:	d004      	beq.n	8000f48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3e:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_Delay+0x40>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	4413      	add	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f48:	bf00      	nop
 8000f4a:	f7ff ffdf 	bl	8000f0c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d8f7      	bhi.n	8000f4a <HAL_Delay+0x26>
  {
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	@ (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff40 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff90 	bl	800105c <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff33 	bl	8000fcc <__NVIC_EnableIRQ>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffa4 	bl	80010c4 <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e147      	b.n	800142a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d106      	bne.n	80011b4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fc32 	bl	8000a18 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	699a      	ldr	r2, [r3, #24]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0210 	bic.w	r2, r2, #16
 80011c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c4:	f7ff fea2 	bl	8000f0c <HAL_GetTick>
 80011c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011ca:	e012      	b.n	80011f2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011cc:	f7ff fe9e 	bl	8000f0c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b0a      	cmp	r3, #10
 80011d8:	d90b      	bls.n	80011f2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2203      	movs	r2, #3
 80011ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e11b      	b.n	800142a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d0e5      	beq.n	80011cc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff fe7c 	bl	8000f0c <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001216:	e012      	b.n	800123e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001218:	f7ff fe78 	bl	8000f0c <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b0a      	cmp	r3, #10
 8001224:	d90b      	bls.n	800123e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2203      	movs	r2, #3
 8001236:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e0f5      	b.n	800142a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0e5      	beq.n	8001218 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0202 	orr.w	r2, r2, #2
 800125a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a74      	ldr	r2, [pc, #464]	@ (8001434 <HAL_FDCAN_Init+0x2ac>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d103      	bne.n	800126e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001266:	4a74      	ldr	r2, [pc, #464]	@ (8001438 <HAL_FDCAN_Init+0x2b0>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7c1b      	ldrb	r3, [r3, #16]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d108      	bne.n	8001288 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	e007      	b.n	8001298 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001296:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7c5b      	ldrb	r3, [r3, #17]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	e007      	b.n	80012c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7c9b      	ldrb	r3, [r3, #18]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	e007      	b.n	80012ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80012ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001310:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0210 	bic.w	r2, r2, #16
 8001320:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d108      	bne.n	800133c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0204 	orr.w	r2, r2, #4
 8001338:	619a      	str	r2, [r3, #24]
 800133a:	e02c      	b.n	8001396 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d028      	beq.n	8001396 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d01c      	beq.n	8001386 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800135a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0210 	orr.w	r2, r2, #16
 800136a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b03      	cmp	r3, #3
 8001372:	d110      	bne.n	8001396 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0220 	orr.w	r2, r2, #32
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	e007      	b.n	8001396 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	3b01      	subs	r3, #1
 800139c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80013ca:	d115      	bne.n	80013f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d6:	3b01      	subs	r3, #1
 80013d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e0:	3b01      	subs	r3, #1
 80013e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fbc6 	bl	8001ba0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40006400 	.word	0x40006400
 8001438:	40006500 	.word	0x40006500

0800143c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d110      	bne.n	8001472 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	e006      	b.n	8001480 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001476:	f043 0204 	orr.w	r2, r3, #4
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
  }
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800148c:	b480      	push	{r7}
 800148e:	b08b      	sub	sp, #44	@ 0x2c
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
 8001498:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014a4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014a6:	7efb      	ldrb	r3, [r7, #27]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	f040 80e8 	bne.w	800167e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b40      	cmp	r3, #64	@ 0x40
 80014b2:	d137      	bne.n	8001524 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d107      	bne.n	80014d4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0db      	b.n	800168c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e4:	d10a      	bne.n	80014fc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014f6:	d101      	bne.n	80014fc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001514:	69fa      	ldr	r2, [r7, #28]
 8001516:	4613      	mov	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
 8001522:	e036      	b.n	8001592 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001538:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0a3      	b.n	800168c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800154c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001554:	d10a      	bne.n	800156c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001566:	d101      	bne.n	800156c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	4613      	mov	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0c9b      	lsrs	r3, r3, #18
 80015ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	e005      	b.n	80015c2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	3304      	adds	r3, #4
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	f003 020f 	and.w	r2, r3, #15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0e1b      	lsrs	r3, r3, #24
 8001616:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	0fda      	lsrs	r2, r3, #31
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162a:	3304      	adds	r3, #4
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
 8001636:	e00a      	b.n	800164e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	441a      	add	r2, r3
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	440b      	add	r3, r1
 8001644:	7812      	ldrb	r2, [r2, #0]
 8001646:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	3301      	adds	r3, #1
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	461a      	mov	r2, r3
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	4293      	cmp	r3, r2
 800165c:	d3ec      	bcc.n	8001638 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b40      	cmp	r3, #64	@ 0x40
 8001662:	d105      	bne.n	8001670 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800166e:	e004      	b.n	800167a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e006      	b.n	800168c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	f043 0208 	orr.w	r2, r3, #8
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	372c      	adds	r7, #44	@ 0x2c
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	08004eac 	.word	0x08004eac

0800169c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016ae:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <HAL_FDCAN_ActivateNotification+0x22>
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	f040 80c8 	bne.w	800184e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d03b      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d004      	beq.n	80016ee <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d031      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d027      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01d      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d013      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b00      	cmp	r3, #0
 800173c:	d009      	beq.n	8001752 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00c      	beq.n	8001762 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d107      	bne.n	8001762 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0201 	orr.w	r2, r2, #1
 8001760:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d13b      	bne.n	80017ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d131      	bne.n	80017ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d127      	bne.n	80017ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11d      	bne.n	80017ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d004      	beq.n	80017c6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d113      	bne.n	80017ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00c      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0202 	orr.w	r2, r2, #2
 80017fc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	430a      	orrs	r2, r1
 8001818:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	430a      	orrs	r2, r1
 8001836:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	430a      	orrs	r2, r1
 8001848:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e006      	b.n	800185c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001852:	f043 0202 	orr.w	r2, r3, #2
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
  }
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	@ 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001876:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	4013      	ands	r3, r2
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800189c:	4013      	ands	r3, r2
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b4:	4013      	ands	r3, r2
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80018c2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	6a3a      	ldr	r2, [r7, #32]
 80018cc:	4013      	ands	r3, r2
 80018ce:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018da:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ee:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018f6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	099b      	lsrs	r3, r3, #6
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00c      	beq.n	800191e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2240      	movs	r2, #64	@ 0x40
 8001916:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f922 	bl	8001b62 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01a      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d014      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800193e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001956:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001958:	6939      	ldr	r1, [r7, #16]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8e2 	bl	8001b24 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800196c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800196e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f8ac 	bl	8001ace <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7fe ffde 	bl	8000948 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001998:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800199a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8a1 	bl	8001ae4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	0a5b      	lsrs	r3, r3, #9
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00d      	beq.n	80019ca <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	0a5b      	lsrs	r3, r3, #9
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f898 	bl	8001afa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	09db      	lsrs	r3, r3, #7
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d019      	beq.n	8001a0a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	09db      	lsrs	r3, r3, #7
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d013      	beq.n	8001a0a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019ea:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a02:	68f9      	ldr	r1, [r7, #12]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f882 	bl	8001b0e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	0b5b      	lsrs	r3, r3, #13
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	0b5b      	lsrs	r3, r3, #13
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f884 	bl	8001b3a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	0bdb      	lsrs	r3, r3, #15
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00d      	beq.n	8001a5a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	0bdb      	lsrs	r3, r3, #15
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d007      	beq.n	8001a5a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f87a 	bl	8001b4e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	0b9b      	lsrs	r3, r3, #14
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	0b9b      	lsrs	r3, r3, #14
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a96:	69f9      	ldr	r1, [r7, #28]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f876 	bl	8001b8a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f858 	bl	8001b76 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3730      	adds	r7, #48	@ 0x30
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001baa:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2b      	ldr	r2, [pc, #172]	@ (8001c60 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d103      	bne.n	8001bbe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bbc:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bcc:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bf2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfa:	061a      	lsls	r2, r3, #24
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	e005      	b.n	8001c40 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d3f3      	bcc.n	8001c34 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	4000a400 	.word	0x4000a400
 8001c60:	40006800 	.word	0x40006800

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c72:	e15a      	b.n	8001f2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 814c 	beq.w	8001f24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d005      	beq.n	8001ca4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d130      	bne.n	8001d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	f003 0201 	and.w	r2, r3, #1
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d017      	beq.n	8001d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d123      	bne.n	8001d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	6939      	ldr	r1, [r7, #16]
 8001d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0203 	and.w	r2, r3, #3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 80a6 	beq.w	8001f24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <HAL_GPIO_Init+0x2e4>)
 8001dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f48 <HAL_GPIO_Init+0x2e4>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de4:	4b58      	ldr	r3, [pc, #352]	@ (8001f48 <HAL_GPIO_Init+0x2e4>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df0:	4a56      	ldr	r2, [pc, #344]	@ (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e1a:	d01f      	beq.n	8001e5c <HAL_GPIO_Init+0x1f8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f50 <HAL_GPIO_Init+0x2ec>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d019      	beq.n	8001e58 <HAL_GPIO_Init+0x1f4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4b      	ldr	r2, [pc, #300]	@ (8001f54 <HAL_GPIO_Init+0x2f0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d013      	beq.n	8001e54 <HAL_GPIO_Init+0x1f0>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f58 <HAL_GPIO_Init+0x2f4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00d      	beq.n	8001e50 <HAL_GPIO_Init+0x1ec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a49      	ldr	r2, [pc, #292]	@ (8001f5c <HAL_GPIO_Init+0x2f8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <HAL_GPIO_Init+0x1e8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a48      	ldr	r2, [pc, #288]	@ (8001f60 <HAL_GPIO_Init+0x2fc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d101      	bne.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e44:	2305      	movs	r3, #5
 8001e46:	e00a      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e008      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e50:	2303      	movs	r3, #3
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1fa>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6e:	4937      	ldr	r1, [pc, #220]	@ (8001f4c <HAL_GPIO_Init+0x2e8>)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7c:	4b39      	ldr	r3, [pc, #228]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea0:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eca:	4a26      	ldr	r2, [pc, #152]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1e:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <HAL_GPIO_Init+0x300>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	fa22 f303 	lsr.w	r3, r2, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f47f ae9d 	bne.w	8001c74 <HAL_GPIO_Init+0x10>
  }
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	48000800 	.word	0x48000800
 8001f58:	48000c00 	.word	0x48000c00
 8001f5c:	48001000 	.word	0x48001000
 8001f60:	48001400 	.word	0x48001400
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
 8001f74:	4613      	mov	r3, r2
 8001f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f78:	787b      	ldrb	r3, [r7, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f7e:	887a      	ldrh	r2, [r7, #2]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f86:	887a      	ldrh	r2, [r7, #2]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d141      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb2:	d131      	bne.n	8002018 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fb4:	4b47      	ldr	r3, [pc, #284]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fba:	4a46      	ldr	r2, [pc, #280]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc4:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fcc:	4a41      	ldr	r2, [pc, #260]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fd4:	4b40      	ldr	r3, [pc, #256]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2232      	movs	r2, #50	@ 0x32
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	4a3f      	ldr	r2, [pc, #252]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe4:	0c9b      	lsrs	r3, r3, #18
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fea:	e002      	b.n	8001ff2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff2:	4b38      	ldr	r3, [pc, #224]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ffe:	d102      	bne.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f2      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002006:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002012:	d158      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e057      	b.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002018:	4b2e      	ldr	r3, [pc, #184]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201e:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002024:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002028:	e04d      	b.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002030:	d141      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002032:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800203a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203e:	d131      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002040:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002042:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002046:	4a23      	ldr	r2, [pc, #140]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002058:	4a1e      	ldr	r2, [pc, #120]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800205e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002060:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2232      	movs	r2, #50	@ 0x32
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002076:	e002      	b.n	800207e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3b01      	subs	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800208a:	d102      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f2      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002092:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800209e:	d112      	bne.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e011      	b.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020b4:	e007      	b.n	80020c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020be:	4a05      	ldr	r2, [pc, #20]	@ (80020d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40007000 	.word	0x40007000
 80020d8:	20000000 	.word	0x20000000
 80020dc:	431bde83 	.word	0x431bde83

080020e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020e4:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020ee:	6093      	str	r3, [r2, #8]
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e2fe      	b.n	8002710 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4b97      	ldr	r3, [pc, #604]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002128:	4b94      	ldr	r3, [pc, #592]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d102      	bne.n	800213e <HAL_RCC_OscConfig+0x3e>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d002      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b8d      	ldr	r3, [pc, #564]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2d9      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b85      	ldr	r3, [pc, #532]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a84      	ldr	r2, [pc, #528]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b7f      	ldr	r3, [pc, #508]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7e      	ldr	r2, [pc, #504]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b7c      	ldr	r3, [pc, #496]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7b      	ldr	r2, [pc, #492]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b78      	ldr	r3, [pc, #480]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a77      	ldr	r2, [pc, #476]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b75      	ldr	r3, [pc, #468]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a74      	ldr	r2, [pc, #464]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe fea8 	bl	8000f0c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe fea4 	bl	8000f0c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e29e      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe94 	bl	8000f0c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe fe90 	bl	8000f0c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e28a      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021fa:	4b60      	ldr	r3, [pc, #384]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d075      	beq.n	8002302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002216:	4b59      	ldr	r3, [pc, #356]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002220:	4b56      	ldr	r3, [pc, #344]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	2b0c      	cmp	r3, #12
 800222e:	d102      	bne.n	8002236 <HAL_RCC_OscConfig+0x136>
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d002      	beq.n	800223c <HAL_RCC_OscConfig+0x13c>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d11f      	bne.n	800227c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223c:	4b4f      	ldr	r3, [pc, #316]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_OscConfig+0x154>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e25d      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002254:	4b49      	ldr	r3, [pc, #292]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	4946      	ldr	r1, [pc, #280]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002268:	4b45      	ldr	r3, [pc, #276]	@ (8002380 <HAL_RCC_OscConfig+0x280>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fe01 	bl	8000e74 <HAL_InitTick>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e249      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d023      	beq.n	80022cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002284:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a3c      	ldr	r2, [pc, #240]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800228a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7fe fe3c 	bl	8000f0c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7fe fe38 	bl	8000f0c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e232      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022aa:	4b34      	ldr	r3, [pc, #208]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b31      	ldr	r3, [pc, #196]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	492d      	ldr	r1, [pc, #180]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e01a      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80022d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe18 	bl	8000f0c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe fe14 	bl	8000f0c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e20e      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1e0>
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002300:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d041      	beq.n	8002392 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01c      	beq.n	8002350 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231c:	4a17      	ldr	r2, [pc, #92]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7fe fdf1 	bl	8000f0c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe fded 	bl	8000f0c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1e7      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002340:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0ef      	beq.n	800232e <HAL_RCC_OscConfig+0x22e>
 800234e:	e020      	b.n	8002392 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002350:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_RCC_OscConfig+0x27c>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7fe fdd4 	bl	8000f0c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002366:	e00d      	b.n	8002384 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7fe fdd0 	bl	8000f0c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d906      	bls.n	8002384 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1ca      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002384:	4b8c      	ldr	r3, [pc, #560]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ea      	bne.n	8002368 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80a6 	beq.w	80024ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023a4:	4b84      	ldr	r3, [pc, #528]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2b4>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x2b6>
 80023b4:	2300      	movs	r3, #0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00d      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b7f      	ldr	r3, [pc, #508]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	4a7e      	ldr	r2, [pc, #504]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c6:	4b7c      	ldr	r3, [pc, #496]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80023c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023d2:	2301      	movs	r3, #1
 80023d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d6:	4b79      	ldr	r3, [pc, #484]	@ (80025bc <HAL_RCC_OscConfig+0x4bc>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d118      	bne.n	8002414 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e2:	4b76      	ldr	r3, [pc, #472]	@ (80025bc <HAL_RCC_OscConfig+0x4bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a75      	ldr	r2, [pc, #468]	@ (80025bc <HAL_RCC_OscConfig+0x4bc>)
 80023e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ee:	f7fe fd8d 	bl	8000f0c <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f6:	f7fe fd89 	bl	8000f0c <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e183      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002408:	4b6c      	ldr	r3, [pc, #432]	@ (80025bc <HAL_RCC_OscConfig+0x4bc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_RCC_OscConfig+0x32e>
 800241c:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002422:	4a65      	ldr	r2, [pc, #404]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242c:	e024      	b.n	8002478 <HAL_RCC_OscConfig+0x378>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b05      	cmp	r3, #5
 8002434:	d110      	bne.n	8002458 <HAL_RCC_OscConfig+0x358>
 8002436:	4b60      	ldr	r3, [pc, #384]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243c:	4a5e      	ldr	r2, [pc, #376]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002446:	4b5c      	ldr	r3, [pc, #368]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244c:	4a5a      	ldr	r2, [pc, #360]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002456:	e00f      	b.n	8002478 <HAL_RCC_OscConfig+0x378>
 8002458:	4b57      	ldr	r3, [pc, #348]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	4a56      	ldr	r2, [pc, #344]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002468:	4b53      	ldr	r3, [pc, #332]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	4a52      	ldr	r2, [pc, #328]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d016      	beq.n	80024ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fd44 	bl	8000f0c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe fd40 	bl	8000f0c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e138      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	4b46      	ldr	r3, [pc, #280]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ed      	beq.n	8002488 <HAL_RCC_OscConfig+0x388>
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7fe fd2d 	bl	8000f0c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fd29 	bl	8000f0c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e121      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024cc:	4b3a      	ldr	r3, [pc, #232]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ed      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024da:	7ffb      	ldrb	r3, [r7, #31]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b35      	ldr	r3, [pc, #212]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	4a34      	ldr	r2, [pc, #208]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d03c      	beq.n	8002572 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002500:	4b2d      	ldr	r3, [pc, #180]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002506:	4a2c      	ldr	r2, [pc, #176]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7fe fcfc 	bl	8000f0c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002518:	f7fe fcf8 	bl	8000f0c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e0f2      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ef      	beq.n	8002518 <HAL_RCC_OscConfig+0x418>
 8002538:	e01b      	b.n	8002572 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800253a:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800253c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002540:	4a1d      	ldr	r2, [pc, #116]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254a:	f7fe fcdf 	bl	8000f0c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002552:	f7fe fcdb 	bl	8000f0c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0d5      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002566:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ef      	bne.n	8002552 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 80c9 	beq.w	800270e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b0c      	cmp	r3, #12
 8002586:	f000 8083 	beq.w	8002690 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d15e      	bne.n	8002650 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a08      	ldr	r2, [pc, #32]	@ (80025b8 <HAL_RCC_OscConfig+0x4b8>)
 8002598:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7fe fcb5 	bl	8000f0c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	e00c      	b.n	80025c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7fe fcb1 	bl	8000f0c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d905      	bls.n	80025c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0ab      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	4b55      	ldr	r3, [pc, #340]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ec      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	4b52      	ldr	r3, [pc, #328]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b52      	ldr	r3, [pc, #328]	@ (800271c <HAL_RCC_OscConfig+0x61c>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6a11      	ldr	r1, [r2, #32]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025dc:	3a01      	subs	r2, #1
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025e6:	0212      	lsls	r2, r2, #8
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025ee:	0852      	lsrs	r2, r2, #1
 80025f0:	3a01      	subs	r2, #1
 80025f2:	0552      	lsls	r2, r2, #21
 80025f4:	4311      	orrs	r1, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025fa:	0852      	lsrs	r2, r2, #1
 80025fc:	3a01      	subs	r2, #1
 80025fe:	0652      	lsls	r2, r2, #25
 8002600:	4311      	orrs	r1, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002606:	06d2      	lsls	r2, r2, #27
 8002608:	430a      	orrs	r2, r1
 800260a:	4943      	ldr	r1, [pc, #268]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b41      	ldr	r3, [pc, #260]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a40      	ldr	r2, [pc, #256]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800261c:	4b3e      	ldr	r3, [pc, #248]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a3d      	ldr	r2, [pc, #244]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002626:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7fe fc70 	bl	8000f0c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe fc6c 	bl	8000f0c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e066      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	4b35      	ldr	r3, [pc, #212]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x530>
 800264e:	e05e      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	4b31      	ldr	r3, [pc, #196]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a30      	ldr	r2, [pc, #192]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800265a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fc56 	bl	8000f0c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fc52 	bl	8000f0c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04c      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002676:	4b28      	ldr	r3, [pc, #160]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002682:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	4924      	ldr	r1, [pc, #144]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002688:	4b25      	ldr	r3, [pc, #148]	@ (8002720 <HAL_RCC_OscConfig+0x620>)
 800268a:	4013      	ands	r3, r2
 800268c:	60cb      	str	r3, [r1, #12]
 800268e:	e03e      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e039      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800269c:	4b1e      	ldr	r3, [pc, #120]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d12c      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	3b01      	subs	r3, #1
 80026bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d123      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d11b      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d113      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	3b01      	subs	r3, #1
 80026f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d109      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	3b01      	subs	r3, #1
 8002704:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	019f800c 	.word	0x019f800c
 8002720:	feeefffc 	.word	0xfeeefffc

08002724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e11e      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800273c:	4b91      	ldr	r3, [pc, #580]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d910      	bls.n	800276c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b8e      	ldr	r3, [pc, #568]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 020f 	bic.w	r2, r3, #15
 8002752:	498c      	ldr	r1, [pc, #560]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b8a      	ldr	r3, [pc, #552]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e106      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d073      	beq.n	8002860 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d129      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002780:	4b81      	ldr	r3, [pc, #516]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0f4      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002790:	f000 f99e 	bl	8002ad0 <RCC_GetSysClockFreqFromPLLSource>
 8002794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4a7c      	ldr	r2, [pc, #496]	@ (800298c <HAL_RCC_ClockConfig+0x268>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d93f      	bls.n	800281e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800279e:	4b7a      	ldr	r3, [pc, #488]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d033      	beq.n	800281e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d12f      	bne.n	800281e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027be:	4b72      	ldr	r3, [pc, #456]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c6:	4a70      	ldr	r2, [pc, #448]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80027c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e024      	b.n	800281e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0c6      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ec:	4b66      	ldr	r3, [pc, #408]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0be      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027fc:	f000 f8ce 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8002800:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4a61      	ldr	r2, [pc, #388]	@ (800298c <HAL_RCC_ClockConfig+0x268>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d909      	bls.n	800281e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800280a:	4b5f      	ldr	r3, [pc, #380]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002812:	4a5d      	ldr	r2, [pc, #372]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 8002814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002818:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b5a      	ldr	r3, [pc, #360]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4957      	ldr	r1, [pc, #348]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002830:	f7fe fb6c 	bl	8000f0c <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fb68 	bl	8000f0c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e095      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b4e      	ldr	r3, [pc, #312]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b43      	ldr	r3, [pc, #268]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a42      	ldr	r2, [pc, #264]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800287e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002882:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002890:	4b3d      	ldr	r3, [pc, #244]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002898:	4a3b      	ldr	r2, [pc, #236]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800289a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800289e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b39      	ldr	r3, [pc, #228]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4936      	ldr	r1, [pc, #216]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b80      	cmp	r3, #128	@ 0x80
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028ba:	4b33      	ldr	r3, [pc, #204]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	4a32      	ldr	r2, [pc, #200]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 80028c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d21d      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f023 020f 	bic.w	r2, r3, #15
 80028dc:	4929      	ldr	r1, [pc, #164]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fb12 	bl	8000f0c <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7fe fb0e 	bl	8000f0c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e03b      	b.n	800297a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002902:	4b20      	ldr	r3, [pc, #128]	@ (8002984 <HAL_RCC_ClockConfig+0x260>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d1ed      	bne.n	80028ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4917      	ldr	r1, [pc, #92]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490f      	ldr	r1, [pc, #60]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800294e:	f000 f825 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8002952:	4602      	mov	r2, r0
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <HAL_RCC_ClockConfig+0x264>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	490c      	ldr	r1, [pc, #48]	@ (8002990 <HAL_RCC_ClockConfig+0x26c>)
 8002960:	5ccb      	ldrb	r3, [r1, r3]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	4a0a      	ldr	r2, [pc, #40]	@ (8002994 <HAL_RCC_ClockConfig+0x270>)
 800296c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800296e:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <HAL_RCC_ClockConfig+0x274>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fa7e 	bl	8000e74 <HAL_InitTick>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000
 8002988:	40021000 	.word	0x40021000
 800298c:	04c4b400 	.word	0x04c4b400
 8002990:	08004e94 	.word	0x08004e94
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	e047      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029b4:	4b27      	ldr	r3, [pc, #156]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c0:	4b26      	ldr	r3, [pc, #152]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	e03e      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029c6:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d136      	bne.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029d2:	4b20      	ldr	r3, [pc, #128]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	3301      	adds	r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	4a16      	ldr	r2, [pc, #88]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fa:	68d2      	ldr	r2, [r2, #12]
 80029fc:	0a12      	lsrs	r2, r2, #8
 80029fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
      break;
 8002a08:	e00c      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a0a:	4a13      	ldr	r2, [pc, #76]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a14:	68d2      	ldr	r2, [r2, #12]
 8002a16:	0a12      	lsrs	r2, r2, #8
 8002a18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]
      break;
 8002a22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a24:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0e5b      	lsrs	r3, r3, #25
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e001      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a44:	693b      	ldr	r3, [r7, #16]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	@ (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4904      	ldr	r1, [pc, #16]	@ (8002aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08004ea4 	.word	0x08004ea4

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa8:	f7ff ffda 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b06      	ldr	r3, [pc, #24]	@ (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0adb      	lsrs	r3, r3, #11
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4904      	ldr	r1, [pc, #16]	@ (8002acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08004ea4 	.word	0x08004ea4

08002ad0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3301      	adds	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d10c      	bne.n	8002b0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af4:	4a17      	ldr	r2, [pc, #92]	@ (8002b54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afc:	4a14      	ldr	r2, [pc, #80]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afe:	68d2      	ldr	r2, [r2, #12]
 8002b00:	0a12      	lsrs	r2, r2, #8
 8002b02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
    break;
 8002b0c:	e00c      	b.n	8002b28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0e:	4a12      	ldr	r2, [pc, #72]	@ (8002b58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b18:	68d2      	ldr	r2, [r2, #12]
 8002b1a:	0a12      	lsrs	r2, r2, #8
 8002b1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    break;
 8002b26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0e5b      	lsrs	r3, r3, #25
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b42:	687b      	ldr	r3, [r7, #4]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	00f42400 	.word	0x00f42400

08002b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b64:	2300      	movs	r3, #0
 8002b66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b68:	2300      	movs	r3, #0
 8002b6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8098 	beq.w	8002caa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7e:	4b43      	ldr	r3, [pc, #268]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10d      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8a:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a39      	ldr	r2, [pc, #228]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe f9ab 	bl	8000f0c <HAL_GetTick>
 8002bb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb8:	e009      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe f9a7 	bl	8000f0c <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d902      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	74fb      	strb	r3, [r7, #19]
        break;
 8002bcc:	e005      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bce:	4b30      	ldr	r3, [pc, #192]	@ (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0ef      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d159      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002be0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01e      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d019      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bfc:	4b23      	ldr	r3, [pc, #140]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c08:	4b20      	ldr	r3, [pc, #128]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c18:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c28:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f967 	bl	8000f0c <HAL_GetTick>
 8002c3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c40:	e00b      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f963 	bl	8000f0c <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	74fb      	strb	r3, [r7, #19]
            break;
 8002c58:	e006      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ec      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10b      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6e:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7c:	4903      	ldr	r1, [pc, #12]	@ (8002c8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c84:	e008      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	74bb      	strb	r3, [r7, #18]
 8002c8a:	e005      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c98:	7c7b      	ldrb	r3, [r7, #17]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d105      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9e:	4ba7      	ldr	r3, [pc, #668]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	4aa6      	ldr	r2, [pc, #664]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb6:	4ba1      	ldr	r3, [pc, #644]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cbc:	f023 0203 	bic.w	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	499d      	ldr	r1, [pc, #628]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cd8:	4b98      	ldr	r3, [pc, #608]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cde:	f023 020c 	bic.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	4995      	ldr	r1, [pc, #596]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cfa:	4b90      	ldr	r3, [pc, #576]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d00:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	498c      	ldr	r1, [pc, #560]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d1c:	4b87      	ldr	r3, [pc, #540]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	4984      	ldr	r1, [pc, #528]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	497b      	ldr	r1, [pc, #492]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d60:	4b76      	ldr	r3, [pc, #472]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4973      	ldr	r1, [pc, #460]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d82:	4b6e      	ldr	r3, [pc, #440]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	496a      	ldr	r1, [pc, #424]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002da4:	4b65      	ldr	r3, [pc, #404]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002daa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4962      	ldr	r1, [pc, #392]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	4959      	ldr	r1, [pc, #356]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de8:	4b54      	ldr	r3, [pc, #336]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df6:	4951      	ldr	r1, [pc, #324]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d015      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e18:	4948      	ldr	r1, [pc, #288]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e28:	d105      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2a:	4b44      	ldr	r3, [pc, #272]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4a43      	ldr	r2, [pc, #268]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e34:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d015      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e42:	4b3e      	ldr	r3, [pc, #248]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	493a      	ldr	r1, [pc, #232]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e60:	d105      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e62:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a35      	ldr	r2, [pc, #212]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e6c:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d015      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e7a:	4b30      	ldr	r3, [pc, #192]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e88:	492c      	ldr	r1, [pc, #176]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e9a:	4b28      	ldr	r3, [pc, #160]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ea4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d015      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec0:	491e      	ldr	r1, [pc, #120]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ed0:	d105      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002edc:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d015      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eea:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	4910      	ldr	r1, [pc, #64]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f08:	d105      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f14:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d018      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	4902      	ldr	r1, [pc, #8]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	e001      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f46:	d105      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f48:	4b21      	ldr	r3, [pc, #132]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a20      	ldr	r2, [pc, #128]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f60:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f66:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	4918      	ldr	r1, [pc, #96]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d105      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f98:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa6:	490a      	ldr	r1, [pc, #40]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e09d      	b.n	8003122 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ff6:	d009      	beq.n	800300c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	61da      	str	r2, [r3, #28]
 8002ffe:	e005      	b.n	800300c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fd58 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800304c:	d902      	bls.n	8003054 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e002      	b.n	800305a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003058:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003062:	d007      	beq.n	8003074 <HAL_SPI_Init+0xa0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800306c:	d002      	beq.n	8003074 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b6:	ea42 0103 	orr.w	r1, r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	f003 0204 	and.w	r2, r3, #4
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80030f0:	ea42 0103 	orr.w	r1, r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e042      	b.n	80031c2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fd06 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	@ 0x24
 8003158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fbb3 	bl	80038e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f8b4 	bl	80032e8 <UART_SetConfig>
 8003180:	4603      	mov	r3, r0
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e01b      	b.n	80031c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003198:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fc32 	bl	8003a24 <UART_CheckIdleState>
 80031c0:	4603      	mov	r3, r0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b08a      	sub	sp, #40	@ 0x28
 80031ce:	af02      	add	r7, sp, #8
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	603b      	str	r3, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d17b      	bne.n	80032dc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Transmit+0x26>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e074      	b.n	80032de <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2221      	movs	r2, #33	@ 0x21
 8003200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003204:	f7fd fe82 	bl	8000f0c <HAL_GetTick>
 8003208:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	88fa      	ldrh	r2, [r7, #6]
 800320e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003222:	d108      	bne.n	8003236 <HAL_UART_Transmit+0x6c>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e003      	b.n	800323e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800323e:	e030      	b.n	80032a2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	2180      	movs	r1, #128	@ 0x80
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fc94 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e03d      	b.n	80032de <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	3302      	adds	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	e007      	b.n	8003290 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	781a      	ldrb	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3301      	adds	r3, #1
 800328e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1c8      	bne.n	8003240 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2140      	movs	r1, #64	@ 0x40
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fc5d 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e006      	b.n	80032de <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b08c      	sub	sp, #48	@ 0x30
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4313      	orrs	r3, r2
 800330e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4baa      	ldr	r3, [pc, #680]	@ (80035c0 <UART_SetConfig+0x2d8>)
 8003318:	4013      	ands	r3, r2
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003320:	430b      	orrs	r3, r1
 8003322:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a9f      	ldr	r2, [pc, #636]	@ (80035c4 <UART_SetConfig+0x2dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d004      	beq.n	8003354 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003350:	4313      	orrs	r3, r2
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800335e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003368:	430b      	orrs	r3, r1
 800336a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	f023 010f 	bic.w	r1, r3, #15
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a90      	ldr	r2, [pc, #576]	@ (80035c8 <UART_SetConfig+0x2e0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d125      	bne.n	80033d8 <UART_SetConfig+0xf0>
 800338c:	4b8f      	ldr	r3, [pc, #572]	@ (80035cc <UART_SetConfig+0x2e4>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b03      	cmp	r3, #3
 8003398:	d81a      	bhi.n	80033d0 <UART_SetConfig+0xe8>
 800339a:	a201      	add	r2, pc, #4	@ (adr r2, 80033a0 <UART_SetConfig+0xb8>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033c1 	.word	0x080033c1
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033c9 	.word	0x080033c9
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033b6:	e116      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80033b8:	2302      	movs	r3, #2
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033be:	e112      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80033c0:	2304      	movs	r3, #4
 80033c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c6:	e10e      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80033c8:	2308      	movs	r3, #8
 80033ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ce:	e10a      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80033d0:	2310      	movs	r3, #16
 80033d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033d6:	e106      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a7c      	ldr	r2, [pc, #496]	@ (80035d0 <UART_SetConfig+0x2e8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d138      	bne.n	8003454 <UART_SetConfig+0x16c>
 80033e2:	4b7a      	ldr	r3, [pc, #488]	@ (80035cc <UART_SetConfig+0x2e4>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d82d      	bhi.n	800344c <UART_SetConfig+0x164>
 80033f0:	a201      	add	r2, pc, #4	@ (adr r2, 80033f8 <UART_SetConfig+0x110>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800342d 	.word	0x0800342d
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800344d 	.word	0x0800344d
 8003404:	0800344d 	.word	0x0800344d
 8003408:	0800343d 	.word	0x0800343d
 800340c:	0800344d 	.word	0x0800344d
 8003410:	0800344d 	.word	0x0800344d
 8003414:	0800344d 	.word	0x0800344d
 8003418:	08003435 	.word	0x08003435
 800341c:	0800344d 	.word	0x0800344d
 8003420:	0800344d 	.word	0x0800344d
 8003424:	0800344d 	.word	0x0800344d
 8003428:	08003445 	.word	0x08003445
 800342c:	2300      	movs	r3, #0
 800342e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003432:	e0d8      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003434:	2302      	movs	r3, #2
 8003436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800343a:	e0d4      	b.n	80035e6 <UART_SetConfig+0x2fe>
 800343c:	2304      	movs	r3, #4
 800343e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003442:	e0d0      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003444:	2308      	movs	r3, #8
 8003446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344a:	e0cc      	b.n	80035e6 <UART_SetConfig+0x2fe>
 800344c:	2310      	movs	r3, #16
 800344e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003452:	e0c8      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a5e      	ldr	r2, [pc, #376]	@ (80035d4 <UART_SetConfig+0x2ec>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d125      	bne.n	80034aa <UART_SetConfig+0x1c2>
 800345e:	4b5b      	ldr	r3, [pc, #364]	@ (80035cc <UART_SetConfig+0x2e4>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003468:	2b30      	cmp	r3, #48	@ 0x30
 800346a:	d016      	beq.n	800349a <UART_SetConfig+0x1b2>
 800346c:	2b30      	cmp	r3, #48	@ 0x30
 800346e:	d818      	bhi.n	80034a2 <UART_SetConfig+0x1ba>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d00a      	beq.n	800348a <UART_SetConfig+0x1a2>
 8003474:	2b20      	cmp	r3, #32
 8003476:	d814      	bhi.n	80034a2 <UART_SetConfig+0x1ba>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <UART_SetConfig+0x19a>
 800347c:	2b10      	cmp	r3, #16
 800347e:	d008      	beq.n	8003492 <UART_SetConfig+0x1aa>
 8003480:	e00f      	b.n	80034a2 <UART_SetConfig+0x1ba>
 8003482:	2300      	movs	r3, #0
 8003484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003488:	e0ad      	b.n	80035e6 <UART_SetConfig+0x2fe>
 800348a:	2302      	movs	r3, #2
 800348c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003490:	e0a9      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003492:	2304      	movs	r3, #4
 8003494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003498:	e0a5      	b.n	80035e6 <UART_SetConfig+0x2fe>
 800349a:	2308      	movs	r3, #8
 800349c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034a0:	e0a1      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80034a2:	2310      	movs	r3, #16
 80034a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034a8:	e09d      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a4a      	ldr	r2, [pc, #296]	@ (80035d8 <UART_SetConfig+0x2f0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d125      	bne.n	8003500 <UART_SetConfig+0x218>
 80034b4:	4b45      	ldr	r3, [pc, #276]	@ (80035cc <UART_SetConfig+0x2e4>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034be:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c0:	d016      	beq.n	80034f0 <UART_SetConfig+0x208>
 80034c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c4:	d818      	bhi.n	80034f8 <UART_SetConfig+0x210>
 80034c6:	2b80      	cmp	r3, #128	@ 0x80
 80034c8:	d00a      	beq.n	80034e0 <UART_SetConfig+0x1f8>
 80034ca:	2b80      	cmp	r3, #128	@ 0x80
 80034cc:	d814      	bhi.n	80034f8 <UART_SetConfig+0x210>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <UART_SetConfig+0x1f0>
 80034d2:	2b40      	cmp	r3, #64	@ 0x40
 80034d4:	d008      	beq.n	80034e8 <UART_SetConfig+0x200>
 80034d6:	e00f      	b.n	80034f8 <UART_SetConfig+0x210>
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034de:	e082      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80034e0:	2302      	movs	r3, #2
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034e6:	e07e      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80034e8:	2304      	movs	r3, #4
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ee:	e07a      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80034f0:	2308      	movs	r3, #8
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034f6:	e076      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80034f8:	2310      	movs	r3, #16
 80034fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034fe:	e072      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a35      	ldr	r2, [pc, #212]	@ (80035dc <UART_SetConfig+0x2f4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d12a      	bne.n	8003560 <UART_SetConfig+0x278>
 800350a:	4b30      	ldr	r3, [pc, #192]	@ (80035cc <UART_SetConfig+0x2e4>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003518:	d01a      	beq.n	8003550 <UART_SetConfig+0x268>
 800351a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800351e:	d81b      	bhi.n	8003558 <UART_SetConfig+0x270>
 8003520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003524:	d00c      	beq.n	8003540 <UART_SetConfig+0x258>
 8003526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352a:	d815      	bhi.n	8003558 <UART_SetConfig+0x270>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <UART_SetConfig+0x250>
 8003530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003534:	d008      	beq.n	8003548 <UART_SetConfig+0x260>
 8003536:	e00f      	b.n	8003558 <UART_SetConfig+0x270>
 8003538:	2300      	movs	r3, #0
 800353a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800353e:	e052      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003540:	2302      	movs	r3, #2
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003546:	e04e      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003548:	2304      	movs	r3, #4
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800354e:	e04a      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003550:	2308      	movs	r3, #8
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003556:	e046      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003558:	2310      	movs	r3, #16
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800355e:	e042      	b.n	80035e6 <UART_SetConfig+0x2fe>
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <UART_SetConfig+0x2dc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d13a      	bne.n	80035e0 <UART_SetConfig+0x2f8>
 800356a:	4b18      	ldr	r3, [pc, #96]	@ (80035cc <UART_SetConfig+0x2e4>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003578:	d01a      	beq.n	80035b0 <UART_SetConfig+0x2c8>
 800357a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800357e:	d81b      	bhi.n	80035b8 <UART_SetConfig+0x2d0>
 8003580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003584:	d00c      	beq.n	80035a0 <UART_SetConfig+0x2b8>
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358a:	d815      	bhi.n	80035b8 <UART_SetConfig+0x2d0>
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <UART_SetConfig+0x2b0>
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003594:	d008      	beq.n	80035a8 <UART_SetConfig+0x2c0>
 8003596:	e00f      	b.n	80035b8 <UART_SetConfig+0x2d0>
 8003598:	2300      	movs	r3, #0
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800359e:	e022      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80035a0:	2302      	movs	r3, #2
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035a6:	e01e      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80035a8:	2304      	movs	r3, #4
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035ae:	e01a      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80035b0:	2308      	movs	r3, #8
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035b6:	e016      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80035b8:	2310      	movs	r3, #16
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80035be:	e012      	b.n	80035e6 <UART_SetConfig+0x2fe>
 80035c0:	cfff69f3 	.word	0xcfff69f3
 80035c4:	40008000 	.word	0x40008000
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40004400 	.word	0x40004400
 80035d4:	40004800 	.word	0x40004800
 80035d8:	40004c00 	.word	0x40004c00
 80035dc:	40005000 	.word	0x40005000
 80035e0:	2310      	movs	r3, #16
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4aae      	ldr	r2, [pc, #696]	@ (80038a4 <UART_SetConfig+0x5bc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	f040 8097 	bne.w	8003720 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d823      	bhi.n	8003642 <UART_SetConfig+0x35a>
 80035fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <UART_SetConfig+0x318>)
 80035fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003600:	08003625 	.word	0x08003625
 8003604:	08003643 	.word	0x08003643
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003643 	.word	0x08003643
 8003610:	08003633 	.word	0x08003633
 8003614:	08003643 	.word	0x08003643
 8003618:	08003643 	.word	0x08003643
 800361c:	08003643 	.word	0x08003643
 8003620:	0800363b 	.word	0x0800363b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003624:	f7ff fa28 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800362a:	e010      	b.n	800364e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800362c:	4b9e      	ldr	r3, [pc, #632]	@ (80038a8 <UART_SetConfig+0x5c0>)
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003630:	e00d      	b.n	800364e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003632:	f7ff f9b3 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8003636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003638:	e009      	b.n	800364e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003640:	e005      	b.n	800364e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800364c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8130 	beq.w	80038b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365a:	4a94      	ldr	r2, [pc, #592]	@ (80038ac <UART_SetConfig+0x5c4>)
 800365c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003660:	461a      	mov	r2, r3
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	fbb3 f3f2 	udiv	r3, r3, r2
 8003668:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	429a      	cmp	r2, r3
 8003678:	d305      	bcc.n	8003686 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	429a      	cmp	r2, r3
 8003684:	d903      	bls.n	800368e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800368c:	e113      	b.n	80038b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	2200      	movs	r2, #0
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	60fa      	str	r2, [r7, #12]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369a:	4a84      	ldr	r2, [pc, #528]	@ (80038ac <UART_SetConfig+0x5c4>)
 800369c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2200      	movs	r2, #0
 80036a4:	603b      	str	r3, [r7, #0]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036b0:	f7fc fe06 	bl	80002c0 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	020b      	lsls	r3, r1, #8
 80036c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036ca:	0202      	lsls	r2, r0, #8
 80036cc:	6979      	ldr	r1, [r7, #20]
 80036ce:	6849      	ldr	r1, [r1, #4]
 80036d0:	0849      	lsrs	r1, r1, #1
 80036d2:	2000      	movs	r0, #0
 80036d4:	460c      	mov	r4, r1
 80036d6:	4605      	mov	r5, r0
 80036d8:	eb12 0804 	adds.w	r8, r2, r4
 80036dc:	eb43 0905 	adc.w	r9, r3, r5
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	469a      	mov	sl, r3
 80036e8:	4693      	mov	fp, r2
 80036ea:	4652      	mov	r2, sl
 80036ec:	465b      	mov	r3, fp
 80036ee:	4640      	mov	r0, r8
 80036f0:	4649      	mov	r1, r9
 80036f2:	f7fc fde5 	bl	80002c0 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4613      	mov	r3, r2
 80036fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003704:	d308      	bcc.n	8003718 <UART_SetConfig+0x430>
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370c:	d204      	bcs.n	8003718 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a3a      	ldr	r2, [r7, #32]
 8003714:	60da      	str	r2, [r3, #12]
 8003716:	e0ce      	b.n	80038b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800371e:	e0ca      	b.n	80038b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003728:	d166      	bne.n	80037f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800372a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800372e:	2b08      	cmp	r3, #8
 8003730:	d827      	bhi.n	8003782 <UART_SetConfig+0x49a>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <UART_SetConfig+0x450>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	08003783 	.word	0x08003783
 8003748:	08003773 	.word	0x08003773
 800374c:	08003783 	.word	0x08003783
 8003750:	08003783 	.word	0x08003783
 8003754:	08003783 	.word	0x08003783
 8003758:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7ff f98c 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003762:	e014      	b.n	800378e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff f99e 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b4e      	ldr	r3, [pc, #312]	@ (80038a8 <UART_SetConfig+0x5c0>)
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7ff f913 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8003776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800377e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003780:	e005      	b.n	800378e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800378c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8090 	beq.w	80038b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	4a44      	ldr	r2, [pc, #272]	@ (80038ac <UART_SetConfig+0x5c4>)
 800379c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a8:	005a      	lsls	r2, r3, #1
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	441a      	add	r2, r3
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d916      	bls.n	80037f0 <UART_SetConfig+0x508>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c8:	d212      	bcs.n	80037f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f023 030f 	bic.w	r3, r3, #15
 80037d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	b29a      	uxth	r2, r3
 80037e0:	8bfb      	ldrh	r3, [r7, #30]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	8bfa      	ldrh	r2, [r7, #30]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	e062      	b.n	80038b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80037f6:	e05e      	b.n	80038b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d828      	bhi.n	8003852 <UART_SetConfig+0x56a>
 8003800:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <UART_SetConfig+0x520>)
 8003802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003806:	bf00      	nop
 8003808:	0800382d 	.word	0x0800382d
 800380c:	08003835 	.word	0x08003835
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003853 	.word	0x08003853
 8003818:	08003843 	.word	0x08003843
 800381c:	08003853 	.word	0x08003853
 8003820:	08003853 	.word	0x08003853
 8003824:	08003853 	.word	0x08003853
 8003828:	0800384b 	.word	0x0800384b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800382c:	f7ff f924 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003830:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003832:	e014      	b.n	800385e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003834:	f7ff f936 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 8003838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800383a:	e010      	b.n	800385e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800383c:	4b1a      	ldr	r3, [pc, #104]	@ (80038a8 <UART_SetConfig+0x5c0>)
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003840:	e00d      	b.n	800385e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003842:	f7ff f8ab 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8003846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003848:	e009      	b.n	800385e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003850:	e005      	b.n	800385e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800385c:	bf00      	nop
    }

    if (pclk != 0U)
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d028      	beq.n	80038b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	4a10      	ldr	r2, [pc, #64]	@ (80038ac <UART_SetConfig+0x5c4>)
 800386a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386e:	461a      	mov	r2, r3
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	fbb3 f2f2 	udiv	r2, r3, r2
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	085b      	lsrs	r3, r3, #1
 800387c:	441a      	add	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	d910      	bls.n	80038b0 <UART_SetConfig+0x5c8>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003894:	d20c      	bcs.n	80038b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	b29a      	uxth	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e009      	b.n	80038b6 <UART_SetConfig+0x5ce>
 80038a2:	bf00      	nop
 80038a4:	40008000 	.word	0x40008000
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	08004ebc 	.word	0x08004ebc
      }
      else
      {
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2200      	movs	r2, #0
 80038d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80038d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3730      	adds	r7, #48	@ 0x30
 80038da:	46bd      	mov	sp, r7
 80038dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01a      	beq.n	80039f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039de:	d10a      	bne.n	80039f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
  }
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b098      	sub	sp, #96	@ 0x60
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a34:	f7fd fa6a 	bl	8000f0c <HAL_GetTick>
 8003a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b08      	cmp	r3, #8
 8003a46:	d12f      	bne.n	8003aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a50:	2200      	movs	r2, #0
 8003a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f88e 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d022      	beq.n	8003aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e6      	bne.n	8003a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e063      	b.n	8003b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d149      	bne.n	8003b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f857 	bl	8003b78 <UART_WaitOnFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d03c      	beq.n	8003b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1e6      	bne.n	8003ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	e853 3f00 	ldrex	r3, [r3]
 8003b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3308      	adds	r3, #8
 8003b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b22:	61fa      	str	r2, [r7, #28]
 8003b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	69b9      	ldr	r1, [r7, #24]
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e5      	bne.n	8003b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e012      	b.n	8003b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3758      	adds	r7, #88	@ 0x58
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b88:	e04f      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d04b      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b92:	f7fd f9bb 	bl	8000f0c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d302      	bcc.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e04e      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d037      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b80      	cmp	r3, #128	@ 0x80
 8003bbe:	d034      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b40      	cmp	r3, #64	@ 0x40
 8003bc4:	d031      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d110      	bne.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2208      	movs	r2, #8
 8003bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 f838 	bl	8003c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2208      	movs	r2, #8
 8003be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e029      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c04:	d111      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f81e 	bl	8003c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e00f      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69da      	ldr	r2, [r3, #28]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d0a0      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b095      	sub	sp, #84	@ 0x54
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e6      	bne.n	8003c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3308      	adds	r3, #8
 8003cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e3      	bne.n	8003c8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d118      	bne.n	8003cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 0310 	bic.w	r3, r3, #16
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6979      	ldr	r1, [r7, #20]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e6      	bne.n	8003ccc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d12:	bf00      	nop
 8003d14:	3754      	adds	r7, #84	@ 0x54
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e027      	b.n	8003d84 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	@ 0x24
 8003d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003d62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e02d      	b.n	8003e04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	@ 0x24
 8003db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f84f 	bl	8003e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e02d      	b.n	8003e80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2224      	movs	r2, #36	@ 0x24
 8003e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f811 	bl	8003e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d108      	bne.n	8003eaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ea8:	e031      	b.n	8003f0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003eae:	2308      	movs	r3, #8
 8003eb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	0e5b      	lsrs	r3, r3, #25
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	0f5b      	lsrs	r3, r3, #29
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ed2:	7bbb      	ldrb	r3, [r7, #14]
 8003ed4:	7b3a      	ldrb	r2, [r7, #12]
 8003ed6:	4911      	ldr	r1, [pc, #68]	@ (8003f1c <UARTEx_SetNbDataToProcess+0x94>)
 8003ed8:	5c8a      	ldrb	r2, [r1, r2]
 8003eda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ede:	7b3a      	ldrb	r2, [r7, #12]
 8003ee0:	490f      	ldr	r1, [pc, #60]	@ (8003f20 <UARTEx_SetNbDataToProcess+0x98>)
 8003ee2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	7b7a      	ldrb	r2, [r7, #13]
 8003ef4:	4909      	ldr	r1, [pc, #36]	@ (8003f1c <UARTEx_SetNbDataToProcess+0x94>)
 8003ef6:	5c8a      	ldrb	r2, [r1, r2]
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003efc:	7b7a      	ldrb	r2, [r7, #13]
 8003efe:	4908      	ldr	r1, [pc, #32]	@ (8003f20 <UARTEx_SetNbDataToProcess+0x98>)
 8003f00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	08004ed4 	.word	0x08004ed4
 8003f20:	08004edc 	.word	0x08004edc

08003f24 <std>:
 8003f24:	2300      	movs	r3, #0
 8003f26:	b510      	push	{r4, lr}
 8003f28:	4604      	mov	r4, r0
 8003f2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003f2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f32:	6083      	str	r3, [r0, #8]
 8003f34:	8181      	strh	r1, [r0, #12]
 8003f36:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f38:	81c2      	strh	r2, [r0, #14]
 8003f3a:	6183      	str	r3, [r0, #24]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	2208      	movs	r2, #8
 8003f40:	305c      	adds	r0, #92	@ 0x5c
 8003f42:	f000 f9f9 	bl	8004338 <memset>
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <std+0x58>)
 8003f48:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <std+0x5c>)
 8003f4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <std+0x60>)
 8003f50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <std+0x64>)
 8003f54:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f56:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <std+0x68>)
 8003f58:	6224      	str	r4, [r4, #32]
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	d006      	beq.n	8003f6c <std+0x48>
 8003f5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f62:	4294      	cmp	r4, r2
 8003f64:	d002      	beq.n	8003f6c <std+0x48>
 8003f66:	33d0      	adds	r3, #208	@ 0xd0
 8003f68:	429c      	cmp	r4, r3
 8003f6a:	d105      	bne.n	8003f78 <std+0x54>
 8003f6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f74:	f000 ba58 	b.w	8004428 <__retarget_lock_init_recursive>
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	bf00      	nop
 8003f7c:	08004189 	.word	0x08004189
 8003f80:	080041ab 	.word	0x080041ab
 8003f84:	080041e3 	.word	0x080041e3
 8003f88:	08004207 	.word	0x08004207
 8003f8c:	20000224 	.word	0x20000224

08003f90 <stdio_exit_handler>:
 8003f90:	4a02      	ldr	r2, [pc, #8]	@ (8003f9c <stdio_exit_handler+0xc>)
 8003f92:	4903      	ldr	r1, [pc, #12]	@ (8003fa0 <stdio_exit_handler+0x10>)
 8003f94:	4803      	ldr	r0, [pc, #12]	@ (8003fa4 <stdio_exit_handler+0x14>)
 8003f96:	f000 b869 	b.w	800406c <_fwalk_sglue>
 8003f9a:	bf00      	nop
 8003f9c:	2000000c 	.word	0x2000000c
 8003fa0:	08004cc5 	.word	0x08004cc5
 8003fa4:	2000001c 	.word	0x2000001c

08003fa8 <cleanup_stdio>:
 8003fa8:	6841      	ldr	r1, [r0, #4]
 8003faa:	4b0c      	ldr	r3, [pc, #48]	@ (8003fdc <cleanup_stdio+0x34>)
 8003fac:	4299      	cmp	r1, r3
 8003fae:	b510      	push	{r4, lr}
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	d001      	beq.n	8003fb8 <cleanup_stdio+0x10>
 8003fb4:	f000 fe86 	bl	8004cc4 <_fflush_r>
 8003fb8:	68a1      	ldr	r1, [r4, #8]
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <cleanup_stdio+0x38>)
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	d002      	beq.n	8003fc6 <cleanup_stdio+0x1e>
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f000 fe7f 	bl	8004cc4 <_fflush_r>
 8003fc6:	68e1      	ldr	r1, [r4, #12]
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <cleanup_stdio+0x3c>)
 8003fca:	4299      	cmp	r1, r3
 8003fcc:	d004      	beq.n	8003fd8 <cleanup_stdio+0x30>
 8003fce:	4620      	mov	r0, r4
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd4:	f000 be76 	b.w	8004cc4 <_fflush_r>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000224 	.word	0x20000224
 8003fe0:	2000028c 	.word	0x2000028c
 8003fe4:	200002f4 	.word	0x200002f4

08003fe8 <global_stdio_init.part.0>:
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <global_stdio_init.part.0+0x30>)
 8003fec:	4c0b      	ldr	r4, [pc, #44]	@ (800401c <global_stdio_init.part.0+0x34>)
 8003fee:	4a0c      	ldr	r2, [pc, #48]	@ (8004020 <global_stdio_init.part.0+0x38>)
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	f7ff ff94 	bl	8003f24 <std>
 8003ffc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004000:	2201      	movs	r2, #1
 8004002:	2109      	movs	r1, #9
 8004004:	f7ff ff8e 	bl	8003f24 <std>
 8004008:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800400c:	2202      	movs	r2, #2
 800400e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004012:	2112      	movs	r1, #18
 8004014:	f7ff bf86 	b.w	8003f24 <std>
 8004018:	2000035c 	.word	0x2000035c
 800401c:	20000224 	.word	0x20000224
 8004020:	08003f91 	.word	0x08003f91

08004024 <__sfp_lock_acquire>:
 8004024:	4801      	ldr	r0, [pc, #4]	@ (800402c <__sfp_lock_acquire+0x8>)
 8004026:	f000 ba00 	b.w	800442a <__retarget_lock_acquire_recursive>
 800402a:	bf00      	nop
 800402c:	20000365 	.word	0x20000365

08004030 <__sfp_lock_release>:
 8004030:	4801      	ldr	r0, [pc, #4]	@ (8004038 <__sfp_lock_release+0x8>)
 8004032:	f000 b9fb 	b.w	800442c <__retarget_lock_release_recursive>
 8004036:	bf00      	nop
 8004038:	20000365 	.word	0x20000365

0800403c <__sinit>:
 800403c:	b510      	push	{r4, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	f7ff fff0 	bl	8004024 <__sfp_lock_acquire>
 8004044:	6a23      	ldr	r3, [r4, #32]
 8004046:	b11b      	cbz	r3, 8004050 <__sinit+0x14>
 8004048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800404c:	f7ff bff0 	b.w	8004030 <__sfp_lock_release>
 8004050:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <__sinit+0x28>)
 8004052:	6223      	str	r3, [r4, #32]
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <__sinit+0x2c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f5      	bne.n	8004048 <__sinit+0xc>
 800405c:	f7ff ffc4 	bl	8003fe8 <global_stdio_init.part.0>
 8004060:	e7f2      	b.n	8004048 <__sinit+0xc>
 8004062:	bf00      	nop
 8004064:	08003fa9 	.word	0x08003fa9
 8004068:	2000035c 	.word	0x2000035c

0800406c <_fwalk_sglue>:
 800406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004070:	4607      	mov	r7, r0
 8004072:	4688      	mov	r8, r1
 8004074:	4614      	mov	r4, r2
 8004076:	2600      	movs	r6, #0
 8004078:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800407c:	f1b9 0901 	subs.w	r9, r9, #1
 8004080:	d505      	bpl.n	800408e <_fwalk_sglue+0x22>
 8004082:	6824      	ldr	r4, [r4, #0]
 8004084:	2c00      	cmp	r4, #0
 8004086:	d1f7      	bne.n	8004078 <_fwalk_sglue+0xc>
 8004088:	4630      	mov	r0, r6
 800408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408e:	89ab      	ldrh	r3, [r5, #12]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d907      	bls.n	80040a4 <_fwalk_sglue+0x38>
 8004094:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004098:	3301      	adds	r3, #1
 800409a:	d003      	beq.n	80040a4 <_fwalk_sglue+0x38>
 800409c:	4629      	mov	r1, r5
 800409e:	4638      	mov	r0, r7
 80040a0:	47c0      	blx	r8
 80040a2:	4306      	orrs	r6, r0
 80040a4:	3568      	adds	r5, #104	@ 0x68
 80040a6:	e7e9      	b.n	800407c <_fwalk_sglue+0x10>

080040a8 <iprintf>:
 80040a8:	b40f      	push	{r0, r1, r2, r3}
 80040aa:	b507      	push	{r0, r1, r2, lr}
 80040ac:	4906      	ldr	r1, [pc, #24]	@ (80040c8 <iprintf+0x20>)
 80040ae:	ab04      	add	r3, sp, #16
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80040b6:	6881      	ldr	r1, [r0, #8]
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	f000 fadb 	bl	8004674 <_vfiprintf_r>
 80040be:	b003      	add	sp, #12
 80040c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040c4:	b004      	add	sp, #16
 80040c6:	4770      	bx	lr
 80040c8:	20000018 	.word	0x20000018

080040cc <_puts_r>:
 80040cc:	6a03      	ldr	r3, [r0, #32]
 80040ce:	b570      	push	{r4, r5, r6, lr}
 80040d0:	6884      	ldr	r4, [r0, #8]
 80040d2:	4605      	mov	r5, r0
 80040d4:	460e      	mov	r6, r1
 80040d6:	b90b      	cbnz	r3, 80040dc <_puts_r+0x10>
 80040d8:	f7ff ffb0 	bl	800403c <__sinit>
 80040dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040de:	07db      	lsls	r3, r3, #31
 80040e0:	d405      	bmi.n	80040ee <_puts_r+0x22>
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	0598      	lsls	r0, r3, #22
 80040e6:	d402      	bmi.n	80040ee <_puts_r+0x22>
 80040e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ea:	f000 f99e 	bl	800442a <__retarget_lock_acquire_recursive>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	0719      	lsls	r1, r3, #28
 80040f2:	d502      	bpl.n	80040fa <_puts_r+0x2e>
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d135      	bne.n	8004166 <_puts_r+0x9a>
 80040fa:	4621      	mov	r1, r4
 80040fc:	4628      	mov	r0, r5
 80040fe:	f000 f8c5 	bl	800428c <__swsetup_r>
 8004102:	b380      	cbz	r0, 8004166 <_puts_r+0x9a>
 8004104:	f04f 35ff 	mov.w	r5, #4294967295
 8004108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800410a:	07da      	lsls	r2, r3, #31
 800410c:	d405      	bmi.n	800411a <_puts_r+0x4e>
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	059b      	lsls	r3, r3, #22
 8004112:	d402      	bmi.n	800411a <_puts_r+0x4e>
 8004114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004116:	f000 f989 	bl	800442c <__retarget_lock_release_recursive>
 800411a:	4628      	mov	r0, r5
 800411c:	bd70      	pop	{r4, r5, r6, pc}
 800411e:	2b00      	cmp	r3, #0
 8004120:	da04      	bge.n	800412c <_puts_r+0x60>
 8004122:	69a2      	ldr	r2, [r4, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	dc17      	bgt.n	8004158 <_puts_r+0x8c>
 8004128:	290a      	cmp	r1, #10
 800412a:	d015      	beq.n	8004158 <_puts_r+0x8c>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	6022      	str	r2, [r4, #0]
 8004132:	7019      	strb	r1, [r3, #0]
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800413a:	3b01      	subs	r3, #1
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	2900      	cmp	r1, #0
 8004140:	d1ed      	bne.n	800411e <_puts_r+0x52>
 8004142:	2b00      	cmp	r3, #0
 8004144:	da11      	bge.n	800416a <_puts_r+0x9e>
 8004146:	4622      	mov	r2, r4
 8004148:	210a      	movs	r1, #10
 800414a:	4628      	mov	r0, r5
 800414c:	f000 f85f 	bl	800420e <__swbuf_r>
 8004150:	3001      	adds	r0, #1
 8004152:	d0d7      	beq.n	8004104 <_puts_r+0x38>
 8004154:	250a      	movs	r5, #10
 8004156:	e7d7      	b.n	8004108 <_puts_r+0x3c>
 8004158:	4622      	mov	r2, r4
 800415a:	4628      	mov	r0, r5
 800415c:	f000 f857 	bl	800420e <__swbuf_r>
 8004160:	3001      	adds	r0, #1
 8004162:	d1e7      	bne.n	8004134 <_puts_r+0x68>
 8004164:	e7ce      	b.n	8004104 <_puts_r+0x38>
 8004166:	3e01      	subs	r6, #1
 8004168:	e7e4      	b.n	8004134 <_puts_r+0x68>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	6022      	str	r2, [r4, #0]
 8004170:	220a      	movs	r2, #10
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e7ee      	b.n	8004154 <_puts_r+0x88>
	...

08004178 <puts>:
 8004178:	4b02      	ldr	r3, [pc, #8]	@ (8004184 <puts+0xc>)
 800417a:	4601      	mov	r1, r0
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	f7ff bfa5 	b.w	80040cc <_puts_r>
 8004182:	bf00      	nop
 8004184:	20000018 	.word	0x20000018

08004188 <__sread>:
 8004188:	b510      	push	{r4, lr}
 800418a:	460c      	mov	r4, r1
 800418c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004190:	f000 f8fc 	bl	800438c <_read_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	bfab      	itete	ge
 8004198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800419a:	89a3      	ldrhlt	r3, [r4, #12]
 800419c:	181b      	addge	r3, r3, r0
 800419e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041a2:	bfac      	ite	ge
 80041a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041a6:	81a3      	strhlt	r3, [r4, #12]
 80041a8:	bd10      	pop	{r4, pc}

080041aa <__swrite>:
 80041aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ae:	461f      	mov	r7, r3
 80041b0:	898b      	ldrh	r3, [r1, #12]
 80041b2:	05db      	lsls	r3, r3, #23
 80041b4:	4605      	mov	r5, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	4616      	mov	r6, r2
 80041ba:	d505      	bpl.n	80041c8 <__swrite+0x1e>
 80041bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c0:	2302      	movs	r3, #2
 80041c2:	2200      	movs	r2, #0
 80041c4:	f000 f8d0 	bl	8004368 <_lseek_r>
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	4632      	mov	r2, r6
 80041d6:	463b      	mov	r3, r7
 80041d8:	4628      	mov	r0, r5
 80041da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041de:	f000 b8e7 	b.w	80043b0 <_write_r>

080041e2 <__sseek>:
 80041e2:	b510      	push	{r4, lr}
 80041e4:	460c      	mov	r4, r1
 80041e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ea:	f000 f8bd 	bl	8004368 <_lseek_r>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	bf15      	itete	ne
 80041f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041fe:	81a3      	strheq	r3, [r4, #12]
 8004200:	bf18      	it	ne
 8004202:	81a3      	strhne	r3, [r4, #12]
 8004204:	bd10      	pop	{r4, pc}

08004206 <__sclose>:
 8004206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800420a:	f000 b89d 	b.w	8004348 <_close_r>

0800420e <__swbuf_r>:
 800420e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004210:	460e      	mov	r6, r1
 8004212:	4614      	mov	r4, r2
 8004214:	4605      	mov	r5, r0
 8004216:	b118      	cbz	r0, 8004220 <__swbuf_r+0x12>
 8004218:	6a03      	ldr	r3, [r0, #32]
 800421a:	b90b      	cbnz	r3, 8004220 <__swbuf_r+0x12>
 800421c:	f7ff ff0e 	bl	800403c <__sinit>
 8004220:	69a3      	ldr	r3, [r4, #24]
 8004222:	60a3      	str	r3, [r4, #8]
 8004224:	89a3      	ldrh	r3, [r4, #12]
 8004226:	071a      	lsls	r2, r3, #28
 8004228:	d501      	bpl.n	800422e <__swbuf_r+0x20>
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	b943      	cbnz	r3, 8004240 <__swbuf_r+0x32>
 800422e:	4621      	mov	r1, r4
 8004230:	4628      	mov	r0, r5
 8004232:	f000 f82b 	bl	800428c <__swsetup_r>
 8004236:	b118      	cbz	r0, 8004240 <__swbuf_r+0x32>
 8004238:	f04f 37ff 	mov.w	r7, #4294967295
 800423c:	4638      	mov	r0, r7
 800423e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	6922      	ldr	r2, [r4, #16]
 8004244:	1a98      	subs	r0, r3, r2
 8004246:	6963      	ldr	r3, [r4, #20]
 8004248:	b2f6      	uxtb	r6, r6
 800424a:	4283      	cmp	r3, r0
 800424c:	4637      	mov	r7, r6
 800424e:	dc05      	bgt.n	800425c <__swbuf_r+0x4e>
 8004250:	4621      	mov	r1, r4
 8004252:	4628      	mov	r0, r5
 8004254:	f000 fd36 	bl	8004cc4 <_fflush_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	d1ed      	bne.n	8004238 <__swbuf_r+0x2a>
 800425c:	68a3      	ldr	r3, [r4, #8]
 800425e:	3b01      	subs	r3, #1
 8004260:	60a3      	str	r3, [r4, #8]
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	701e      	strb	r6, [r3, #0]
 800426a:	6962      	ldr	r2, [r4, #20]
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	429a      	cmp	r2, r3
 8004270:	d004      	beq.n	800427c <__swbuf_r+0x6e>
 8004272:	89a3      	ldrh	r3, [r4, #12]
 8004274:	07db      	lsls	r3, r3, #31
 8004276:	d5e1      	bpl.n	800423c <__swbuf_r+0x2e>
 8004278:	2e0a      	cmp	r6, #10
 800427a:	d1df      	bne.n	800423c <__swbuf_r+0x2e>
 800427c:	4621      	mov	r1, r4
 800427e:	4628      	mov	r0, r5
 8004280:	f000 fd20 	bl	8004cc4 <_fflush_r>
 8004284:	2800      	cmp	r0, #0
 8004286:	d0d9      	beq.n	800423c <__swbuf_r+0x2e>
 8004288:	e7d6      	b.n	8004238 <__swbuf_r+0x2a>
	...

0800428c <__swsetup_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <__swsetup_r+0xa8>)
 8004290:	4605      	mov	r5, r0
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	460c      	mov	r4, r1
 8004296:	b118      	cbz	r0, 80042a0 <__swsetup_r+0x14>
 8004298:	6a03      	ldr	r3, [r0, #32]
 800429a:	b90b      	cbnz	r3, 80042a0 <__swsetup_r+0x14>
 800429c:	f7ff fece 	bl	800403c <__sinit>
 80042a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a4:	0719      	lsls	r1, r3, #28
 80042a6:	d422      	bmi.n	80042ee <__swsetup_r+0x62>
 80042a8:	06da      	lsls	r2, r3, #27
 80042aa:	d407      	bmi.n	80042bc <__swsetup_r+0x30>
 80042ac:	2209      	movs	r2, #9
 80042ae:	602a      	str	r2, [r5, #0]
 80042b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ba:	e033      	b.n	8004324 <__swsetup_r+0x98>
 80042bc:	0758      	lsls	r0, r3, #29
 80042be:	d512      	bpl.n	80042e6 <__swsetup_r+0x5a>
 80042c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042c2:	b141      	cbz	r1, 80042d6 <__swsetup_r+0x4a>
 80042c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d002      	beq.n	80042d2 <__swsetup_r+0x46>
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 f8af 	bl	8004430 <_free_r>
 80042d2:	2300      	movs	r3, #0
 80042d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	2300      	movs	r3, #0
 80042e0:	6063      	str	r3, [r4, #4]
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f043 0308 	orr.w	r3, r3, #8
 80042ec:	81a3      	strh	r3, [r4, #12]
 80042ee:	6923      	ldr	r3, [r4, #16]
 80042f0:	b94b      	cbnz	r3, 8004306 <__swsetup_r+0x7a>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fc:	d003      	beq.n	8004306 <__swsetup_r+0x7a>
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 fd2d 	bl	8004d60 <__smakebuf_r>
 8004306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800430a:	f013 0201 	ands.w	r2, r3, #1
 800430e:	d00a      	beq.n	8004326 <__swsetup_r+0x9a>
 8004310:	2200      	movs	r2, #0
 8004312:	60a2      	str	r2, [r4, #8]
 8004314:	6962      	ldr	r2, [r4, #20]
 8004316:	4252      	negs	r2, r2
 8004318:	61a2      	str	r2, [r4, #24]
 800431a:	6922      	ldr	r2, [r4, #16]
 800431c:	b942      	cbnz	r2, 8004330 <__swsetup_r+0xa4>
 800431e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004322:	d1c5      	bne.n	80042b0 <__swsetup_r+0x24>
 8004324:	bd38      	pop	{r3, r4, r5, pc}
 8004326:	0799      	lsls	r1, r3, #30
 8004328:	bf58      	it	pl
 800432a:	6962      	ldrpl	r2, [r4, #20]
 800432c:	60a2      	str	r2, [r4, #8]
 800432e:	e7f4      	b.n	800431a <__swsetup_r+0x8e>
 8004330:	2000      	movs	r0, #0
 8004332:	e7f7      	b.n	8004324 <__swsetup_r+0x98>
 8004334:	20000018 	.word	0x20000018

08004338 <memset>:
 8004338:	4402      	add	r2, r0
 800433a:	4603      	mov	r3, r0
 800433c:	4293      	cmp	r3, r2
 800433e:	d100      	bne.n	8004342 <memset+0xa>
 8004340:	4770      	bx	lr
 8004342:	f803 1b01 	strb.w	r1, [r3], #1
 8004346:	e7f9      	b.n	800433c <memset+0x4>

08004348 <_close_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	4d06      	ldr	r5, [pc, #24]	@ (8004364 <_close_r+0x1c>)
 800434c:	2300      	movs	r3, #0
 800434e:	4604      	mov	r4, r0
 8004350:	4608      	mov	r0, r1
 8004352:	602b      	str	r3, [r5, #0]
 8004354:	f7fc fccf 	bl	8000cf6 <_close>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_close_r+0x1a>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_close_r+0x1a>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	20000360 	.word	0x20000360

08004368 <_lseek_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4d07      	ldr	r5, [pc, #28]	@ (8004388 <_lseek_r+0x20>)
 800436c:	4604      	mov	r4, r0
 800436e:	4608      	mov	r0, r1
 8004370:	4611      	mov	r1, r2
 8004372:	2200      	movs	r2, #0
 8004374:	602a      	str	r2, [r5, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f7fc fce4 	bl	8000d44 <_lseek>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_lseek_r+0x1e>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_lseek_r+0x1e>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	20000360 	.word	0x20000360

0800438c <_read_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d07      	ldr	r5, [pc, #28]	@ (80043ac <_read_r+0x20>)
 8004390:	4604      	mov	r4, r0
 8004392:	4608      	mov	r0, r1
 8004394:	4611      	mov	r1, r2
 8004396:	2200      	movs	r2, #0
 8004398:	602a      	str	r2, [r5, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	f7fc fc72 	bl	8000c84 <_read>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_read_r+0x1e>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_read_r+0x1e>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	20000360 	.word	0x20000360

080043b0 <_write_r>:
 80043b0:	b538      	push	{r3, r4, r5, lr}
 80043b2:	4d07      	ldr	r5, [pc, #28]	@ (80043d0 <_write_r+0x20>)
 80043b4:	4604      	mov	r4, r0
 80043b6:	4608      	mov	r0, r1
 80043b8:	4611      	mov	r1, r2
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	f7fc fc7d 	bl	8000cbe <_write>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d102      	bne.n	80043ce <_write_r+0x1e>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	b103      	cbz	r3, 80043ce <_write_r+0x1e>
 80043cc:	6023      	str	r3, [r4, #0]
 80043ce:	bd38      	pop	{r3, r4, r5, pc}
 80043d0:	20000360 	.word	0x20000360

080043d4 <__errno>:
 80043d4:	4b01      	ldr	r3, [pc, #4]	@ (80043dc <__errno+0x8>)
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000018 	.word	0x20000018

080043e0 <__libc_init_array>:
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004418 <__libc_init_array+0x38>)
 80043e4:	4c0d      	ldr	r4, [pc, #52]	@ (800441c <__libc_init_array+0x3c>)
 80043e6:	1b64      	subs	r4, r4, r5
 80043e8:	10a4      	asrs	r4, r4, #2
 80043ea:	2600      	movs	r6, #0
 80043ec:	42a6      	cmp	r6, r4
 80043ee:	d109      	bne.n	8004404 <__libc_init_array+0x24>
 80043f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004420 <__libc_init_array+0x40>)
 80043f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004424 <__libc_init_array+0x44>)
 80043f4:	f000 fd22 	bl	8004e3c <_init>
 80043f8:	1b64      	subs	r4, r4, r5
 80043fa:	10a4      	asrs	r4, r4, #2
 80043fc:	2600      	movs	r6, #0
 80043fe:	42a6      	cmp	r6, r4
 8004400:	d105      	bne.n	800440e <__libc_init_array+0x2e>
 8004402:	bd70      	pop	{r4, r5, r6, pc}
 8004404:	f855 3b04 	ldr.w	r3, [r5], #4
 8004408:	4798      	blx	r3
 800440a:	3601      	adds	r6, #1
 800440c:	e7ee      	b.n	80043ec <__libc_init_array+0xc>
 800440e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004412:	4798      	blx	r3
 8004414:	3601      	adds	r6, #1
 8004416:	e7f2      	b.n	80043fe <__libc_init_array+0x1e>
 8004418:	08004f20 	.word	0x08004f20
 800441c:	08004f20 	.word	0x08004f20
 8004420:	08004f20 	.word	0x08004f20
 8004424:	08004f24 	.word	0x08004f24

08004428 <__retarget_lock_init_recursive>:
 8004428:	4770      	bx	lr

0800442a <__retarget_lock_acquire_recursive>:
 800442a:	4770      	bx	lr

0800442c <__retarget_lock_release_recursive>:
 800442c:	4770      	bx	lr
	...

08004430 <_free_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4605      	mov	r5, r0
 8004434:	2900      	cmp	r1, #0
 8004436:	d041      	beq.n	80044bc <_free_r+0x8c>
 8004438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800443c:	1f0c      	subs	r4, r1, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	bfb8      	it	lt
 8004442:	18e4      	addlt	r4, r4, r3
 8004444:	f000 f8e0 	bl	8004608 <__malloc_lock>
 8004448:	4a1d      	ldr	r2, [pc, #116]	@ (80044c0 <_free_r+0x90>)
 800444a:	6813      	ldr	r3, [r2, #0]
 800444c:	b933      	cbnz	r3, 800445c <_free_r+0x2c>
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	6014      	str	r4, [r2, #0]
 8004452:	4628      	mov	r0, r5
 8004454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004458:	f000 b8dc 	b.w	8004614 <__malloc_unlock>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d908      	bls.n	8004472 <_free_r+0x42>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	1821      	adds	r1, r4, r0
 8004464:	428b      	cmp	r3, r1
 8004466:	bf01      	itttt	eq
 8004468:	6819      	ldreq	r1, [r3, #0]
 800446a:	685b      	ldreq	r3, [r3, #4]
 800446c:	1809      	addeq	r1, r1, r0
 800446e:	6021      	streq	r1, [r4, #0]
 8004470:	e7ed      	b.n	800444e <_free_r+0x1e>
 8004472:	461a      	mov	r2, r3
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	b10b      	cbz	r3, 800447c <_free_r+0x4c>
 8004478:	42a3      	cmp	r3, r4
 800447a:	d9fa      	bls.n	8004472 <_free_r+0x42>
 800447c:	6811      	ldr	r1, [r2, #0]
 800447e:	1850      	adds	r0, r2, r1
 8004480:	42a0      	cmp	r0, r4
 8004482:	d10b      	bne.n	800449c <_free_r+0x6c>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	4401      	add	r1, r0
 8004488:	1850      	adds	r0, r2, r1
 800448a:	4283      	cmp	r3, r0
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	d1e0      	bne.n	8004452 <_free_r+0x22>
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	6053      	str	r3, [r2, #4]
 8004496:	4408      	add	r0, r1
 8004498:	6010      	str	r0, [r2, #0]
 800449a:	e7da      	b.n	8004452 <_free_r+0x22>
 800449c:	d902      	bls.n	80044a4 <_free_r+0x74>
 800449e:	230c      	movs	r3, #12
 80044a0:	602b      	str	r3, [r5, #0]
 80044a2:	e7d6      	b.n	8004452 <_free_r+0x22>
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	1821      	adds	r1, r4, r0
 80044a8:	428b      	cmp	r3, r1
 80044aa:	bf04      	itt	eq
 80044ac:	6819      	ldreq	r1, [r3, #0]
 80044ae:	685b      	ldreq	r3, [r3, #4]
 80044b0:	6063      	str	r3, [r4, #4]
 80044b2:	bf04      	itt	eq
 80044b4:	1809      	addeq	r1, r1, r0
 80044b6:	6021      	streq	r1, [r4, #0]
 80044b8:	6054      	str	r4, [r2, #4]
 80044ba:	e7ca      	b.n	8004452 <_free_r+0x22>
 80044bc:	bd38      	pop	{r3, r4, r5, pc}
 80044be:	bf00      	nop
 80044c0:	2000036c 	.word	0x2000036c

080044c4 <sbrk_aligned>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004504 <sbrk_aligned+0x40>)
 80044c8:	460c      	mov	r4, r1
 80044ca:	6831      	ldr	r1, [r6, #0]
 80044cc:	4605      	mov	r5, r0
 80044ce:	b911      	cbnz	r1, 80044d6 <sbrk_aligned+0x12>
 80044d0:	f000 fca4 	bl	8004e1c <_sbrk_r>
 80044d4:	6030      	str	r0, [r6, #0]
 80044d6:	4621      	mov	r1, r4
 80044d8:	4628      	mov	r0, r5
 80044da:	f000 fc9f 	bl	8004e1c <_sbrk_r>
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	d103      	bne.n	80044ea <sbrk_aligned+0x26>
 80044e2:	f04f 34ff 	mov.w	r4, #4294967295
 80044e6:	4620      	mov	r0, r4
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d0f8      	beq.n	80044e6 <sbrk_aligned+0x22>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fc90 	bl	8004e1c <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d1f2      	bne.n	80044e6 <sbrk_aligned+0x22>
 8004500:	e7ef      	b.n	80044e2 <sbrk_aligned+0x1e>
 8004502:	bf00      	nop
 8004504:	20000368 	.word	0x20000368

08004508 <_malloc_r>:
 8004508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800450c:	1ccd      	adds	r5, r1, #3
 800450e:	f025 0503 	bic.w	r5, r5, #3
 8004512:	3508      	adds	r5, #8
 8004514:	2d0c      	cmp	r5, #12
 8004516:	bf38      	it	cc
 8004518:	250c      	movcc	r5, #12
 800451a:	2d00      	cmp	r5, #0
 800451c:	4606      	mov	r6, r0
 800451e:	db01      	blt.n	8004524 <_malloc_r+0x1c>
 8004520:	42a9      	cmp	r1, r5
 8004522:	d904      	bls.n	800452e <_malloc_r+0x26>
 8004524:	230c      	movs	r3, #12
 8004526:	6033      	str	r3, [r6, #0]
 8004528:	2000      	movs	r0, #0
 800452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800452e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004604 <_malloc_r+0xfc>
 8004532:	f000 f869 	bl	8004608 <__malloc_lock>
 8004536:	f8d8 3000 	ldr.w	r3, [r8]
 800453a:	461c      	mov	r4, r3
 800453c:	bb44      	cbnz	r4, 8004590 <_malloc_r+0x88>
 800453e:	4629      	mov	r1, r5
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ffbf 	bl	80044c4 <sbrk_aligned>
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	4604      	mov	r4, r0
 800454a:	d158      	bne.n	80045fe <_malloc_r+0xf6>
 800454c:	f8d8 4000 	ldr.w	r4, [r8]
 8004550:	4627      	mov	r7, r4
 8004552:	2f00      	cmp	r7, #0
 8004554:	d143      	bne.n	80045de <_malloc_r+0xd6>
 8004556:	2c00      	cmp	r4, #0
 8004558:	d04b      	beq.n	80045f2 <_malloc_r+0xea>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	4639      	mov	r1, r7
 800455e:	4630      	mov	r0, r6
 8004560:	eb04 0903 	add.w	r9, r4, r3
 8004564:	f000 fc5a 	bl	8004e1c <_sbrk_r>
 8004568:	4581      	cmp	r9, r0
 800456a:	d142      	bne.n	80045f2 <_malloc_r+0xea>
 800456c:	6821      	ldr	r1, [r4, #0]
 800456e:	1a6d      	subs	r5, r5, r1
 8004570:	4629      	mov	r1, r5
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff ffa6 	bl	80044c4 <sbrk_aligned>
 8004578:	3001      	adds	r0, #1
 800457a:	d03a      	beq.n	80045f2 <_malloc_r+0xea>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	442b      	add	r3, r5
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	f8d8 3000 	ldr.w	r3, [r8]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	bb62      	cbnz	r2, 80045e4 <_malloc_r+0xdc>
 800458a:	f8c8 7000 	str.w	r7, [r8]
 800458e:	e00f      	b.n	80045b0 <_malloc_r+0xa8>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	1b52      	subs	r2, r2, r5
 8004594:	d420      	bmi.n	80045d8 <_malloc_r+0xd0>
 8004596:	2a0b      	cmp	r2, #11
 8004598:	d917      	bls.n	80045ca <_malloc_r+0xc2>
 800459a:	1961      	adds	r1, r4, r5
 800459c:	42a3      	cmp	r3, r4
 800459e:	6025      	str	r5, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	6059      	strne	r1, [r3, #4]
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	bf08      	it	eq
 80045a8:	f8c8 1000 	streq.w	r1, [r8]
 80045ac:	5162      	str	r2, [r4, r5]
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f82f 	bl	8004614 <__malloc_unlock>
 80045b6:	f104 000b 	add.w	r0, r4, #11
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	f020 0007 	bic.w	r0, r0, #7
 80045c0:	1ac2      	subs	r2, r0, r3
 80045c2:	bf1c      	itt	ne
 80045c4:	1a1b      	subne	r3, r3, r0
 80045c6:	50a3      	strne	r3, [r4, r2]
 80045c8:	e7af      	b.n	800452a <_malloc_r+0x22>
 80045ca:	6862      	ldr	r2, [r4, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	bf0c      	ite	eq
 80045d0:	f8c8 2000 	streq.w	r2, [r8]
 80045d4:	605a      	strne	r2, [r3, #4]
 80045d6:	e7eb      	b.n	80045b0 <_malloc_r+0xa8>
 80045d8:	4623      	mov	r3, r4
 80045da:	6864      	ldr	r4, [r4, #4]
 80045dc:	e7ae      	b.n	800453c <_malloc_r+0x34>
 80045de:	463c      	mov	r4, r7
 80045e0:	687f      	ldr	r7, [r7, #4]
 80045e2:	e7b6      	b.n	8004552 <_malloc_r+0x4a>
 80045e4:	461a      	mov	r2, r3
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d1fb      	bne.n	80045e4 <_malloc_r+0xdc>
 80045ec:	2300      	movs	r3, #0
 80045ee:	6053      	str	r3, [r2, #4]
 80045f0:	e7de      	b.n	80045b0 <_malloc_r+0xa8>
 80045f2:	230c      	movs	r3, #12
 80045f4:	6033      	str	r3, [r6, #0]
 80045f6:	4630      	mov	r0, r6
 80045f8:	f000 f80c 	bl	8004614 <__malloc_unlock>
 80045fc:	e794      	b.n	8004528 <_malloc_r+0x20>
 80045fe:	6005      	str	r5, [r0, #0]
 8004600:	e7d6      	b.n	80045b0 <_malloc_r+0xa8>
 8004602:	bf00      	nop
 8004604:	2000036c 	.word	0x2000036c

08004608 <__malloc_lock>:
 8004608:	4801      	ldr	r0, [pc, #4]	@ (8004610 <__malloc_lock+0x8>)
 800460a:	f7ff bf0e 	b.w	800442a <__retarget_lock_acquire_recursive>
 800460e:	bf00      	nop
 8004610:	20000364 	.word	0x20000364

08004614 <__malloc_unlock>:
 8004614:	4801      	ldr	r0, [pc, #4]	@ (800461c <__malloc_unlock+0x8>)
 8004616:	f7ff bf09 	b.w	800442c <__retarget_lock_release_recursive>
 800461a:	bf00      	nop
 800461c:	20000364 	.word	0x20000364

08004620 <__sfputc_r>:
 8004620:	6893      	ldr	r3, [r2, #8]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	b410      	push	{r4}
 8004628:	6093      	str	r3, [r2, #8]
 800462a:	da08      	bge.n	800463e <__sfputc_r+0x1e>
 800462c:	6994      	ldr	r4, [r2, #24]
 800462e:	42a3      	cmp	r3, r4
 8004630:	db01      	blt.n	8004636 <__sfputc_r+0x16>
 8004632:	290a      	cmp	r1, #10
 8004634:	d103      	bne.n	800463e <__sfputc_r+0x1e>
 8004636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800463a:	f7ff bde8 	b.w	800420e <__swbuf_r>
 800463e:	6813      	ldr	r3, [r2, #0]
 8004640:	1c58      	adds	r0, r3, #1
 8004642:	6010      	str	r0, [r2, #0]
 8004644:	7019      	strb	r1, [r3, #0]
 8004646:	4608      	mov	r0, r1
 8004648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800464c:	4770      	bx	lr

0800464e <__sfputs_r>:
 800464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004650:	4606      	mov	r6, r0
 8004652:	460f      	mov	r7, r1
 8004654:	4614      	mov	r4, r2
 8004656:	18d5      	adds	r5, r2, r3
 8004658:	42ac      	cmp	r4, r5
 800465a:	d101      	bne.n	8004660 <__sfputs_r+0x12>
 800465c:	2000      	movs	r0, #0
 800465e:	e007      	b.n	8004670 <__sfputs_r+0x22>
 8004660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004664:	463a      	mov	r2, r7
 8004666:	4630      	mov	r0, r6
 8004668:	f7ff ffda 	bl	8004620 <__sfputc_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d1f3      	bne.n	8004658 <__sfputs_r+0xa>
 8004670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004674 <_vfiprintf_r>:
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	460d      	mov	r5, r1
 800467a:	b09d      	sub	sp, #116	@ 0x74
 800467c:	4614      	mov	r4, r2
 800467e:	4698      	mov	r8, r3
 8004680:	4606      	mov	r6, r0
 8004682:	b118      	cbz	r0, 800468c <_vfiprintf_r+0x18>
 8004684:	6a03      	ldr	r3, [r0, #32]
 8004686:	b90b      	cbnz	r3, 800468c <_vfiprintf_r+0x18>
 8004688:	f7ff fcd8 	bl	800403c <__sinit>
 800468c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800468e:	07d9      	lsls	r1, r3, #31
 8004690:	d405      	bmi.n	800469e <_vfiprintf_r+0x2a>
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	059a      	lsls	r2, r3, #22
 8004696:	d402      	bmi.n	800469e <_vfiprintf_r+0x2a>
 8004698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800469a:	f7ff fec6 	bl	800442a <__retarget_lock_acquire_recursive>
 800469e:	89ab      	ldrh	r3, [r5, #12]
 80046a0:	071b      	lsls	r3, r3, #28
 80046a2:	d501      	bpl.n	80046a8 <_vfiprintf_r+0x34>
 80046a4:	692b      	ldr	r3, [r5, #16]
 80046a6:	b99b      	cbnz	r3, 80046d0 <_vfiprintf_r+0x5c>
 80046a8:	4629      	mov	r1, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7ff fdee 	bl	800428c <__swsetup_r>
 80046b0:	b170      	cbz	r0, 80046d0 <_vfiprintf_r+0x5c>
 80046b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046b4:	07dc      	lsls	r4, r3, #31
 80046b6:	d504      	bpl.n	80046c2 <_vfiprintf_r+0x4e>
 80046b8:	f04f 30ff 	mov.w	r0, #4294967295
 80046bc:	b01d      	add	sp, #116	@ 0x74
 80046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c2:	89ab      	ldrh	r3, [r5, #12]
 80046c4:	0598      	lsls	r0, r3, #22
 80046c6:	d4f7      	bmi.n	80046b8 <_vfiprintf_r+0x44>
 80046c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ca:	f7ff feaf 	bl	800442c <__retarget_lock_release_recursive>
 80046ce:	e7f3      	b.n	80046b8 <_vfiprintf_r+0x44>
 80046d0:	2300      	movs	r3, #0
 80046d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80046d4:	2320      	movs	r3, #32
 80046d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046da:	f8cd 800c 	str.w	r8, [sp, #12]
 80046de:	2330      	movs	r3, #48	@ 0x30
 80046e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004890 <_vfiprintf_r+0x21c>
 80046e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046e8:	f04f 0901 	mov.w	r9, #1
 80046ec:	4623      	mov	r3, r4
 80046ee:	469a      	mov	sl, r3
 80046f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046f4:	b10a      	cbz	r2, 80046fa <_vfiprintf_r+0x86>
 80046f6:	2a25      	cmp	r2, #37	@ 0x25
 80046f8:	d1f9      	bne.n	80046ee <_vfiprintf_r+0x7a>
 80046fa:	ebba 0b04 	subs.w	fp, sl, r4
 80046fe:	d00b      	beq.n	8004718 <_vfiprintf_r+0xa4>
 8004700:	465b      	mov	r3, fp
 8004702:	4622      	mov	r2, r4
 8004704:	4629      	mov	r1, r5
 8004706:	4630      	mov	r0, r6
 8004708:	f7ff ffa1 	bl	800464e <__sfputs_r>
 800470c:	3001      	adds	r0, #1
 800470e:	f000 80a7 	beq.w	8004860 <_vfiprintf_r+0x1ec>
 8004712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004714:	445a      	add	r2, fp
 8004716:	9209      	str	r2, [sp, #36]	@ 0x24
 8004718:	f89a 3000 	ldrb.w	r3, [sl]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 809f 	beq.w	8004860 <_vfiprintf_r+0x1ec>
 8004722:	2300      	movs	r3, #0
 8004724:	f04f 32ff 	mov.w	r2, #4294967295
 8004728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800472c:	f10a 0a01 	add.w	sl, sl, #1
 8004730:	9304      	str	r3, [sp, #16]
 8004732:	9307      	str	r3, [sp, #28]
 8004734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004738:	931a      	str	r3, [sp, #104]	@ 0x68
 800473a:	4654      	mov	r4, sl
 800473c:	2205      	movs	r2, #5
 800473e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004742:	4853      	ldr	r0, [pc, #332]	@ (8004890 <_vfiprintf_r+0x21c>)
 8004744:	f7fb fd6c 	bl	8000220 <memchr>
 8004748:	9a04      	ldr	r2, [sp, #16]
 800474a:	b9d8      	cbnz	r0, 8004784 <_vfiprintf_r+0x110>
 800474c:	06d1      	lsls	r1, r2, #27
 800474e:	bf44      	itt	mi
 8004750:	2320      	movmi	r3, #32
 8004752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004756:	0713      	lsls	r3, r2, #28
 8004758:	bf44      	itt	mi
 800475a:	232b      	movmi	r3, #43	@ 0x2b
 800475c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004760:	f89a 3000 	ldrb.w	r3, [sl]
 8004764:	2b2a      	cmp	r3, #42	@ 0x2a
 8004766:	d015      	beq.n	8004794 <_vfiprintf_r+0x120>
 8004768:	9a07      	ldr	r2, [sp, #28]
 800476a:	4654      	mov	r4, sl
 800476c:	2000      	movs	r0, #0
 800476e:	f04f 0c0a 	mov.w	ip, #10
 8004772:	4621      	mov	r1, r4
 8004774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004778:	3b30      	subs	r3, #48	@ 0x30
 800477a:	2b09      	cmp	r3, #9
 800477c:	d94b      	bls.n	8004816 <_vfiprintf_r+0x1a2>
 800477e:	b1b0      	cbz	r0, 80047ae <_vfiprintf_r+0x13a>
 8004780:	9207      	str	r2, [sp, #28]
 8004782:	e014      	b.n	80047ae <_vfiprintf_r+0x13a>
 8004784:	eba0 0308 	sub.w	r3, r0, r8
 8004788:	fa09 f303 	lsl.w	r3, r9, r3
 800478c:	4313      	orrs	r3, r2
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	46a2      	mov	sl, r4
 8004792:	e7d2      	b.n	800473a <_vfiprintf_r+0xc6>
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	1d19      	adds	r1, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	9103      	str	r1, [sp, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	bfbb      	ittet	lt
 80047a0:	425b      	neglt	r3, r3
 80047a2:	f042 0202 	orrlt.w	r2, r2, #2
 80047a6:	9307      	strge	r3, [sp, #28]
 80047a8:	9307      	strlt	r3, [sp, #28]
 80047aa:	bfb8      	it	lt
 80047ac:	9204      	strlt	r2, [sp, #16]
 80047ae:	7823      	ldrb	r3, [r4, #0]
 80047b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80047b2:	d10a      	bne.n	80047ca <_vfiprintf_r+0x156>
 80047b4:	7863      	ldrb	r3, [r4, #1]
 80047b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047b8:	d132      	bne.n	8004820 <_vfiprintf_r+0x1ac>
 80047ba:	9b03      	ldr	r3, [sp, #12]
 80047bc:	1d1a      	adds	r2, r3, #4
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	9203      	str	r2, [sp, #12]
 80047c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047c6:	3402      	adds	r4, #2
 80047c8:	9305      	str	r3, [sp, #20]
 80047ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048a0 <_vfiprintf_r+0x22c>
 80047ce:	7821      	ldrb	r1, [r4, #0]
 80047d0:	2203      	movs	r2, #3
 80047d2:	4650      	mov	r0, sl
 80047d4:	f7fb fd24 	bl	8000220 <memchr>
 80047d8:	b138      	cbz	r0, 80047ea <_vfiprintf_r+0x176>
 80047da:	9b04      	ldr	r3, [sp, #16]
 80047dc:	eba0 000a 	sub.w	r0, r0, sl
 80047e0:	2240      	movs	r2, #64	@ 0x40
 80047e2:	4082      	lsls	r2, r0
 80047e4:	4313      	orrs	r3, r2
 80047e6:	3401      	adds	r4, #1
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ee:	4829      	ldr	r0, [pc, #164]	@ (8004894 <_vfiprintf_r+0x220>)
 80047f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047f4:	2206      	movs	r2, #6
 80047f6:	f7fb fd13 	bl	8000220 <memchr>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	d03f      	beq.n	800487e <_vfiprintf_r+0x20a>
 80047fe:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <_vfiprintf_r+0x224>)
 8004800:	bb1b      	cbnz	r3, 800484a <_vfiprintf_r+0x1d6>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	3307      	adds	r3, #7
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	3308      	adds	r3, #8
 800480c:	9303      	str	r3, [sp, #12]
 800480e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004810:	443b      	add	r3, r7
 8004812:	9309      	str	r3, [sp, #36]	@ 0x24
 8004814:	e76a      	b.n	80046ec <_vfiprintf_r+0x78>
 8004816:	fb0c 3202 	mla	r2, ip, r2, r3
 800481a:	460c      	mov	r4, r1
 800481c:	2001      	movs	r0, #1
 800481e:	e7a8      	b.n	8004772 <_vfiprintf_r+0xfe>
 8004820:	2300      	movs	r3, #0
 8004822:	3401      	adds	r4, #1
 8004824:	9305      	str	r3, [sp, #20]
 8004826:	4619      	mov	r1, r3
 8004828:	f04f 0c0a 	mov.w	ip, #10
 800482c:	4620      	mov	r0, r4
 800482e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004832:	3a30      	subs	r2, #48	@ 0x30
 8004834:	2a09      	cmp	r2, #9
 8004836:	d903      	bls.n	8004840 <_vfiprintf_r+0x1cc>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0c6      	beq.n	80047ca <_vfiprintf_r+0x156>
 800483c:	9105      	str	r1, [sp, #20]
 800483e:	e7c4      	b.n	80047ca <_vfiprintf_r+0x156>
 8004840:	fb0c 2101 	mla	r1, ip, r1, r2
 8004844:	4604      	mov	r4, r0
 8004846:	2301      	movs	r3, #1
 8004848:	e7f0      	b.n	800482c <_vfiprintf_r+0x1b8>
 800484a:	ab03      	add	r3, sp, #12
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	462a      	mov	r2, r5
 8004850:	4b12      	ldr	r3, [pc, #72]	@ (800489c <_vfiprintf_r+0x228>)
 8004852:	a904      	add	r1, sp, #16
 8004854:	4630      	mov	r0, r6
 8004856:	f3af 8000 	nop.w
 800485a:	4607      	mov	r7, r0
 800485c:	1c78      	adds	r0, r7, #1
 800485e:	d1d6      	bne.n	800480e <_vfiprintf_r+0x19a>
 8004860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004862:	07d9      	lsls	r1, r3, #31
 8004864:	d405      	bmi.n	8004872 <_vfiprintf_r+0x1fe>
 8004866:	89ab      	ldrh	r3, [r5, #12]
 8004868:	059a      	lsls	r2, r3, #22
 800486a:	d402      	bmi.n	8004872 <_vfiprintf_r+0x1fe>
 800486c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800486e:	f7ff fddd 	bl	800442c <__retarget_lock_release_recursive>
 8004872:	89ab      	ldrh	r3, [r5, #12]
 8004874:	065b      	lsls	r3, r3, #25
 8004876:	f53f af1f 	bmi.w	80046b8 <_vfiprintf_r+0x44>
 800487a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800487c:	e71e      	b.n	80046bc <_vfiprintf_r+0x48>
 800487e:	ab03      	add	r3, sp, #12
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	462a      	mov	r2, r5
 8004884:	4b05      	ldr	r3, [pc, #20]	@ (800489c <_vfiprintf_r+0x228>)
 8004886:	a904      	add	r1, sp, #16
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f879 	bl	8004980 <_printf_i>
 800488e:	e7e4      	b.n	800485a <_vfiprintf_r+0x1e6>
 8004890:	08004ee4 	.word	0x08004ee4
 8004894:	08004eee 	.word	0x08004eee
 8004898:	00000000 	.word	0x00000000
 800489c:	0800464f 	.word	0x0800464f
 80048a0:	08004eea 	.word	0x08004eea

080048a4 <_printf_common>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	4616      	mov	r6, r2
 80048aa:	4698      	mov	r8, r3
 80048ac:	688a      	ldr	r2, [r1, #8]
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	bfb8      	it	lt
 80048b8:	4613      	movlt	r3, r2
 80048ba:	6033      	str	r3, [r6, #0]
 80048bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048c0:	4607      	mov	r7, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	b10a      	cbz	r2, 80048ca <_printf_common+0x26>
 80048c6:	3301      	adds	r3, #1
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	0699      	lsls	r1, r3, #26
 80048ce:	bf42      	ittt	mi
 80048d0:	6833      	ldrmi	r3, [r6, #0]
 80048d2:	3302      	addmi	r3, #2
 80048d4:	6033      	strmi	r3, [r6, #0]
 80048d6:	6825      	ldr	r5, [r4, #0]
 80048d8:	f015 0506 	ands.w	r5, r5, #6
 80048dc:	d106      	bne.n	80048ec <_printf_common+0x48>
 80048de:	f104 0a19 	add.w	sl, r4, #25
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	6832      	ldr	r2, [r6, #0]
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	42ab      	cmp	r3, r5
 80048ea:	dc26      	bgt.n	800493a <_printf_common+0x96>
 80048ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	3b00      	subs	r3, #0
 80048f4:	bf18      	it	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	0692      	lsls	r2, r2, #26
 80048fa:	d42b      	bmi.n	8004954 <_printf_common+0xb0>
 80048fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004900:	4641      	mov	r1, r8
 8004902:	4638      	mov	r0, r7
 8004904:	47c8      	blx	r9
 8004906:	3001      	adds	r0, #1
 8004908:	d01e      	beq.n	8004948 <_printf_common+0xa4>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	6922      	ldr	r2, [r4, #16]
 800490e:	f003 0306 	and.w	r3, r3, #6
 8004912:	2b04      	cmp	r3, #4
 8004914:	bf02      	ittt	eq
 8004916:	68e5      	ldreq	r5, [r4, #12]
 8004918:	6833      	ldreq	r3, [r6, #0]
 800491a:	1aed      	subeq	r5, r5, r3
 800491c:	68a3      	ldr	r3, [r4, #8]
 800491e:	bf0c      	ite	eq
 8004920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004924:	2500      	movne	r5, #0
 8004926:	4293      	cmp	r3, r2
 8004928:	bfc4      	itt	gt
 800492a:	1a9b      	subgt	r3, r3, r2
 800492c:	18ed      	addgt	r5, r5, r3
 800492e:	2600      	movs	r6, #0
 8004930:	341a      	adds	r4, #26
 8004932:	42b5      	cmp	r5, r6
 8004934:	d11a      	bne.n	800496c <_printf_common+0xc8>
 8004936:	2000      	movs	r0, #0
 8004938:	e008      	b.n	800494c <_printf_common+0xa8>
 800493a:	2301      	movs	r3, #1
 800493c:	4652      	mov	r2, sl
 800493e:	4641      	mov	r1, r8
 8004940:	4638      	mov	r0, r7
 8004942:	47c8      	blx	r9
 8004944:	3001      	adds	r0, #1
 8004946:	d103      	bne.n	8004950 <_printf_common+0xac>
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004950:	3501      	adds	r5, #1
 8004952:	e7c6      	b.n	80048e2 <_printf_common+0x3e>
 8004954:	18e1      	adds	r1, r4, r3
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	2030      	movs	r0, #48	@ 0x30
 800495a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800495e:	4422      	add	r2, r4
 8004960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004968:	3302      	adds	r3, #2
 800496a:	e7c7      	b.n	80048fc <_printf_common+0x58>
 800496c:	2301      	movs	r3, #1
 800496e:	4622      	mov	r2, r4
 8004970:	4641      	mov	r1, r8
 8004972:	4638      	mov	r0, r7
 8004974:	47c8      	blx	r9
 8004976:	3001      	adds	r0, #1
 8004978:	d0e6      	beq.n	8004948 <_printf_common+0xa4>
 800497a:	3601      	adds	r6, #1
 800497c:	e7d9      	b.n	8004932 <_printf_common+0x8e>
	...

08004980 <_printf_i>:
 8004980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	7e0f      	ldrb	r7, [r1, #24]
 8004986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004988:	2f78      	cmp	r7, #120	@ 0x78
 800498a:	4691      	mov	r9, r2
 800498c:	4680      	mov	r8, r0
 800498e:	460c      	mov	r4, r1
 8004990:	469a      	mov	sl, r3
 8004992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004996:	d807      	bhi.n	80049a8 <_printf_i+0x28>
 8004998:	2f62      	cmp	r7, #98	@ 0x62
 800499a:	d80a      	bhi.n	80049b2 <_printf_i+0x32>
 800499c:	2f00      	cmp	r7, #0
 800499e:	f000 80d1 	beq.w	8004b44 <_printf_i+0x1c4>
 80049a2:	2f58      	cmp	r7, #88	@ 0x58
 80049a4:	f000 80b8 	beq.w	8004b18 <_printf_i+0x198>
 80049a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049b0:	e03a      	b.n	8004a28 <_printf_i+0xa8>
 80049b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049b6:	2b15      	cmp	r3, #21
 80049b8:	d8f6      	bhi.n	80049a8 <_printf_i+0x28>
 80049ba:	a101      	add	r1, pc, #4	@ (adr r1, 80049c0 <_printf_i+0x40>)
 80049bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c0:	08004a19 	.word	0x08004a19
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	080049a9 	.word	0x080049a9
 80049cc:	080049a9 	.word	0x080049a9
 80049d0:	080049a9 	.word	0x080049a9
 80049d4:	080049a9 	.word	0x080049a9
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	080049a9 	.word	0x080049a9
 80049e0:	080049a9 	.word	0x080049a9
 80049e4:	080049a9 	.word	0x080049a9
 80049e8:	080049a9 	.word	0x080049a9
 80049ec:	08004b2b 	.word	0x08004b2b
 80049f0:	08004a57 	.word	0x08004a57
 80049f4:	08004ae5 	.word	0x08004ae5
 80049f8:	080049a9 	.word	0x080049a9
 80049fc:	080049a9 	.word	0x080049a9
 8004a00:	08004b4d 	.word	0x08004b4d
 8004a04:	080049a9 	.word	0x080049a9
 8004a08:	08004a57 	.word	0x08004a57
 8004a0c:	080049a9 	.word	0x080049a9
 8004a10:	080049a9 	.word	0x080049a9
 8004a14:	08004aed 	.word	0x08004aed
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6032      	str	r2, [r6, #0]
 8004a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e09c      	b.n	8004b66 <_printf_i+0x1e6>
 8004a2c:	6833      	ldr	r3, [r6, #0]
 8004a2e:	6820      	ldr	r0, [r4, #0]
 8004a30:	1d19      	adds	r1, r3, #4
 8004a32:	6031      	str	r1, [r6, #0]
 8004a34:	0606      	lsls	r6, r0, #24
 8004a36:	d501      	bpl.n	8004a3c <_printf_i+0xbc>
 8004a38:	681d      	ldr	r5, [r3, #0]
 8004a3a:	e003      	b.n	8004a44 <_printf_i+0xc4>
 8004a3c:	0645      	lsls	r5, r0, #25
 8004a3e:	d5fb      	bpl.n	8004a38 <_printf_i+0xb8>
 8004a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a44:	2d00      	cmp	r5, #0
 8004a46:	da03      	bge.n	8004a50 <_printf_i+0xd0>
 8004a48:	232d      	movs	r3, #45	@ 0x2d
 8004a4a:	426d      	negs	r5, r5
 8004a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a50:	4858      	ldr	r0, [pc, #352]	@ (8004bb4 <_printf_i+0x234>)
 8004a52:	230a      	movs	r3, #10
 8004a54:	e011      	b.n	8004a7a <_printf_i+0xfa>
 8004a56:	6821      	ldr	r1, [r4, #0]
 8004a58:	6833      	ldr	r3, [r6, #0]
 8004a5a:	0608      	lsls	r0, r1, #24
 8004a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a60:	d402      	bmi.n	8004a68 <_printf_i+0xe8>
 8004a62:	0649      	lsls	r1, r1, #25
 8004a64:	bf48      	it	mi
 8004a66:	b2ad      	uxthmi	r5, r5
 8004a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a6a:	4852      	ldr	r0, [pc, #328]	@ (8004bb4 <_printf_i+0x234>)
 8004a6c:	6033      	str	r3, [r6, #0]
 8004a6e:	bf14      	ite	ne
 8004a70:	230a      	movne	r3, #10
 8004a72:	2308      	moveq	r3, #8
 8004a74:	2100      	movs	r1, #0
 8004a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a7a:	6866      	ldr	r6, [r4, #4]
 8004a7c:	60a6      	str	r6, [r4, #8]
 8004a7e:	2e00      	cmp	r6, #0
 8004a80:	db05      	blt.n	8004a8e <_printf_i+0x10e>
 8004a82:	6821      	ldr	r1, [r4, #0]
 8004a84:	432e      	orrs	r6, r5
 8004a86:	f021 0104 	bic.w	r1, r1, #4
 8004a8a:	6021      	str	r1, [r4, #0]
 8004a8c:	d04b      	beq.n	8004b26 <_printf_i+0x1a6>
 8004a8e:	4616      	mov	r6, r2
 8004a90:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a94:	fb03 5711 	mls	r7, r3, r1, r5
 8004a98:	5dc7      	ldrb	r7, [r0, r7]
 8004a9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a9e:	462f      	mov	r7, r5
 8004aa0:	42bb      	cmp	r3, r7
 8004aa2:	460d      	mov	r5, r1
 8004aa4:	d9f4      	bls.n	8004a90 <_printf_i+0x110>
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d10b      	bne.n	8004ac2 <_printf_i+0x142>
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	07df      	lsls	r7, r3, #31
 8004aae:	d508      	bpl.n	8004ac2 <_printf_i+0x142>
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	6861      	ldr	r1, [r4, #4]
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	bfde      	ittt	le
 8004ab8:	2330      	movle	r3, #48	@ 0x30
 8004aba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004abe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ac2:	1b92      	subs	r2, r2, r6
 8004ac4:	6122      	str	r2, [r4, #16]
 8004ac6:	f8cd a000 	str.w	sl, [sp]
 8004aca:	464b      	mov	r3, r9
 8004acc:	aa03      	add	r2, sp, #12
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	f7ff fee7 	bl	80048a4 <_printf_common>
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d14a      	bne.n	8004b70 <_printf_i+0x1f0>
 8004ada:	f04f 30ff 	mov.w	r0, #4294967295
 8004ade:	b004      	add	sp, #16
 8004ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	f043 0320 	orr.w	r3, r3, #32
 8004aea:	6023      	str	r3, [r4, #0]
 8004aec:	4832      	ldr	r0, [pc, #200]	@ (8004bb8 <_printf_i+0x238>)
 8004aee:	2778      	movs	r7, #120	@ 0x78
 8004af0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	6831      	ldr	r1, [r6, #0]
 8004af8:	061f      	lsls	r7, r3, #24
 8004afa:	f851 5b04 	ldr.w	r5, [r1], #4
 8004afe:	d402      	bmi.n	8004b06 <_printf_i+0x186>
 8004b00:	065f      	lsls	r7, r3, #25
 8004b02:	bf48      	it	mi
 8004b04:	b2ad      	uxthmi	r5, r5
 8004b06:	6031      	str	r1, [r6, #0]
 8004b08:	07d9      	lsls	r1, r3, #31
 8004b0a:	bf44      	itt	mi
 8004b0c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b10:	6023      	strmi	r3, [r4, #0]
 8004b12:	b11d      	cbz	r5, 8004b1c <_printf_i+0x19c>
 8004b14:	2310      	movs	r3, #16
 8004b16:	e7ad      	b.n	8004a74 <_printf_i+0xf4>
 8004b18:	4826      	ldr	r0, [pc, #152]	@ (8004bb4 <_printf_i+0x234>)
 8004b1a:	e7e9      	b.n	8004af0 <_printf_i+0x170>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	f023 0320 	bic.w	r3, r3, #32
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	e7f6      	b.n	8004b14 <_printf_i+0x194>
 8004b26:	4616      	mov	r6, r2
 8004b28:	e7bd      	b.n	8004aa6 <_printf_i+0x126>
 8004b2a:	6833      	ldr	r3, [r6, #0]
 8004b2c:	6825      	ldr	r5, [r4, #0]
 8004b2e:	6961      	ldr	r1, [r4, #20]
 8004b30:	1d18      	adds	r0, r3, #4
 8004b32:	6030      	str	r0, [r6, #0]
 8004b34:	062e      	lsls	r6, r5, #24
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	d501      	bpl.n	8004b3e <_printf_i+0x1be>
 8004b3a:	6019      	str	r1, [r3, #0]
 8004b3c:	e002      	b.n	8004b44 <_printf_i+0x1c4>
 8004b3e:	0668      	lsls	r0, r5, #25
 8004b40:	d5fb      	bpl.n	8004b3a <_printf_i+0x1ba>
 8004b42:	8019      	strh	r1, [r3, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	6123      	str	r3, [r4, #16]
 8004b48:	4616      	mov	r6, r2
 8004b4a:	e7bc      	b.n	8004ac6 <_printf_i+0x146>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	1d1a      	adds	r2, r3, #4
 8004b50:	6032      	str	r2, [r6, #0]
 8004b52:	681e      	ldr	r6, [r3, #0]
 8004b54:	6862      	ldr	r2, [r4, #4]
 8004b56:	2100      	movs	r1, #0
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f7fb fb61 	bl	8000220 <memchr>
 8004b5e:	b108      	cbz	r0, 8004b64 <_printf_i+0x1e4>
 8004b60:	1b80      	subs	r0, r0, r6
 8004b62:	6060      	str	r0, [r4, #4]
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b6e:	e7aa      	b.n	8004ac6 <_printf_i+0x146>
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	4632      	mov	r2, r6
 8004b74:	4649      	mov	r1, r9
 8004b76:	4640      	mov	r0, r8
 8004b78:	47d0      	blx	sl
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d0ad      	beq.n	8004ada <_printf_i+0x15a>
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	079b      	lsls	r3, r3, #30
 8004b82:	d413      	bmi.n	8004bac <_printf_i+0x22c>
 8004b84:	68e0      	ldr	r0, [r4, #12]
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	4298      	cmp	r0, r3
 8004b8a:	bfb8      	it	lt
 8004b8c:	4618      	movlt	r0, r3
 8004b8e:	e7a6      	b.n	8004ade <_printf_i+0x15e>
 8004b90:	2301      	movs	r3, #1
 8004b92:	4632      	mov	r2, r6
 8004b94:	4649      	mov	r1, r9
 8004b96:	4640      	mov	r0, r8
 8004b98:	47d0      	blx	sl
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d09d      	beq.n	8004ada <_printf_i+0x15a>
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	68e3      	ldr	r3, [r4, #12]
 8004ba2:	9903      	ldr	r1, [sp, #12]
 8004ba4:	1a5b      	subs	r3, r3, r1
 8004ba6:	42ab      	cmp	r3, r5
 8004ba8:	dcf2      	bgt.n	8004b90 <_printf_i+0x210>
 8004baa:	e7eb      	b.n	8004b84 <_printf_i+0x204>
 8004bac:	2500      	movs	r5, #0
 8004bae:	f104 0619 	add.w	r6, r4, #25
 8004bb2:	e7f5      	b.n	8004ba0 <_printf_i+0x220>
 8004bb4:	08004ef5 	.word	0x08004ef5
 8004bb8:	08004f06 	.word	0x08004f06

08004bbc <__sflush_r>:
 8004bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc4:	0716      	lsls	r6, r2, #28
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	460c      	mov	r4, r1
 8004bca:	d454      	bmi.n	8004c76 <__sflush_r+0xba>
 8004bcc:	684b      	ldr	r3, [r1, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	dc02      	bgt.n	8004bd8 <__sflush_r+0x1c>
 8004bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dd48      	ble.n	8004c6a <__sflush_r+0xae>
 8004bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	d045      	beq.n	8004c6a <__sflush_r+0xae>
 8004bde:	2300      	movs	r3, #0
 8004be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004be4:	682f      	ldr	r7, [r5, #0]
 8004be6:	6a21      	ldr	r1, [r4, #32]
 8004be8:	602b      	str	r3, [r5, #0]
 8004bea:	d030      	beq.n	8004c4e <__sflush_r+0x92>
 8004bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	0759      	lsls	r1, r3, #29
 8004bf2:	d505      	bpl.n	8004c00 <__sflush_r+0x44>
 8004bf4:	6863      	ldr	r3, [r4, #4]
 8004bf6:	1ad2      	subs	r2, r2, r3
 8004bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bfa:	b10b      	cbz	r3, 8004c00 <__sflush_r+0x44>
 8004bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bfe:	1ad2      	subs	r2, r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c04:	6a21      	ldr	r1, [r4, #32]
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b0      	blx	r6
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	d106      	bne.n	8004c1e <__sflush_r+0x62>
 8004c10:	6829      	ldr	r1, [r5, #0]
 8004c12:	291d      	cmp	r1, #29
 8004c14:	d82b      	bhi.n	8004c6e <__sflush_r+0xb2>
 8004c16:	4a2a      	ldr	r2, [pc, #168]	@ (8004cc0 <__sflush_r+0x104>)
 8004c18:	40ca      	lsrs	r2, r1
 8004c1a:	07d6      	lsls	r6, r2, #31
 8004c1c:	d527      	bpl.n	8004c6e <__sflush_r+0xb2>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	6062      	str	r2, [r4, #4]
 8004c22:	04d9      	lsls	r1, r3, #19
 8004c24:	6922      	ldr	r2, [r4, #16]
 8004c26:	6022      	str	r2, [r4, #0]
 8004c28:	d504      	bpl.n	8004c34 <__sflush_r+0x78>
 8004c2a:	1c42      	adds	r2, r0, #1
 8004c2c:	d101      	bne.n	8004c32 <__sflush_r+0x76>
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	b903      	cbnz	r3, 8004c34 <__sflush_r+0x78>
 8004c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c36:	602f      	str	r7, [r5, #0]
 8004c38:	b1b9      	cbz	r1, 8004c6a <__sflush_r+0xae>
 8004c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c3e:	4299      	cmp	r1, r3
 8004c40:	d002      	beq.n	8004c48 <__sflush_r+0x8c>
 8004c42:	4628      	mov	r0, r5
 8004c44:	f7ff fbf4 	bl	8004430 <_free_r>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c4c:	e00d      	b.n	8004c6a <__sflush_r+0xae>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4628      	mov	r0, r5
 8004c52:	47b0      	blx	r6
 8004c54:	4602      	mov	r2, r0
 8004c56:	1c50      	adds	r0, r2, #1
 8004c58:	d1c9      	bne.n	8004bee <__sflush_r+0x32>
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0c6      	beq.n	8004bee <__sflush_r+0x32>
 8004c60:	2b1d      	cmp	r3, #29
 8004c62:	d001      	beq.n	8004c68 <__sflush_r+0xac>
 8004c64:	2b16      	cmp	r3, #22
 8004c66:	d11e      	bne.n	8004ca6 <__sflush_r+0xea>
 8004c68:	602f      	str	r7, [r5, #0]
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e022      	b.n	8004cb4 <__sflush_r+0xf8>
 8004c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	e01b      	b.n	8004cae <__sflush_r+0xf2>
 8004c76:	690f      	ldr	r7, [r1, #16]
 8004c78:	2f00      	cmp	r7, #0
 8004c7a:	d0f6      	beq.n	8004c6a <__sflush_r+0xae>
 8004c7c:	0793      	lsls	r3, r2, #30
 8004c7e:	680e      	ldr	r6, [r1, #0]
 8004c80:	bf08      	it	eq
 8004c82:	694b      	ldreq	r3, [r1, #20]
 8004c84:	600f      	str	r7, [r1, #0]
 8004c86:	bf18      	it	ne
 8004c88:	2300      	movne	r3, #0
 8004c8a:	eba6 0807 	sub.w	r8, r6, r7
 8004c8e:	608b      	str	r3, [r1, #8]
 8004c90:	f1b8 0f00 	cmp.w	r8, #0
 8004c94:	dde9      	ble.n	8004c6a <__sflush_r+0xae>
 8004c96:	6a21      	ldr	r1, [r4, #32]
 8004c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c9a:	4643      	mov	r3, r8
 8004c9c:	463a      	mov	r2, r7
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b0      	blx	r6
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	dc08      	bgt.n	8004cb8 <__sflush_r+0xfc>
 8004ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cae:	81a3      	strh	r3, [r4, #12]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	4407      	add	r7, r0
 8004cba:	eba8 0800 	sub.w	r8, r8, r0
 8004cbe:	e7e7      	b.n	8004c90 <__sflush_r+0xd4>
 8004cc0:	20400001 	.word	0x20400001

08004cc4 <_fflush_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	690b      	ldr	r3, [r1, #16]
 8004cc8:	4605      	mov	r5, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	b913      	cbnz	r3, 8004cd4 <_fflush_r+0x10>
 8004cce:	2500      	movs	r5, #0
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	b118      	cbz	r0, 8004cde <_fflush_r+0x1a>
 8004cd6:	6a03      	ldr	r3, [r0, #32]
 8004cd8:	b90b      	cbnz	r3, 8004cde <_fflush_r+0x1a>
 8004cda:	f7ff f9af 	bl	800403c <__sinit>
 8004cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f3      	beq.n	8004cce <_fflush_r+0xa>
 8004ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ce8:	07d0      	lsls	r0, r2, #31
 8004cea:	d404      	bmi.n	8004cf6 <_fflush_r+0x32>
 8004cec:	0599      	lsls	r1, r3, #22
 8004cee:	d402      	bmi.n	8004cf6 <_fflush_r+0x32>
 8004cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cf2:	f7ff fb9a 	bl	800442a <__retarget_lock_acquire_recursive>
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	f7ff ff5f 	bl	8004bbc <__sflush_r>
 8004cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d00:	07da      	lsls	r2, r3, #31
 8004d02:	4605      	mov	r5, r0
 8004d04:	d4e4      	bmi.n	8004cd0 <_fflush_r+0xc>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	059b      	lsls	r3, r3, #22
 8004d0a:	d4e1      	bmi.n	8004cd0 <_fflush_r+0xc>
 8004d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d0e:	f7ff fb8d 	bl	800442c <__retarget_lock_release_recursive>
 8004d12:	e7dd      	b.n	8004cd0 <_fflush_r+0xc>

08004d14 <__swhatbuf_r>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	460c      	mov	r4, r1
 8004d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1c:	2900      	cmp	r1, #0
 8004d1e:	b096      	sub	sp, #88	@ 0x58
 8004d20:	4615      	mov	r5, r2
 8004d22:	461e      	mov	r6, r3
 8004d24:	da0d      	bge.n	8004d42 <__swhatbuf_r+0x2e>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	bf14      	ite	ne
 8004d32:	2340      	movne	r3, #64	@ 0x40
 8004d34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d38:	2000      	movs	r0, #0
 8004d3a:	6031      	str	r1, [r6, #0]
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	b016      	add	sp, #88	@ 0x58
 8004d40:	bd70      	pop	{r4, r5, r6, pc}
 8004d42:	466a      	mov	r2, sp
 8004d44:	f000 f848 	bl	8004dd8 <_fstat_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dbec      	blt.n	8004d26 <__swhatbuf_r+0x12>
 8004d4c:	9901      	ldr	r1, [sp, #4]
 8004d4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d56:	4259      	negs	r1, r3
 8004d58:	4159      	adcs	r1, r3
 8004d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d5e:	e7eb      	b.n	8004d38 <__swhatbuf_r+0x24>

08004d60 <__smakebuf_r>:
 8004d60:	898b      	ldrh	r3, [r1, #12]
 8004d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d64:	079d      	lsls	r5, r3, #30
 8004d66:	4606      	mov	r6, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	d507      	bpl.n	8004d7c <__smakebuf_r+0x1c>
 8004d6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	6123      	str	r3, [r4, #16]
 8004d74:	2301      	movs	r3, #1
 8004d76:	6163      	str	r3, [r4, #20]
 8004d78:	b003      	add	sp, #12
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	ab01      	add	r3, sp, #4
 8004d7e:	466a      	mov	r2, sp
 8004d80:	f7ff ffc8 	bl	8004d14 <__swhatbuf_r>
 8004d84:	9f00      	ldr	r7, [sp, #0]
 8004d86:	4605      	mov	r5, r0
 8004d88:	4639      	mov	r1, r7
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff fbbc 	bl	8004508 <_malloc_r>
 8004d90:	b948      	cbnz	r0, 8004da6 <__smakebuf_r+0x46>
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	059a      	lsls	r2, r3, #22
 8004d98:	d4ee      	bmi.n	8004d78 <__smakebuf_r+0x18>
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e7e2      	b.n	8004d6c <__smakebuf_r+0xc>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	6020      	str	r0, [r4, #0]
 8004daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	9b01      	ldr	r3, [sp, #4]
 8004db2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004db6:	b15b      	cbz	r3, 8004dd0 <__smakebuf_r+0x70>
 8004db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 f81d 	bl	8004dfc <_isatty_r>
 8004dc2:	b128      	cbz	r0, 8004dd0 <__smakebuf_r+0x70>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	431d      	orrs	r5, r3
 8004dd4:	81a5      	strh	r5, [r4, #12]
 8004dd6:	e7cf      	b.n	8004d78 <__smakebuf_r+0x18>

08004dd8 <_fstat_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d07      	ldr	r5, [pc, #28]	@ (8004df8 <_fstat_r+0x20>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	f7fb ff92 	bl	8000d0e <_fstat>
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	d102      	bne.n	8004df4 <_fstat_r+0x1c>
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	b103      	cbz	r3, 8004df4 <_fstat_r+0x1c>
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop
 8004df8:	20000360 	.word	0x20000360

08004dfc <_isatty_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d06      	ldr	r5, [pc, #24]	@ (8004e18 <_isatty_r+0x1c>)
 8004e00:	2300      	movs	r3, #0
 8004e02:	4604      	mov	r4, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	602b      	str	r3, [r5, #0]
 8004e08:	f7fb ff91 	bl	8000d2e <_isatty>
 8004e0c:	1c43      	adds	r3, r0, #1
 8004e0e:	d102      	bne.n	8004e16 <_isatty_r+0x1a>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	b103      	cbz	r3, 8004e16 <_isatty_r+0x1a>
 8004e14:	6023      	str	r3, [r4, #0]
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	20000360 	.word	0x20000360

08004e1c <_sbrk_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d06      	ldr	r5, [pc, #24]	@ (8004e38 <_sbrk_r+0x1c>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f7fb ff9a 	bl	8000d60 <_sbrk>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_sbrk_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_sbrk_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	20000360 	.word	0x20000360

08004e3c <_init>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr

08004e48 <_fini>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr
